{
  "address": "0xB76EA7C4cED8Bf0011B03Bd558bbdEA19CBf362d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clearingHouseLogicAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vPoolWrapperLogicAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "insuranceFundLogicAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "rBase",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nativeOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_UNISWAP_V3_FACTORY_ADDRESS",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_UNISWAP_V3_DEFAULT_FEE_TIER",
          "type": "uint24"
        },
        {
          "internalType": "bytes32",
          "name": "_UNISWAP_V3_POOL_BYTE_CODE_HASH",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "IllegalAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernance",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IUniswapV3Pool",
          "name": "vPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IVPoolWrapper",
          "name": "vPoolWrapper",
          "type": "address"
        }
      ],
      "name": "PoolInitlized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTeamMultisig",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTeamMultisig",
          "type": "address"
        }
      ],
      "name": "TeamMultisigTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V3_DEFAULT_FEE_TIER",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V3_FACTORY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V3_POOL_BYTE_CODE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "vTokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "vTokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "rTokenDecimals",
                  "type": "uint8"
                }
              ],
              "internalType": "struct VTokenDeployer.DeployVTokenParams",
              "name": "deployVTokenParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "initialMarginRatio",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "maintainanceMarginRatio",
                  "type": "uint16"
                },
                {
                  "internalType": "uint32",
                  "name": "twapDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "whitelisted",
                  "type": "bool"
                },
                {
                  "internalType": "contract IOracle",
                  "name": "oracle",
                  "type": "address"
                }
              ],
              "internalType": "struct IClearingHouse.RageTradePoolSettings",
              "name": "rageTradePoolInitialSettings",
              "type": "tuple"
            },
            {
              "internalType": "uint24",
              "name": "liquidityFeePips",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "protocolFeePips",
              "type": "uint24"
            }
          ],
          "internalType": "struct RageTradeFactory.InitializePoolParams",
          "name": "initializePoolParams",
          "type": "tuple"
        }
      ],
      "name": "initializePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAdmin",
      "outputs": [
        {
          "internalType": "contract ProxyAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vPoolWrapperLogicAddress",
          "type": "address"
        }
      ],
      "name": "setVPoolWrapperLogicAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamMultisig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTeamMultisig",
          "type": "address"
        }
      ],
      "name": "transferTeamMultisig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBase",
      "outputs": [
        {
          "internalType": "contract IVBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPoolWrapperLogicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0xB76EA7C4cED8Bf0011B03Bd558bbdEA19CBf362d",
    "transactionIndex": 0,
    "gasUsed": "68331320",
    "logsBloom": "0x00000000000000000000000000000000400000004000001000a00000800000000000000000000008000001000000000400000000000000000000040000000000000048000000000000000000000002000001200040000800000000000000008000010400020000000000004010000800200000820000000001000000000000400000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000080000000000000000400000020000000000000010100000000000008400400000200000000000021000000000000000002000900000000000000000000000000000200000000000000",
    "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593",
    "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0xB76EA7C4cED8Bf0011B03Bd558bbdEA19CBf362d",
        "topics": [
          "0x5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0xB76EA7C4cED8Bf0011B03Bd558bbdEA19CBf362d",
        "topics": [
          "0x39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0xDCde5cD7Eb7adeE678B606E0680DD7B8119Ff9E9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0xDCde5cD7Eb7adeE678B606E0680DD7B8119Ff9E9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0xf6ca7BC118d2f3A4d05D908DC5FB8937bFd6EcBA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x4969ef48afFb57F1BaCC424fB95112c6d345E80d",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x000000000000000000000000d6881c05b0fd5725499595c3e7dbba46bcfbe4a6"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x4969ef48afFb57F1BaCC424fB95112c6d345E80d",
        "topics": [
          "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dcde5cd7eb7adee678b606e0680dd7b8119ff9e9",
        "logIndex": 6,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x6f4ba7FB65304EA7a1515908e317939c9d2D5c77",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x0000000000000000000000000a349f5ea2e4f9c7aa327cabbcb68f4c6ab5a284"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x6f4ba7FB65304EA7a1515908e317939c9d2D5c77",
        "topics": [
          "0x5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x6f4ba7FB65304EA7a1515908e317939c9d2D5c77",
        "topics": [
          "0x39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x6f4ba7FB65304EA7a1515908e317939c9d2D5c77",
        "topics": [
          "0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dcde5cd7eb7adee678b606e0680dd7b8119ff9e9",
        "logIndex": 10,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x6f4ba7FB65304EA7a1515908e317939c9d2D5c77",
        "topics": [
          "0x5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8678703,
        "transactionHash": "0xd769d083c4f45263964fd236214d353dded127d36f0b7eb02b4a3d719a2fcea9",
        "address": "0x6f4ba7FB65304EA7a1515908e317939c9d2D5c77",
        "topics": [
          "0x39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb2",
          "0x000000000000000000000000b76ea7c4ced8bf0011b03bd558bbdea19cbf362d",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x009187437b6d7f7aa8868f00b0a1731f32f24d990b260bb2f65656e47e4b2593"
      }
    ],
    "blockNumber": 8678703,
    "cumulativeGasUsed": "21882359",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0a349f5EA2E4f9C7aA327CaBBCb68f4C6ab5a284",
    "0xE647989507d883387994fC089A498F9bC88129F7",
    "0xd6881C05b0FD5725499595c3E7DBba46bcFbE4A6",
    "0x7aAD62deFa49DE9907CbC171c849bC9D442ca321",
    "0x621355b750f6493AECDa69a4f0a0D29A79246c7e",
    "0x1F98431c8aD98523631AE4a59f267346ea31F984",
    500,
    "0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54"
  ],
  "solcInputHash": "11fe70ca772ffd2defe9ec97f4437e59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clearingHouseLogicAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vPoolWrapperLogicAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"insuranceFundLogicAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"rBase\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_UNISWAP_V3_FACTORY_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_UNISWAP_V3_DEFAULT_FEE_TIER\",\"type\":\"uint24\"},{\"internalType\":\"bytes32\",\"name\":\"_UNISWAP_V3_POOL_BYTE_CODE_HASH\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"IllegalAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"vPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IVPoolWrapper\",\"name\":\"vPoolWrapper\",\"type\":\"address\"}],\"name\":\"PoolInitlized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTeamMultisig\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamMultisig\",\"type\":\"address\"}],\"name\":\"TeamMultisigTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_DEFAULT_FEE_TIER\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_POOL_BYTE_CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"vTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct VTokenDeployer.DeployVTokenParams\",\"name\":\"deployVTokenParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"initialMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maintainanceMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IClearingHouse.RageTradePoolSettings\",\"name\":\"rageTradePoolInitialSettings\",\"type\":\"tuple\"},{\"internalType\":\"uint24\",\"name\":\"liquidityFeePips\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"protocolFeePips\",\"type\":\"uint24\"}],\"internalType\":\"struct RageTradeFactory.InitializePoolParams\",\"name\":\"initializePoolParams\",\"type\":\"tuple\"}],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAdmin\",\"outputs\":[{\"internalType\":\"contract ProxyAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vPoolWrapperLogicAddress\",\"type\":\"address\"}],\"name\":\"setVPoolWrapperLogicAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamMultisig\",\"type\":\"address\"}],\"name\":\"transferTeamMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBase\",\"outputs\":[{\"internalType\":\"contract IVBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPoolWrapperLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Need to deploy logic contracts for ClearingHouse, VPoolWrapper, InsuranceFund prior to this\"},\"governance()\":{\"details\":\"Returns the address of the current governance.\"},\"initializePool(((string,string,uint8),(uint16,uint16,uint32,bool,address),uint24,uint24))\":{\"details\":\"An already deployed oracle contract address (implementing IOracle) is needed prior to using this\",\"params\":{\"initializePoolParams\":\"parameters for initializing the pool\"}},\"setVPoolWrapperLogicAddress(address)\":{\"details\":\"When a new vPoolWrapperLogic is deployed, make sure that the initialize method is called.\",\"params\":{\"_vPoolWrapperLogicAddress\":\": new logic address\"}},\"teamMultisig()\":{\"details\":\"Returns the address of the current team multisig.transferTeamMultisig\"},\"transferGovernance(address)\":{\"details\":\"Transfers governance to a new account (`newGovernance`). Can only be called by the current governance.\"},\"transferTeamMultisig(address)\":{\"details\":\"Transfers teamMultisig to a new account (`newTeamMultisig`). Can only be called by the current teamMultisig or current governance.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Sets up the protocol by deploying necessary core contracts\"},\"initializePool(((string,string,uint8),(uint16,uint16,uint32,bool,address),uint24,uint24))\":{\"notice\":\"Sets up a new Rage Trade Pool by deploying necessary contracts\"},\"setVPoolWrapperLogicAddress(address)\":{\"notice\":\"Admin method to set latest implementation logic for VPoolWrapper\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/RageTradeFactory.sol\":\"RageTradeFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcbccf806d646bd9e2594650917208245d45998b887d5fc914de424247f5f9f9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x8ddea9f930f26e588ea606f44c90d2623560c908e38614a03a4ca78aea8f9202\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(\\n        TransparentUpgradeableProxy proxy,\\n        address implementation,\\n        bytes memory data\\n    ) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8f1503ee5d495997d1bd9675f432e74a299d34c87bdc38647dcc554e76591b41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2bf89a0dae89f861c5e8013478e650e918d98d376e75393867ccec88b0bf2b90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // Cannot overflow because denominator != 0\\n        uint256 twos;\\n        assembly {\\n            twos := and(add(not(denominator), 1), denominator)\\n        }\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n            prod0 := or(prod0, mul(prod1, twos))\\n        }\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv;\\n\\n        assembly {\\n            inv := xor(mul(3, denominator), 2)\\n        }\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        assembly {\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\\n        }\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        assembly {\\n            result := mul(prod0, inv)\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b1cd11afa50448a73daa8e8088911aff2c716eb721b0d2c14627e8fa23cb793\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x + y) >= x);\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x - y) <= x);\\n        }\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require(x == 0 || (z = x * y) / x == y);\\n        }\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require((z = x + y) >= x == (y >= 0));\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require((z = x - y) <= x == (y >= 0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6c7bb12f704b6d5b4e5c39358ab4dd7e2c14d198cdc2f44b4edbc8c77d1a63c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        unchecked {\\n            require((z = uint160(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require((z = int128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255);\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x022028c6075d21ecb8c86c9f1bec125193092fa038a239d5eb5beb740313f142\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        unchecked {\\n            // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n            if (amount == 0) return sqrtPX96;\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n            if (add) {\\n                uint256 product;\\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                    uint256 denominator = numerator1 + product;\\n                    if (denominator >= numerator1)\\n                        // always fits in 160 bits\\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n                }\\n\\n                return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n            } else {\\n                uint256 product;\\n                // if the product overflows, we know the denominator underflows\\n                // in addition, we must check that the denominator does not underflow\\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n                uint256 denominator = numerator1 - product;\\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        unchecked {\\n            // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n            // in both cases, avoid a mulDiv for most inputs\\n            if (add) {\\n                uint256 quotient =\\n                    (\\n                        amount <= type(uint160).max\\n                            ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                            : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                    );\\n\\n                return uint256(sqrtPX96).add(quotient).toUint160();\\n            } else {\\n                uint256 quotient =\\n                    (\\n                        amount <= type(uint160).max\\n                            ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                            : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                    );\\n\\n                require(sqrtPX96 > quotient);\\n                // always fits 160 bits\\n                return uint160(sqrtPX96 - quotient);\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        unchecked {\\n            require(sqrtPX96 > 0);\\n            require(liquidity > 0);\\n\\n            // round to make sure that we don't pass the target price\\n            return\\n                zeroForOne\\n                    ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                    : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        unchecked {\\n            require(sqrtPX96 > 0);\\n            require(liquidity > 0);\\n\\n            // round to make sure that we pass the target price\\n            return\\n                zeroForOne\\n                    ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                    : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n        }\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n            require(sqrtRatioAX96 > 0);\\n\\n            return\\n                roundUp\\n                    ? UnsafeMath.divRoundingUp(\\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                        sqrtRatioAX96\\n                    )\\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                roundUp\\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fd52eb6c439be9c9ace522d9b1b5a074878257c81dd8a6cc6dc784c8a5f1c7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {     \\n            // second inequality must be < because the price can never reach the price at the max tick\\n            require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63b385391f044a6332a912e2264bc2932dbf9a2a47ce1a7c743c8d0deddbb065\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IGovernable } from './IGovernable.sol';\\nimport { IInsuranceFund } from './IInsuranceFund.sol';\\nimport { IOracle } from './IOracle.sol';\\nimport { IVBase } from './IVBase.sol';\\nimport { IVPoolWrapper } from './IVPoolWrapper.sol';\\nimport { IVToken } from './IVToken.sol';\\n\\n// TODO move these to interface\\nimport { Account } from '../libraries/Account.sol';\\n\\ninterface IClearingHouse is IGovernable {\\n    struct RageTradePool {\\n        IUniswapV3Pool vPool;\\n        IVPoolWrapper vPoolWrapper;\\n        RageTradePoolSettings settings;\\n    }\\n\\n    struct RageTradePoolSettings {\\n        uint16 initialMarginRatio;\\n        uint16 maintainanceMarginRatio;\\n        uint32 twapDuration;\\n        bool whitelisted;\\n        IOracle oracle;\\n    }\\n\\n    enum LimitOrderType {\\n        NONE,\\n        LOWER_LIMIT,\\n        UPPER_LIMIT\\n    }\\n\\n    struct LiquidityChangeParams {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int128 liquidityDelta;\\n        uint160 sqrtPriceCurrent;\\n        uint16 slippageToleranceBps;\\n        bool closeTokenPosition;\\n        LimitOrderType limitOrderType;\\n    }\\n\\n    /// @notice swaps params for specifying the swap params\\n    /// @param amount amount of tokens/base to swap\\n    /// @param sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\\n    /// @param isNotional specifies whether the amount represents token amount (false) or base amount(true)\\n    /// @param isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\\n    struct SwapParams {\\n        int256 amount;\\n        uint160 sqrtPriceLimit;\\n        bool isNotional;\\n        bool isPartialAllowed;\\n    }\\n\\n    /// @notice parameters to be used for account balance update\\n    /// @param vBaseIncrease specifies the increase in base balance\\n    /// @param vTokenIncrease specifies the increase in token balance\\n    /// @param traderPositionIncrease specifies the increase in trader position\\n    struct BalanceAdjustments {\\n        int256 vBaseIncrease;\\n        int256 vTokenIncrease;\\n        int256 traderPositionIncrease;\\n    }\\n\\n    struct DepositTokenView {\\n        address rTokenAddress;\\n        uint256 balance;\\n    }\\n\\n    struct VTokenPositionView {\\n        address vTokenAddress;\\n        int256 balance; // vTokenLong - vTokenShort\\n        int256 netTraderPosition;\\n        int256 sumAX128Ckpt;\\n        LiquidityPositionView[] liquidityPositions;\\n    }\\n\\n    struct LiquidityPositionView {\\n        LimitOrderType limitOrderType;\\n        // the tick range of the position;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // the liquidity of the position\\n        uint128 liquidity;\\n        int256 vTokenAmountIn;\\n        // funding payment checkpoints\\n        int256 sumALastX128;\\n        int256 sumBInsideLastX128;\\n        int256 sumFpInsideLastX128;\\n        // fee growth inside\\n        uint256 sumFeeInsideLastX128;\\n    }\\n\\n    /// @notice error to denote invalid account access\\n    /// @param senderAddress address of msg sender\\n    error AccessDenied(address senderAddress);\\n\\n    /// @notice error to denote usage of unsupported token\\n    /// @param vToken address of token\\n    error UnsupportedVToken(IVToken vToken);\\n\\n    /// @notice error to denote usage of unsupported token\\n    /// @param rTokenAddress address of token\\n    error UnsupportedRToken(address rTokenAddress);\\n\\n    /// @notice error to denote low notional value of txn\\n    /// @param notionalValue notional value of txn\\n    error LowNotionalValue(uint256 notionalValue);\\n\\n    /// @notice error to denote invalid token liquidation (fraction to liquidate> 1)\\n    error InvalidTokenLiquidationParameters();\\n\\n    /// @notice error to denote usage of unitialized token\\n    /// @param vTokenTruncatedAddress unitialized truncated address supplied\\n    error UninitializedToken(uint32 vTokenTruncatedAddress);\\n\\n    /// @notice error to denote slippage of txn beyond set threshold\\n    error SlippageBeyondTolerance();\\n\\n    function __ClearingHouse_init(\\n        address _rageTradeFactoryAddress,\\n        IERC20 _rBase,\\n        IInsuranceFund _insuranceFund,\\n        IVBase _vBase,\\n        IOracle _nativeOracle\\n    ) external;\\n\\n    /// @notice creates a new account and adds it to the accounts map\\n    /// @return newAccountId - serial number of the new account created\\n    function createAccount() external returns (uint256 newAccountId);\\n\\n    /// @notice withdraws protocol fees collected in the supplied wrappers to team multisig\\n    /// @param wrapperAddresses list of wrapper addresses to collect fees from\\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external;\\n\\n    /// @notice deposits 'amount' of token associated with 'vTokenTruncatedAddress'\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to deposit\\n    /// @param amount amount of token to deposit\\n    function addMargin(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice withdraws 'amount' of token associated with 'vTokenTruncatedAddress'\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param amount amount of token to withdraw\\n    function removeMargin(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice withdraws 'amount' of base token from the profit made\\n    /// @param accountNo account number\\n    /// @param amount amount of token to withdraw\\n    function removeProfit(uint256 accountNo, uint256 amount) external;\\n\\n    /// @notice swaps token associated with 'vTokenTruncatedAddress' by 'amount' (Long if amount>0 else Short)\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param swapParams swap parameters\\n    function swapToken(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        SwapParams memory swapParams\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut);\\n\\n    /// @notice updates range order of token associated with 'vTokenTruncatedAddress' by 'liquidityDelta' (Adds if amount>0 else Removes)\\n    /// @notice also can be used to update limitOrderType\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param liquidityChangeParams liquidity change parameters\\n    function updateRangeOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        LiquidityChangeParams calldata liquidityChangeParams\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut);\\n\\n    /// @notice keeper call to remove a limit order\\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param tickLower liquidity change parameters\\n    /// @param tickUpper liquidity change parameters\\n    // @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    function removeLimitOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external returns (uint256 keeperFee);\\n\\n    /// @notice keeper call for liquidation of range position\\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\\n    /// @param accountNo account number\\n    // @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    function liquidateLiquidityPositions(uint256 accountNo) external returns (int256 keeperFee);\\n\\n    /// @notice keeper call for liquidation of token position\\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\\n    /// @param liquidatorAccountNo liquidator account number\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\\n    // @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator base and token balance and net token position\\n    function liquidateTokenPosition(\\n        uint256 liquidatorAccountNo,\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint16 liquidationBps\\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\\n\\n    function isVTokenAddressAvailable(uint32 truncated) external view returns (bool);\\n\\n    function registerPool(address full, RageTradePool calldata rageTradePool) external;\\n\\n    function isRealTokenAlreadyInitilized(address _realToken) external view returns (bool);\\n\\n    function initRealToken(address _realToken) external;\\n\\n    function getTwapSqrtPricesForSetDuration(IVToken vToken)\\n        external\\n        view\\n        returns (uint256 realPriceX128, uint256 virtualPriceX128);\\n}\\n\",\"keccak256\":\"0xfba1fa7eba9593000193c92ae793bd9af6a05f357ad2b23ac9a06219d17d4a27\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IGovernable {\\n    function governance() external view returns (address);\\n\\n    function teamMultisig() external view returns (address);\\n\\n    function transferGovernance(address newGovernance) external;\\n\\n    function transferTeamMultisig(address newTeamMultisig) external;\\n}\\n\",\"keccak256\":\"0x1f30ea80d816aa283f24b2b24cce99fb1669ee45b425dede90b49867e4463d4b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInsuranceFund.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\n\\ninterface IInsuranceFund {\\n    function __InsuranceFund_init(\\n        IERC20 rBase,\\n        IClearingHouse clearingHouse,\\n        string calldata name,\\n        string calldata symbol\\n    ) external;\\n\\n    function claim(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5650168e1bc04c5f16584e12e112461e02bc333f536b88fdbf3381ef2b391ad0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IOracle {\\n    // TODO change to X128 instead of X96\\n    function getTwapSqrtPriceX96(uint32 twapDuration) external view returns (uint160 sqrtPriceX96);\\n}\\n\",\"keccak256\":\"0x557aab09de88ac0d7036a2928b84fe8becb17d28851fe9f8e61616fc4f177b9e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVBase is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function authorize(address vPoolWrapper) external;\\n}\\n\",\"keccak256\":\"0xd0d676570a289528989eebd73897963ec70b2d82eb2d82f8b4ce52aee3a08d3b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVPoolWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { IVToken } from '../libraries/VTokenLib.sol';\\n\\nimport { IVBase } from './IVBase.sol';\\nimport { IVToken } from './IVToken.sol';\\nimport { IClearingHouse } from './IClearingHouse.sol';\\n\\ninterface IVPoolWrapper {\\n    struct WrapperValuesInside {\\n        int256 sumAX128;\\n        int256 sumBInsideX128;\\n        int256 sumFpInsideX128;\\n        uint256 sumFeeInsideX128;\\n    }\\n\\n    event Swap(int256 vTokenIn, int256 vBaseIn, uint256 liquidityFees, uint256 protocolFees);\\n\\n    struct InitializeVPoolWrapperParams {\\n        IClearingHouse clearingHouse;\\n        IVToken vToken;\\n        IVBase vBase;\\n        IUniswapV3Pool vPool;\\n        uint24 liquidityFeePips;\\n        uint24 protocolFeePips;\\n        uint24 UNISWAP_V3_DEFAULT_FEE_TIER;\\n    }\\n\\n    function __VPoolWrapper_init(InitializeVPoolWrapperParams calldata params) external;\\n\\n    function vPool() external view returns (IUniswapV3Pool);\\n\\n    function updateGlobalFundingState() external;\\n\\n    function getValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function liquidityChange(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidity\\n    )\\n        external\\n        returns (\\n            int256 vBaseAmount,\\n            int256 vTokenAmount,\\n            WrapperValuesInside memory wrapperValuesInside\\n        );\\n\\n    function getSumAX128() external view returns (int256);\\n\\n    function getExtrapolatedSumAX128() external view returns (int256);\\n\\n    function swapToken(\\n        int256 amount,\\n        uint160 sqrtPriceLimit,\\n        bool isNotional\\n    ) external returns (int256 vTokenAmount, int256 vBaseAmount);\\n\\n    function collectAccruedProtocolFee() external returns (uint256 accruedProtocolFeeLast);\\n}\\n\",\"keccak256\":\"0xaec3ea9fb1bc8454206ec7b70667a62263f11dcc329892354b47c9188edc6140\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setVPoolWrapper(address) external;\\n}\\n\",\"keccak256\":\"0x8e1184dcb9ac0492d2f3a1aaea68f021b5f3e634c9a43a357b7290db7bf1cb41\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Account.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.10;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\n\\nimport { DepositTokenSet } from './DepositTokenSet.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { SignedMath } from './SignedMath.sol';\\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\nimport { RTokenLib } from './RTokenLib.sol';\\nimport { VTokenPosition } from './VTokenPosition.sol';\\nimport { VTokenPositionSet } from './VTokenPositionSet.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVBase } from '../interfaces/IVBase.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary Account {\\n    using Account for Account.UserInfo;\\n    using DepositTokenSet for DepositTokenSet.Info;\\n    using FullMath for uint256;\\n    using LiquidityPositionSet for LiquidityPositionSet.Info;\\n    using SafeCast for uint256;\\n    using SignedFullMath for int256;\\n    using SignedMath for int256;\\n    using VTokenLib for IVToken;\\n    using VTokenPositionSet for VTokenPositionSet.Set;\\n    using VTokenPosition for VTokenPosition.Position;\\n\\n    /// @notice account info for user\\n    /// @param owner specifies the account owner\\n    /// @param tokenPositions is set of all open token positions\\n    /// @param tokenDeposits is set of all deposits\\n    struct UserInfo {\\n        address owner;\\n        VTokenPositionSet.Set tokenPositions;\\n        DepositTokenSet.Info tokenDeposits;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    struct ProtocolInfo {\\n        // rage trade pools\\n        mapping(IVToken => IClearingHouse.RageTradePool) pools;\\n        // conversion from compressed addressed to full address\\n        mapping(uint32 => RTokenLib.RToken) rTokens;\\n        mapping(uint32 => IVToken) vTokens;\\n        // virtual base\\n        IVBase vBase;\\n        // accounting settings\\n        LiquidationParams liquidationParams;\\n        uint256 minRequiredMargin;\\n        uint256 removeLimitOrderFee;\\n        uint256 minimumOrderNotional;\\n        // reserved for adding slots in future\\n        uint256[100] _emptySlots;\\n    }\\n\\n    /// @notice parameters to be used for liquidation\\n    /// @param fixFee specifies the fixFee to be given for successful liquidation\\n    /// @param minRequiredMargin specifies the minimum required margin threshold\\n    /// @param liquidationFeeFraction specifies the percentage of notional value liquidated to be charged as liquidation fees\\n    /// @param tokenLiquidationPriceDeltaBps specifies the price delta from current perp price at which the liquidator should get the position\\n    /// @param insuranceFundFeeShare specifies the fee share for insurance fund out of the total liquidation fee\\n    struct LiquidationParams {\\n        uint16 liquidationFeeFraction;\\n        uint16 tokenLiquidationPriceDeltaBps;\\n        uint16 insuranceFundFeeShareBps;\\n    }\\n\\n    /// @notice error to denote that there is not enough margin for the transaction to go through\\n    /// @param accountMarketValue shows the account market value after the transaction is executed\\n    /// @param totalRequiredMargin shows the total required margin after the transaction is executed\\n    error InvalidTransactionNotEnoughMargin(int256 accountMarketValue, int256 totalRequiredMargin);\\n\\n    /// @notice error to denote that there is not enough profit during profit withdrawal\\n    /// @param totalProfit shows the value of positions at the time of execution after removing amount specified\\n    error InvalidTransactionNotEnoughProfit(int256 totalProfit);\\n\\n    /// @notice error to denote that there is enough margin, hence the liquidation is invalid\\n    /// @param accountMarketValue shows the account market value before liquidation\\n    /// @param totalRequiredMargin shows the total required margin before liquidation\\n    error InvalidLiquidationAccountAbovewater(int256 accountMarketValue, int256 totalRequiredMargin);\\n\\n    /// @notice error to denote that there are active ranges present during token liquidation, hence the liquidation is invalid\\n    /// @param vToken shows the token address for which range is active\\n    error InvalidLiquidationActiveRangePresent(IVToken vToken);\\n\\n    /// @notice denotes new account creation\\n    /// @param ownerAddress wallet address of account owner\\n    /// @param accountNo serial number of the account\\n    event AccountCreated(address indexed ownerAddress, uint256 accountNo);\\n\\n    /// @notice denotes deposit of margin\\n    /// @param accountNo serial number of the account\\n    /// @param rTokenAddress token in which margin is deposited\\n    /// @param amount amount of tokens deposited\\n    event DepositMargin(uint256 accountNo, address rTokenAddress, uint256 amount);\\n\\n    /// @notice denotes withdrawal of margin\\n    /// @param accountNo serial number of the account\\n    /// @param rTokenAddress token in which margin is withdrawn\\n    /// @param amount amount of tokens withdrawn\\n    event WithdrawMargin(uint256 accountNo, address rTokenAddress, uint256 amount);\\n\\n    /// @notice denotes withdrawal of profit in base token\\n    /// @param accountNo serial number of the account\\n    /// @param amount amount of profit withdrawn\\n    event WithdrawProfit(uint256 accountNo, uint256 amount);\\n\\n    /// @notice denotes token position change\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token whose position was taken\\n    /// @param tokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @param baseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    event TokenPositionChange(uint256 accountNo, IVToken vToken, int256 tokenAmountOut, int256 baseAmountOut);\\n\\n    /// @notice denotes token position change due to liquidity add/remove\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token whose position was taken\\n    /// @param tickLower lower tick of the range updated\\n    /// @param tickUpper upper tick of the range updated\\n    /// @param tokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    event LiquidityTokenPositionChange(\\n        uint256 accountNo,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int256 tokenAmountOut\\n    );\\n\\n    /// @notice denotes liquidity add/remove\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token whose position was taken\\n    /// @param tickLower lower tick of the range updated\\n    /// @param tickUpper upper tick of the range updated\\n    /// @param liquidityDelta change in liquidity value\\n    /// @param limitOrderType the type of range position\\n    /// @param tokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @param baseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    event LiquidityChange(\\n        uint256 accountNo,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta,\\n        IClearingHouse.LimitOrderType limitOrderType,\\n        int256 tokenAmountOut,\\n        int256 baseAmountOut\\n    );\\n\\n    /// @notice denotes funding payment for a range / token position\\n    /// @dev for a token position tickLower = tickUpper = 0\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token for which funding was paid\\n    /// @param tickLower lower tick of the range for which funding was paid\\n    /// @param tickUpper upper tick of the range for which funding was paid\\n    /// @param amount amount of funding paid (negative) or received (positive)\\n    event FundingPayment(uint256 accountNo, IVToken vToken, int24 tickLower, int24 tickUpper, int256 amount);\\n\\n    /// @notice denotes fee payment for a range / token position\\n    /// @dev for a token position tickLower = tickUpper = 0\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token for which fee was paid\\n    /// @param tickLower lower tick of the range for which fee was paid\\n    /// @param tickUpper upper tick of the range for which fee was paid\\n    /// @param amount amount of fee paid (negative) or received (positive)\\n    event LiquidityFee(uint256 accountNo, IVToken vToken, int24 tickLower, int24 tickUpper, int256 amount);\\n\\n    /// @notice denotes protocol fee withdrawal from a pool wrapper\\n    /// @param wrapperAddress address of token for which fee was paid\\n    /// @param feeAmount amount of protocol fee which was withdrawn\\n    event ProtocolFeeWithdrawm(address wrapperAddress, uint256 feeAmount);\\n\\n    /// @notice denotes range position liquidation event\\n    /// @dev all range positions are liquidated and the current tokens inside the range are added in as token positions to the account\\n    /// @param accountNo serial number of the account\\n    /// @param keeperAddress address of keeper who performed the liquidation\\n    /// @param liquidationFee total liquidation fee charged to the account\\n    /// @param keeperFee total liquidaiton fee paid to the keeper (positive only)\\n    /// @param insuranceFundFee total liquidaiton fee paid to the insurance fund (can be negative in case the account is not enought to cover the fee)\\n    event LiquidateRanges(\\n        uint256 accountNo,\\n        address keeperAddress,\\n        int256 liquidationFee,\\n        int256 keeperFee,\\n        int256 insuranceFundFee\\n    );\\n\\n    /// @notice denotes token position liquidation event\\n    /// @dev the selected token position is take from the current account and moved to liquidatorAccount at a discounted prive to current pool price\\n    /// @param accountNo serial number of the account\\n    /// @param liquidatorAccountNo  account which performed the liquidation\\n    /// @param vToken address of token for whose position was liquidated\\n    /// @param liquidationBps the fraction of current position which was liquidated in bps\\n    /// @param liquidationPriceX128 price at which liquidation was performed\\n    /// @param liquidatorPriceX128 discounted price at which tokens were transferred to the liquidator account\\n    /// @param insuranceFundFee total liquidaiton fee paid to the insurance fund (can be negative in case the account is not enough to cover the fee)\\n    event LiquidateTokenPosition(\\n        uint256 accountNo,\\n        uint256 liquidatorAccountNo,\\n        IVToken vToken,\\n        uint16 liquidationBps,\\n        uint256 liquidationPriceX128,\\n        uint256 liquidatorPriceX128,\\n        int256 insuranceFundFee\\n    );\\n\\n    /// @notice checks if 'account' is initialized\\n    /// @param account pointer to 'account' struct\\n    function isInitialized(UserInfo storage account) internal view returns (bool) {\\n        return account.owner != address(0);\\n    }\\n\\n    /// @notice updates the base balance for 'account' by 'amount'\\n    /// @param account pointer to 'account' struct\\n    /// @param amount amount of balance to update\\n    /// @param protocol platform constants\\n    function updateBaseBalance(\\n        UserInfo storage account,\\n        int256 amount,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (IClearingHouse.BalanceAdjustments memory balanceAdjustments) {\\n        balanceAdjustments = IClearingHouse.BalanceAdjustments(amount, 0, 0);\\n        account.tokenPositions.update(balanceAdjustments, IVToken(address(protocol.vBase)), protocol);\\n    }\\n\\n    /// @notice increases deposit balance of 'vToken' by 'amount'\\n    /// @param account account to deposit balance into\\n    /// @param realTokenAddress address of token to deposit\\n    /// @param amount amount of token to deposit\\n    function addMargin(\\n        UserInfo storage account,\\n        address realTokenAddress,\\n        uint256 amount\\n    ) external {\\n        // vBASE should be an immutable constant\\n        account.tokenDeposits.increaseBalance(realTokenAddress, amount);\\n    }\\n\\n    /// @notice reduces deposit balance of 'vToken' by 'amount'\\n    /// @param account account to deposit balance into\\n    /// @param realTokenAddress address of token to remove\\n    /// @param amount amount of token to remove\\n    /// @param protocol set of all constants and token addresses\\n    function removeMargin(\\n        UserInfo storage account,\\n        address realTokenAddress,\\n        uint256 amount,\\n        Account.ProtocolInfo storage protocol\\n    ) external {\\n        account.tokenDeposits.decreaseBalance(realTokenAddress, amount);\\n\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice removes 'amount' of profit generated in base token\\n    /// @param account account to remove profit from\\n    /// @param amount amount of profit(base token) to remove\\n    /// @param protocol set of all constants and token addresses\\n    function removeProfit(\\n        UserInfo storage account,\\n        uint256 amount,\\n        Account.ProtocolInfo storage protocol\\n    ) external {\\n        account.updateBaseBalance(-int256(amount), protocol);\\n\\n        account.checkIfProfitAvailable(protocol);\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice returns market value and required margin for the account based on current market conditions\\n    /// @dev (In case requiredMargin < minRequiredMargin then requiredMargin = minRequiredMargin)\\n    /// @param account account to check\\n    /// @param isInitialMargin true to use initial margin factor and false to use maintainance margin factor for calcualtion of required margin\\n    /// @param protocol set of all constants and token addresses\\n    /// @return accountMarketValue total market value of all the positions (token ) and deposits\\n    /// @return totalRequiredMargin total margin required to keep the account above selected margin requirement (intial/maintainance)\\n    function getAccountValueAndRequiredMargin(\\n        UserInfo storage account,\\n        bool isInitialMargin,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 accountMarketValue, int256 totalRequiredMargin) {\\n        accountMarketValue = account.getAccountValue(protocol);\\n\\n        totalRequiredMargin = account.tokenPositions.getRequiredMargin(isInitialMargin, protocol.vTokens, protocol);\\n        if (!account.tokenPositions.isEmpty()) {\\n            totalRequiredMargin = totalRequiredMargin < int256(protocol.minRequiredMargin)\\n                ? int256(protocol.minRequiredMargin)\\n                : totalRequiredMargin;\\n        }\\n        return (accountMarketValue, totalRequiredMargin);\\n    }\\n\\n    /// @notice returns market value for the account based on current market conditions\\n    /// @param account account to check\\n    /// @param protocol set of all constants and token addresses\\n    /// @return accountMarketValue total market value of all the positions (token ) and deposits\\n    function getAccountValue(UserInfo storage account, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256 accountMarketValue)\\n    {\\n        accountMarketValue = account.tokenPositions.getAccountMarketValue(protocol.vTokens, protocol);\\n        accountMarketValue += account.tokenDeposits.getAllDepositAccountMarketValue(protocol);\\n        return (accountMarketValue);\\n    }\\n\\n    /// @notice checks if market value > required margin else revert with InvalidTransactionNotEnoughMargin\\n    /// @param account account to check\\n    /// @param isInitialMargin true to use initialMarginFactor and false to use maintainance margin factor for calcualtion of required margin\\n    /// @param protocol set of all constants and token addresses\\n    function checkIfMarginAvailable(\\n        UserInfo storage account,\\n        bool isInitialMargin,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view {\\n        (int256 accountMarketValue, int256 totalRequiredMargin) = account.getAccountValueAndRequiredMargin(\\n            isInitialMargin,\\n            protocol\\n        );\\n        if (accountMarketValue < totalRequiredMargin)\\n            revert InvalidTransactionNotEnoughMargin(accountMarketValue, totalRequiredMargin);\\n    }\\n\\n    /// @notice checks if profit is available to withdraw base token (token value of all positions > 0) else revert with InvalidTransactionNotEnoughProfit\\n    /// @param account account to check\\n    /// @param protocol set of all constants and token addresses\\n    function checkIfProfitAvailable(UserInfo storage account, Account.ProtocolInfo storage protocol) internal view {\\n        int256 totalPositionValue = account.tokenPositions.getAccountMarketValue(protocol.vTokens, protocol);\\n        if (totalPositionValue < 0) revert InvalidTransactionNotEnoughProfit(totalPositionValue);\\n    }\\n\\n    /// @notice swaps 'vToken' of token amount equal to 'swapParams.amount'\\n    /// @notice if vTokenAmount>0 then the swap is a long or close short and if vTokenAmount<0 then swap is a short or close long\\n    /// @notice isNotional specifies whether the amount represents token amount (false) or base amount(true)\\n    /// @notice isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\\n    /// @notice sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\\n    /// @param account account to swap tokens for\\n    /// @param vToken address of the token to swap\\n    /// @param swapParams parameters for the swap (Includes - amount, sqrtPriceLimit, isNotional, isPartialAllowed)\\n    /// @param protocol set of all constants and token addresses\\n    function swapToken(\\n        UserInfo storage account,\\n        IVToken vToken,\\n        IClearingHouse.SwapParams memory swapParams,\\n        Account.ProtocolInfo storage protocol\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        // make a swap. vBaseIn and vTokenAmountOut (in and out wrt uniswap).\\n        // mints erc20 tokens in callback and send to the pool\\n        (vTokenAmountOut, vBaseAmountOut) = account.tokenPositions.swapToken(vToken, swapParams, protocol);\\n\\n        // after all the stuff, account should be above water\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice changes range liquidity 'vToken' of market value equal to 'vTokenNotional'\\n    /// @notice if 'liquidityDelta'>0 then liquidity is added and if 'liquidityChange'<0 then liquidity is removed\\n    /// @notice the liquidity change is reverted if the sqrt price at the time of execution is beyond 'slippageToleranceBps' of 'sqrtPriceCurrent' supplied\\n    /// @notice whenever liquidity change is done the internal token position is taken out. If 'closeTokenPosition' is true this is swapped out else it is added to the current token position\\n    /// @param account account to change liquidity\\n    /// @param vToken address of token to swap\\n    /// @param liquidityChangeParams parameters including lower tick, upper tick, liquidity delta, sqrtPriceCurrent, slippageToleranceBps, closeTokenPosition, limit order type\\n    /// @param protocol set of all constants and token addresses\\n    function liquidityChange(\\n        UserInfo storage account,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        Account.ProtocolInfo storage protocol\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        // mint/burn tokens + fee + funding payment\\n        (vTokenAmountOut, vBaseAmountOut) = account.tokenPositions.liquidityChange(\\n            vToken,\\n            liquidityChangeParams,\\n            protocol\\n        );\\n\\n        // after all the stuff, account should be above water\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice computes keeper fee and insurance fund fee in case of liquidity position liquidation\\n    /// @dev keeperFee = liquidationFee*(1-insuranceFundFeeShare)+fixFee\\n    /// @dev insuranceFundFee = accountMarketValue - keeperFee (if accountMarketValue is not enough to cover the fees) else insurancFundFee = liquidationFee - keeperFee + fixFee\\n    /// @param accountMarketValue market value of account\\n    /// @param liquidationFee total liquidation fee to be charged to the account in case of an on time liquidation\\n    /// @param liquidationParams parameters including fixFee, insuranceFundFeeShareBps\\n    /// @return keeperFee map of vTokens allowed on the platform\\n    /// @return insuranceFundFee poolwrapper for token\\n    function computeLiquidationFees(\\n        int256 accountMarketValue,\\n        int256 liquidationFee,\\n        uint256 fixFee,\\n        LiquidationParams memory liquidationParams\\n    ) internal pure returns (int256 keeperFee, int256 insuranceFundFee) {\\n        int256 fixFeeInt = int256(fixFee);\\n        keeperFee = liquidationFee.mulDiv(1e4 - liquidationParams.insuranceFundFeeShareBps, 1e4) + fixFeeInt;\\n        if (accountMarketValue - fixFeeInt - liquidationFee < 0) {\\n            insuranceFundFee = accountMarketValue - keeperFee;\\n        } else {\\n            insuranceFundFee = liquidationFee - keeperFee + fixFeeInt;\\n        }\\n    }\\n\\n    /// @notice liquidates all range positions in case the account is under water\\n    /// @notice charges a liquidation fee to the account and pays partially to the insurance fund and rest to the keeper.\\n    /// @dev insurance fund covers the remaining fee if the account market value is not enough\\n    /// @param account account to liquidate\\n    /// @param protocol set of all constants and token addresses\\n    function liquidateLiquidityPositions(\\n        UserInfo storage account,\\n        uint256 fixFee,\\n        Account.ProtocolInfo storage protocol\\n    ) external returns (int256 keeperFee, int256 insuranceFundFee) {\\n        // check basis maintanace margin\\n        int256 accountMarketValue;\\n        int256 totalRequiredMargin;\\n        int256 notionalAmountClosed;\\n\\n        (accountMarketValue, totalRequiredMargin) = account.getAccountValueAndRequiredMargin(false, protocol);\\n        if (accountMarketValue > totalRequiredMargin) {\\n            revert InvalidLiquidationAccountAbovewater(accountMarketValue, totalRequiredMargin);\\n        }\\n        notionalAmountClosed = account.tokenPositions.liquidateLiquidityPositions(protocol.vTokens, protocol);\\n\\n        int256 liquidationFee = notionalAmountClosed.mulDiv(protocol.liquidationParams.liquidationFeeFraction, 1e5);\\n        (keeperFee, insuranceFundFee) = computeLiquidationFees(\\n            accountMarketValue,\\n            liquidationFee,\\n            fixFee,\\n            protocol.liquidationParams\\n        );\\n\\n        account.updateBaseBalance(-(keeperFee + insuranceFundFee), protocol);\\n    }\\n\\n    /// @notice computes the liquidation & liquidator price and insurance fund fee for token liquidation\\n    /// @param tokensToTrade account to liquidate\\n    /// @param vToken map of vTokens allowed on the platform\\n    /// @param protocol set of all constants and token addresses\\n    function getLiquidationPriceX128AndFee(\\n        int256 tokensToTrade,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 liquidationPriceX128,\\n            uint256 liquidatorPriceX128,\\n            int256 insuranceFundFee\\n        )\\n    {\\n        uint16 maintainanceMarginFactor = vToken.getMarginRatio(false, protocol);\\n        uint256 priceX128 = vToken.getVirtualCurrentPriceX128(protocol);\\n        uint256 priceDeltaX128 = priceX128.mulDiv(protocol.liquidationParams.tokenLiquidationPriceDeltaBps, 1e4).mulDiv(\\n            maintainanceMarginFactor,\\n            1e5\\n        );\\n        if (tokensToTrade < 0) {\\n            liquidationPriceX128 = priceX128 - priceDeltaX128;\\n            liquidatorPriceX128 =\\n                priceX128 -\\n                priceDeltaX128.mulDiv(1e4 - protocol.liquidationParams.insuranceFundFeeShareBps, 1e4);\\n            insuranceFundFee = -tokensToTrade.mulDiv(liquidatorPriceX128 - liquidationPriceX128, FixedPoint128.Q128);\\n        } else {\\n            liquidationPriceX128 = priceX128 + priceDeltaX128;\\n            liquidatorPriceX128 =\\n                priceX128 +\\n                priceDeltaX128.mulDiv(1e4 - protocol.liquidationParams.insuranceFundFeeShareBps, 1e4);\\n            insuranceFundFee = tokensToTrade.mulDiv(liquidationPriceX128 - liquidatorPriceX128, FixedPoint128.Q128);\\n        }\\n    }\\n\\n    /// @notice exchanges token position between account (at liquidationPrice) and liquidator account (at liquidator price)\\n    /// @notice also charges fixFee from the account and pays to liquidator\\n    /// @param account is account being liquidated\\n    /// @param liquidatorAccount is account of liquidator\\n    /// @param vToken map of vTokens allowed on the platform\\n    /// @param tokensToTrade number of tokens to trade\\n    /// @param liquidationPriceX128 price at which tokens should be traded out\\n    /// @param liquidatorPriceX128 discounted price at which tokens should be given to liquidator\\n    /// @param fixFee is the fee to be given to liquidator to compensate for gas price\\n    /// @param protocol platform constants\\n    function updateLiquidationAccounts(\\n        UserInfo storage account,\\n        UserInfo storage liquidatorAccount,\\n        IVToken vToken,\\n        int256 tokensToTrade,\\n        uint256 liquidationPriceX128,\\n        uint256 liquidatorPriceX128,\\n        int256 fixFee,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (IClearingHouse.BalanceAdjustments memory liquidatorBalanceAdjustments) {\\n        vToken.vPoolWrapper(protocol).updateGlobalFundingState();\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments = IClearingHouse.BalanceAdjustments({\\n            vBaseIncrease: -tokensToTrade.mulDiv(liquidationPriceX128, FixedPoint128.Q128) - fixFee,\\n            vTokenIncrease: tokensToTrade,\\n            traderPositionIncrease: tokensToTrade\\n        });\\n\\n        account.tokenPositions.update(balanceAdjustments, vToken, protocol);\\n        emit Account.TokenPositionChange(\\n            account.tokenPositions.accountNo,\\n            vToken,\\n            balanceAdjustments.vTokenIncrease,\\n            balanceAdjustments.vBaseIncrease\\n        );\\n\\n        balanceAdjustments = IClearingHouse.BalanceAdjustments({\\n            vBaseIncrease: tokensToTrade.mulDiv(liquidatorPriceX128, FixedPoint128.Q128) + fixFee,\\n            vTokenIncrease: -tokensToTrade,\\n            traderPositionIncrease: -tokensToTrade\\n        });\\n\\n        liquidatorAccount.tokenPositions.update(balanceAdjustments, vToken, protocol);\\n        emit Account.TokenPositionChange(\\n            liquidatorAccount.tokenPositions.accountNo,\\n            vToken,\\n            balanceAdjustments.vTokenIncrease,\\n            balanceAdjustments.vBaseIncrease\\n        );\\n\\n        return balanceAdjustments;\\n    }\\n\\n    /// @notice liquidates all range positions in case the account is under water\\n    /// @param account account to liquidate\\n    /// @param vToken address of token to swap\\n    /// @param protocol set of all constants and token addresses\\n    function liquidateTokenPosition(\\n        UserInfo storage account,\\n        UserInfo storage liquidatorAccount,\\n        uint16 liquidationBps,\\n        IVToken vToken,\\n        uint256 fixFee,\\n        Account.ProtocolInfo storage protocol\\n    )\\n        external\\n        returns (int256 insuranceFundFee, IClearingHouse.BalanceAdjustments memory liquidatorBalanceAdjustments)\\n    {\\n        if (account.tokenPositions.getIsTokenRangeActive(vToken, protocol))\\n            revert InvalidLiquidationActiveRangePresent(vToken);\\n\\n        {\\n            (int256 accountMarketValue, int256 totalRequiredMargin) = account.getAccountValueAndRequiredMargin(\\n                false,\\n                protocol\\n            );\\n\\n            if (accountMarketValue > totalRequiredMargin) {\\n                revert InvalidLiquidationAccountAbovewater(accountMarketValue, totalRequiredMargin);\\n            }\\n        }\\n\\n        int256 tokensToTrade;\\n        {\\n            VTokenPosition.Position storage vTokenPosition = account.tokenPositions.getTokenPosition(\\n                vToken,\\n                false,\\n                protocol\\n            );\\n            tokensToTrade = -vTokenPosition.balance.mulDiv(liquidationBps, 1e4);\\n        }\\n\\n        uint256 liquidationPriceX128;\\n        uint256 liquidatorPriceX128;\\n        {\\n            (liquidationPriceX128, liquidatorPriceX128, insuranceFundFee) = getLiquidationPriceX128AndFee(\\n                tokensToTrade,\\n                vToken,\\n                protocol\\n            );\\n\\n            liquidatorBalanceAdjustments = updateLiquidationAccounts(\\n                account,\\n                liquidatorAccount,\\n                vToken,\\n                tokensToTrade,\\n                liquidationPriceX128,\\n                liquidatorPriceX128,\\n                int256(fixFee),\\n                protocol\\n            );\\n        }\\n        {\\n            int256 accountMarketValueFinal = account.getAccountValue(protocol);\\n\\n            if (accountMarketValueFinal < 0) {\\n                insuranceFundFee = accountMarketValueFinal;\\n                account.updateBaseBalance(-accountMarketValueFinal, protocol);\\n            }\\n        }\\n\\n        liquidatorAccount.checkIfMarginAvailable(false, protocol);\\n        emit Account.LiquidateTokenPosition(\\n            account.tokenPositions.accountNo,\\n            liquidatorAccount.tokenPositions.accountNo,\\n            vToken,\\n            liquidationBps,\\n            liquidationPriceX128,\\n            liquidatorPriceX128,\\n            insuranceFundFee\\n        );\\n    }\\n\\n    /// @notice removes limit order based on the current price position (keeper call)\\n    /// @param account account to liquidate\\n    /// @param vToken address of token for the range\\n    /// @param tickLower lower tick index for the range\\n    /// @param tickUpper upper tick index for the range\\n    /// @param protocol platform constants\\n    function removeLimitOrder(\\n        UserInfo storage account,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 limitOrderFeeAndFixFee,\\n        Account.ProtocolInfo storage protocol\\n    ) external {\\n        account.tokenPositions.removeLimitOrder(vToken, tickLower, tickUpper, protocol);\\n\\n        account.updateBaseBalance(-int256(limitOrderFeeAndFixFee), protocol);\\n    }\\n}\\n\",\"keccak256\":\"0x2273227533e5fdb58c7c54319b10185b4fcdbda35409e68c1efbe10c0250d4ed\",\"license\":\"UNLICENSED\"},\"contracts/libraries/DepositTokenSet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { RTokenLib } from './RTokenLib.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { Uint32L8ArrayLib } from './Uint32L8Array.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary DepositTokenSet {\\n    using RTokenLib for RTokenLib.RToken;\\n    using RTokenLib for address;\\n    using Uint32L8ArrayLib for uint32[8];\\n    using SignedFullMath for int256;\\n\\n    struct Info {\\n        // fixed length array of truncate(tokenAddress)\\n        // open positions in 8 different pairs at same time.\\n        // single per pool because it's fungible, allows for having\\n        uint32[8] active;\\n        mapping(uint32 => uint256) deposits;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    // add overrides that accept vToken or truncated\\n    function increaseBalance(\\n        Info storage info,\\n        address realTokenAddress,\\n        uint256 amount\\n    ) internal {\\n        uint32 truncated = realTokenAddress.truncate();\\n\\n        // consider vbase as always active because it is base (actives are needed for margin check)\\n        info.active.include(truncated);\\n\\n        info.deposits[realTokenAddress.truncate()] += amount;\\n    }\\n\\n    function decreaseBalance(\\n        Info storage info,\\n        address realTokenAddress,\\n        uint256 amount\\n    ) internal {\\n        uint32 truncated = realTokenAddress.truncate();\\n\\n        require(info.deposits[truncated] >= amount);\\n        info.deposits[truncated] -= amount;\\n\\n        if (info.deposits[truncated] == 0) {\\n            info.active.exclude(truncated);\\n        }\\n    }\\n\\n    function getAllDepositAccountMarketValue(Info storage set, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 accountMarketValue;\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n\\n            if (truncated == 0) break;\\n            RTokenLib.RToken storage token = protocol.rTokens[truncated];\\n\\n            accountMarketValue += int256(set.deposits[truncated]).mulDiv(\\n                token.getRealTwapPriceX128(),\\n                FixedPoint128.Q128\\n            );\\n        }\\n        return accountMarketValue;\\n    }\\n\\n    function getView(Info storage set, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (IClearingHouse.DepositTokenView[] memory depositTokens)\\n    {\\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\\n        depositTokens = new IClearingHouse.DepositTokenView[](numberOfTokenPositions);\\n\\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\\n            depositTokens[i].rTokenAddress = address(protocol.rTokens[set.active[i]].tokenAddress);\\n            depositTokens[i].balance = set.deposits[set.active[i]];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3540ad7824b5843882838ea70648ae0b835532047a3e6dba341223aafd25a93\",\"license\":\"UNLICENSED\"},\"contracts/libraries/FundingPayment.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @notice Funding Payment Logic used to distribute the FP bill paid by traders among the LPs in the liquidity range\\nlibrary FundingPayment {\\n    using FullMath for uint256;\\n    using SignedFullMath for int256;\\n\\n    struct Info {\\n        // FR * P * dt\\n        int256 sumAX128;\\n        // trade token amount / liqidity\\n        int256 sumBX128;\\n        // sum(a * sumB)\\n        int256 sumFpX128;\\n        // time when state was last updated\\n        uint48 timestampLast;\\n    }\\n\\n    function update(\\n        Info storage info,\\n        int256 tokenAmount,\\n        uint256 liquidity,\\n        uint48 blockTimestamp,\\n        uint256 realPriceX128,\\n        uint256 virtualPriceX128\\n    ) internal {\\n        int256 a = nextAX128(info.timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\\n        info.sumFpX128 += a.mulDivRoundingDown(info.sumBX128, int256(FixedPoint128.Q128));\\n        info.sumAX128 += a;\\n        info.sumBX128 += tokenAmount.mulDiv(int256(FixedPoint128.Q128), int256(liquidity));\\n        info.timestampLast = blockTimestamp;\\n    }\\n\\n    /// @notice Positive A value means at this duration, longs pay shorts. Negative means shorts pay longs.\\n    /// @param timestampLast start timestamp of duration\\n    /// @param blockTimestamp end timestamp of duration\\n    /// @param realPriceX128 spot price of token, used to calculate funding rate\\n    /// @param virtualPriceX128 futures price of token, used to calculate funding rate\\n    /// @return aX128 value called \\\"a\\\" (see funding payment math documentation)\\n    function nextAX128(\\n        uint48 timestampLast,\\n        uint48 blockTimestamp,\\n        uint256 realPriceX128,\\n        uint256 virtualPriceX128\\n    ) internal pure returns (int256 aX128) {\\n        return\\n            (int256(realPriceX128) - int256(virtualPriceX128)).mulDiv(virtualPriceX128, realPriceX128).mulDiv(\\n                blockTimestamp - timestampLast,\\n                1 days\\n            );\\n    }\\n\\n    function extrapolatedSumAX128(\\n        int256 sumAX128,\\n        uint48 timestampLast,\\n        uint48 blockTimestamp,\\n        uint256 realPriceX128,\\n        uint256 virtualPriceX128\\n    ) internal pure returns (int256) {\\n        return sumAX128 + nextAX128(timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\\n    }\\n\\n    /// @notice Extrapolates (updates) the value of sumFp by adding the missing component to it using sumAGlobalX128\\n    /// @param sumAX128 sumA value that is recorded from global at some point in time\\n    /// @param sumBX128 sumB value that is recorded from global at same point in time as sumA\\n    /// @param sumFpX128 sumFp value that is recorded from global at same point in time as sumA and sumB\\n    /// @param sumAGlobalX128 latest sumA value (taken from global), used to extrapolate the sumFp\\n    function extrapolatedSumFpX128(\\n        int256 sumAX128,\\n        int256 sumBX128,\\n        int256 sumFpX128,\\n        int256 sumAGlobalX128\\n    ) internal pure returns (int256) {\\n        return sumFpX128 + sumBX128.mulDiv(sumAGlobalX128 - sumAX128, int256(FixedPoint128.Q128));\\n    }\\n\\n    /// @notice Positive bill is rewarded to LPs, Negative bill is charged from LPs\\n    /// @param sumAX128 latest value of sumA (to be taken from global state)\\n    /// @param sumFpInsideX128 latest value of sumFp inside range (to be computed using global state + tick state)\\n    /// @param sumAChkptX128 value of sumA when LP updated their liquidity last time\\n    /// @param sumBInsideChkptX128 value of sumB inside range when LP updated their liquidity last time\\n    /// @param sumFpInsideChkptX128 value of sumFp inside range when LP updated their liquidity last time\\n    /// @param liquidity amount of liquidity which was constant for LP in the time duration\\n    function bill(\\n        int256 sumAX128,\\n        int256 sumFpInsideX128,\\n        int256 sumAChkptX128,\\n        int256 sumBInsideChkptX128,\\n        int256 sumFpInsideChkptX128,\\n        uint256 liquidity\\n    ) internal pure returns (int256) {\\n        return\\n            (sumFpInsideX128 -\\n                extrapolatedSumFpX128(sumAChkptX128, sumBInsideChkptX128, sumFpInsideChkptX128, sumAX128))\\n                .mulDivRoundingDown(liquidity, FixedPoint128.Q128);\\n    }\\n\\n    /// @notice Positive bill is rewarded to Traders, Negative bill is charged from Traders\\n    /// @param sumAX128 latest value of sumA (to be taken from global state)\\n    /// @param sumAChkptX128 value of sumA when trader updated their netTraderPosition\\n    /// @param netTraderPosition oken amount which should be constant for time duration since sumAChkptX128 was recorded\\n    function bill(\\n        int256 sumAX128,\\n        int256 sumAChkptX128,\\n        int256 netTraderPosition\\n    ) internal pure returns (int256) {\\n        return netTraderPosition.mulDiv((sumAX128 - sumAChkptX128), int256(FixedPoint128.Q128));\\n    }\\n}\\n\",\"keccak256\":\"0x8193b19a15a29321a828b7a1d1812f9b9480feb83fa880ed774c32255bb8b8ba\",\"license\":\"UNLICENSED\"},\"contracts/libraries/GoodAddressDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { Create2 } from '@openzeppelin/contracts/utils/Create2.sol';\\n\\nlibrary GoodAddressDeployer {\\n    /// @notice Deploys contract at an address such that the function isAddressGood(address) returns true\\n    /// @dev Use of CREATE2 is not to recompute address in future, but just to have the address good\\n    /// @param amount: constructor payable ETH amount\\n    /// @param bytecode: creation bytecode (should include constructor args)\\n    /// @param isAddressGood: boolean function that should return true for good addresses\\n    function deploy(\\n        uint256 amount,\\n        bytes memory bytecode,\\n        function(address) returns (bool) isAddressGood\\n    ) internal returns (address computed) {\\n        return deploy(amount, bytecode, isAddressGood, uint256(blockhash(block.number - 1)));\\n    }\\n\\n    /// @notice Deploys contract at an address such that the function isAddressGood(address) returns true\\n    /// @dev Use of CREATE2 is not to recompute address in future, but just to have the address good\\n    /// @param amount: constructor payable ETH amount\\n    /// @param bytecode: creation bytecode (should include constructor args)\\n    /// @param isAddressGood: boolean function that should return true for good addresses\\n    /// @param salt: initial salt, should be pseudo-randomized so that there won't be more for loop iterations if\\n    ///     state used in isAddressGood is updated after deployment\\n    function deploy(\\n        uint256 amount,\\n        bytes memory bytecode,\\n        function(address) returns (bool) isAddressGood,\\n        uint256 salt\\n    ) internal returns (address computed) {\\n        bytes32 byteCodeHash = keccak256(bytecode);\\n\\n        while (true) {\\n            computed = Create2.computeAddress(bytes32(salt), byteCodeHash);\\n\\n            if (isAddressGood(computed)) {\\n                // we found good address, so stop the for loop and proceed\\n                break;\\n            } else {\\n                // since address is not what we'd like, using a different salt\\n                unchecked {\\n                    salt++;\\n                }\\n            }\\n        }\\n\\n        address deployed = Create2.deploy(amount, bytes32(salt), bytecode);\\n        assert(computed == deployed);\\n    }\\n}\\n\",\"keccak256\":\"0x43a506ef89cfdcfebe374c9229979f92ae9e60fbe62f4b29665c51dc3c802e65\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LiquidityPosition.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { SqrtPriceMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { PriceMath } from './PriceMath.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\\nimport { FundingPayment } from './FundingPayment.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary LiquidityPosition {\\n    using PriceMath for uint160;\\n    using SignedFullMath for int256;\\n    using FullMath for uint256;\\n    using SafeCast for uint256;\\n    using LiquidityPosition for Info;\\n    using VTokenLib for IVToken;\\n    using SignedFullMath for int256;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    struct Info {\\n        //Extra boolean to check if it is limit order and uint to track limit price.\\n        IClearingHouse.LimitOrderType limitOrderType;\\n        // the tick range of the position;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // the liquidity of the position\\n        uint128 liquidity;\\n        int256 vTokenAmountIn;\\n        // funding payment checkpoints\\n        int256 sumALastX128;\\n        int256 sumBInsideLastX128;\\n        int256 sumFpInsideLastX128;\\n        // fee growth inside\\n        uint256 sumFeeInsideLastX128;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    error AlreadyInitialized();\\n    error IneligibleLimitOrderRemoval();\\n\\n    function isInitialized(Info storage info) internal view returns (bool) {\\n        return info.tickLower != 0 || info.tickUpper != 0;\\n    }\\n\\n    function checkValidLimitOrderRemoval(Info storage info, int24 currentTick) internal view {\\n        if (\\n            !((currentTick >= info.tickUpper && info.limitOrderType == IClearingHouse.LimitOrderType.UPPER_LIMIT) ||\\n                (currentTick <= info.tickLower && info.limitOrderType == IClearingHouse.LimitOrderType.LOWER_LIMIT))\\n        ) {\\n            revert IneligibleLimitOrderRemoval();\\n        }\\n    }\\n\\n    function initialize(\\n        Info storage position,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal {\\n        if (position.isInitialized()) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        position.tickLower = tickLower;\\n        position.tickUpper = tickUpper;\\n    }\\n\\n    function liquidityChange(\\n        Info storage position,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        int128 liquidity,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        (\\n            int256 basePrincipal,\\n            int256 vTokenPrincipal,\\n            IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside\\n        ) = wrapper.liquidityChange(position.tickLower, position.tickUpper, liquidity);\\n\\n        position.update(accountNo, vToken, wrapperValuesInside, balanceAdjustments);\\n\\n        balanceAdjustments.vBaseIncrease -= basePrincipal;\\n        balanceAdjustments.vTokenIncrease -= vTokenPrincipal;\\n\\n        emit Account.LiquidityChange(\\n            accountNo,\\n            vToken,\\n            position.tickLower,\\n            position.tickUpper,\\n            liquidity,\\n            position.limitOrderType,\\n            -vTokenPrincipal,\\n            -basePrincipal\\n        );\\n\\n        uint160 sqrtPriceCurrent = wrapper.vPool().sqrtPriceCurrent();\\n        {\\n            (int256 tokenAmountCurrent, ) = position.tokenAmountsInRange(sqrtPriceCurrent);\\n\\n            balanceAdjustments.traderPositionIncrease += tokenAmountCurrent - position.vTokenAmountIn;\\n        }\\n\\n        if (liquidity > 0) {\\n            position.liquidity += uint128(liquidity);\\n            position.vTokenAmountIn = vTokenPrincipal;\\n        } else if (liquidity < 0) {\\n            position.liquidity -= uint128(liquidity * -1);\\n            position.vTokenAmountIn = 0;\\n        }\\n    }\\n\\n    function update(\\n        Info storage position,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        int256 fundingPayment = position.unrealizedFundingPayment(\\n            wrapperValuesInside.sumAX128,\\n            wrapperValuesInside.sumFpInsideX128\\n        );\\n        balanceAdjustments.vBaseIncrease += fundingPayment;\\n\\n        int256 unrealizedLiquidityFee = position.unrealizedFees(wrapperValuesInside.sumFeeInsideX128).toInt256();\\n        balanceAdjustments.vBaseIncrease += unrealizedLiquidityFee;\\n\\n        emit Account.FundingPayment(accountNo, vToken, position.tickLower, position.tickUpper, fundingPayment);\\n        emit Account.LiquidityFee(accountNo, vToken, position.tickLower, position.tickUpper, unrealizedLiquidityFee);\\n        // updating checkpoints\\n        position.sumALastX128 = wrapperValuesInside.sumAX128;\\n        position.sumBInsideLastX128 = wrapperValuesInside.sumBInsideX128;\\n        position.sumFpInsideLastX128 = wrapperValuesInside.sumFpInsideX128;\\n        position.sumFeeInsideLastX128 = wrapperValuesInside.sumFeeInsideX128;\\n    }\\n\\n    function netPosition(Info storage position, IVPoolWrapper wrapper) internal view returns (int256) {\\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = wrapper.getValuesInside(\\n            position.tickLower,\\n            position.tickUpper\\n        );\\n        return position.netPosition(wrapperValuesInside.sumBInsideX128);\\n    }\\n\\n    function netPosition(Info storage position, int256 sumBInsideX128) internal view returns (int256) {\\n        return (sumBInsideX128 - position.sumBInsideLastX128).mulDiv(position.liquidity, FixedPoint128.Q128);\\n    }\\n\\n    // use funding payment lib\\n    function unrealizedFundingPayment(\\n        Info storage position,\\n        int256 sumAX128,\\n        int256 sumFpInsideX128\\n    ) internal view returns (int256 vBaseIncrease) {\\n        vBaseIncrease = -FundingPayment.bill(\\n            sumAX128,\\n            sumFpInsideX128,\\n            position.sumALastX128,\\n            position.sumBInsideLastX128,\\n            position.sumFpInsideLastX128,\\n            position.liquidity\\n        );\\n    }\\n\\n    function unrealizedFees(Info storage position, uint256 sumFeeInsideX128)\\n        internal\\n        view\\n        returns (uint256 vBaseIncrease)\\n    {\\n        vBaseIncrease = (sumFeeInsideX128 - position.sumFeeInsideLastX128).mulDiv(\\n            position.liquidity,\\n            FixedPoint128.Q128\\n        );\\n    }\\n\\n    function maxNetPosition(Info storage position) internal view returns (uint256) {\\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\\n\\n        return SqrtPriceMath.getAmount0Delta(sqrtPriceLowerX96, sqrtPriceUpperX96, position.liquidity, true);\\n    }\\n\\n    function baseValue(\\n        Info storage position,\\n        uint160 sqrtPriceCurrent,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 baseValue_) {\\n        return position.baseValue(sqrtPriceCurrent, vToken.vPoolWrapper(protocol));\\n    }\\n\\n    function tokenAmountsInRange(Info storage position, uint160 sqrtPriceCurrent)\\n        internal\\n        view\\n        returns (int256 vTokenAmount, int256 vBaseAmount)\\n    {\\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\\n\\n        // If price is outside the range, then consider it at the ends\\n        // for calculation of amounts\\n        uint160 sqrtPriceMiddleX96 = sqrtPriceCurrent;\\n        if (sqrtPriceCurrent < sqrtPriceLowerX96) {\\n            sqrtPriceMiddleX96 = sqrtPriceLowerX96;\\n        } else if (sqrtPriceCurrent > sqrtPriceUpperX96) {\\n            sqrtPriceMiddleX96 = sqrtPriceUpperX96;\\n        }\\n\\n        vTokenAmount = SqrtPriceMath\\n            .getAmount0Delta(sqrtPriceMiddleX96, sqrtPriceUpperX96, position.liquidity, false)\\n            .toInt256();\\n        vBaseAmount = SqrtPriceMath\\n            .getAmount1Delta(sqrtPriceLowerX96, sqrtPriceMiddleX96, position.liquidity, false)\\n            .toInt256();\\n    }\\n\\n    function baseValue(\\n        Info storage position,\\n        uint160 sqrtPriceCurrent,\\n        IVPoolWrapper wrapper\\n    ) internal view returns (int256 baseValue_) {\\n        {\\n            (int256 vTokenAmount, int256 vBaseAmount) = position.tokenAmountsInRange(sqrtPriceCurrent);\\n            uint256 priceX128 = sqrtPriceCurrent.toPriceX128();\\n            baseValue_ = vTokenAmount.mulDiv(priceX128, FixedPoint128.Q128) + vBaseAmount;\\n        }\\n        // adding fees\\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = wrapper.getExtrapolatedValuesInside(\\n            position.tickLower,\\n            position.tickUpper\\n        );\\n        baseValue_ += position.unrealizedFees(wrapperValuesInside.sumFeeInsideX128).toInt256();\\n        baseValue_ += position.unrealizedFundingPayment(\\n            wrapperValuesInside.sumAX128,\\n            wrapperValuesInside.sumFpInsideX128\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x86ee3735529365aa5f39b7b4b04a6ac841f9577f79d3a05bc1be34424b46ad06\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LiquidityPositionSet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { Account } from './Account.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { Uint48Lib } from './Uint48.sol';\\nimport { Uint48L5ArrayLib } from './Uint48L5Array.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary LiquidityPositionSet {\\n    using LiquidityPosition for LiquidityPosition.Info;\\n    using LiquidityPositionSet for Info;\\n    using Uint48L5ArrayLib for uint48[5];\\n    using VTokenLib for IVToken;\\n\\n    struct Info {\\n        // multiple per pool because it's non-fungible, allows for 4 billion LP positions lifetime\\n        uint48[5] active;\\n        // concat(tickLow,tickHigh)\\n        mapping(uint48 => LiquidityPosition.Info) positions;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    error IllegalTicks(int24 tickLower, int24 tickUpper);\\n    error DeactivationFailed(int24 tickLower, int24 tickUpper, uint256 liquidity);\\n    error InactiveRange();\\n\\n    function isEmpty(Info storage set) internal view returns (bool) {\\n        return set.active[0] == 0;\\n    }\\n\\n    function isPositionActive(\\n        Info storage set,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (bool) {\\n        return _exists(set.active, tickLower, tickUpper);\\n    }\\n\\n    function baseValue(\\n        Info storage set,\\n        uint160 sqrtPriceCurrent,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 baseValue_) {\\n        baseValue_ = set.baseValue(sqrtPriceCurrent, vToken.vPoolWrapper(protocol));\\n    }\\n\\n    function baseValue(\\n        Info storage set,\\n        uint160 sqrtPriceCurrent,\\n        IVPoolWrapper wrapper // TODO refactor this\\n    ) internal view returns (int256 baseValue_) {\\n        for (uint256 i = 0; i < set.active.length; i++) {\\n            uint48 id = set.active[i];\\n            if (id == 0) break;\\n            baseValue_ += set.positions[id].baseValue(sqrtPriceCurrent, wrapper);\\n        }\\n    }\\n\\n    function maxNetPosition(Info storage set) internal view returns (uint256 risk) {\\n        for (uint256 i = 0; i < set.active.length; i++) {\\n            uint48 id = set.active[i];\\n            risk += set.positions[id].maxNetPosition();\\n        }\\n    }\\n\\n    function getLiquidityPosition(\\n        Info storage set,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal returns (LiquidityPosition.Info storage position) {\\n        if (tickLower > tickUpper) {\\n            revert IllegalTicks(tickLower, tickUpper);\\n        }\\n\\n        uint48 positionId = _include(set.active, tickLower, tickUpper);\\n        position = set.positions[positionId];\\n\\n        if (!position.isInitialized()) revert InactiveRange();\\n        return position;\\n    }\\n\\n    function activate(\\n        Info storage set,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal returns (LiquidityPosition.Info storage position) {\\n        if (tickLower > tickUpper) {\\n            revert IllegalTicks(tickLower, tickUpper);\\n        }\\n\\n        uint48 positionId = _include(set.active, tickLower, tickUpper);\\n        position = set.positions[positionId];\\n\\n        if (!position.isInitialized()) {\\n            position.initialize(tickLower, tickUpper);\\n        }\\n    }\\n\\n    function deactivate(Info storage set, LiquidityPosition.Info storage position) internal {\\n        if (position.liquidity != 0) {\\n            revert DeactivationFailed(position.tickLower, position.tickUpper, position.liquidity);\\n        }\\n\\n        _exclude(set.active, position.tickLower, position.tickUpper);\\n    }\\n\\n    function _include(\\n        uint48[5] storage array,\\n        int24 val1,\\n        int24 val2\\n    ) private returns (uint48 index) {\\n        array.include(index = Uint48Lib.concat(val1, val2));\\n    }\\n\\n    function _exclude(\\n        uint48[5] storage array,\\n        int24 val1,\\n        int24 val2\\n    ) private returns (uint48 index) {\\n        array.exclude(index = Uint48Lib.concat(val1, val2));\\n    }\\n\\n    function _exists(\\n        uint48[5] storage array,\\n        int24 val1,\\n        int24 val2\\n    ) private view returns (bool) {\\n        return array.exists(Uint48Lib.concat(val1, val2));\\n    }\\n\\n    function liquidityChange(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        LiquidityPosition.Info storage position = set.activate(\\n            liquidityChangeParams.tickLower,\\n            liquidityChangeParams.tickUpper\\n        );\\n\\n        position.limitOrderType = liquidityChangeParams.limitOrderType;\\n\\n        set.liquidityChange(\\n            accountNo,\\n            vToken,\\n            position,\\n            liquidityChangeParams.liquidityDelta,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n    }\\n\\n    function liquidityChange(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        LiquidityPosition.Info storage position,\\n        int128 liquidity,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        position.liquidityChange(accountNo, vToken, liquidity, wrapper, balanceAdjustments);\\n\\n        emit Account.LiquidityTokenPositionChange(\\n            accountNo,\\n            vToken,\\n            position.tickLower,\\n            position.tickUpper,\\n            balanceAdjustments.vTokenIncrease\\n        );\\n\\n        if (position.liquidity == 0) {\\n            set.deactivate(position);\\n        }\\n    }\\n\\n    function closeLiquidityPosition(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        LiquidityPosition.Info storage position,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        set.liquidityChange(accountNo, vToken, position, -int128(position.liquidity), wrapper, balanceAdjustments);\\n    }\\n\\n    function removeLimitOrder(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        int24 currentTick,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        LiquidityPosition.Info storage position = set.getLiquidityPosition(tickLower, tickUpper);\\n        position.checkValidLimitOrderRemoval(currentTick);\\n        set.closeLiquidityPosition(accountNo, vToken, position, wrapper, balanceAdjustments);\\n    }\\n\\n    function closeAllLiquidityPositions(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        LiquidityPosition.Info storage position;\\n\\n        while (set.active[0] != 0) {\\n            IClearingHouse.BalanceAdjustments memory balanceAdjustmentsCurrent;\\n\\n            position = set.positions[set.active[0]];\\n\\n            set.closeLiquidityPosition(accountNo, vToken, position, wrapper, balanceAdjustmentsCurrent);\\n\\n            balanceAdjustments.vBaseIncrease += balanceAdjustmentsCurrent.vBaseIncrease;\\n            balanceAdjustments.vTokenIncrease += balanceAdjustmentsCurrent.vTokenIncrease;\\n            balanceAdjustments.traderPositionIncrease += balanceAdjustmentsCurrent.traderPositionIncrease;\\n        }\\n    }\\n\\n    function getView(Info storage set)\\n        internal\\n        view\\n        returns (IClearingHouse.LiquidityPositionView[] memory liquidityPositions)\\n    {\\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\\n        liquidityPositions = new IClearingHouse.LiquidityPositionView[](numberOfTokenPositions);\\n\\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\\n            liquidityPositions[i].limitOrderType = set.positions[set.active[i]].limitOrderType;\\n            liquidityPositions[i].tickLower = set.positions[set.active[i]].tickLower;\\n            liquidityPositions[i].tickUpper = set.positions[set.active[i]].tickUpper;\\n            liquidityPositions[i].liquidity = set.positions[set.active[i]].liquidity;\\n            liquidityPositions[i].vTokenAmountIn = set.positions[set.active[i]].vTokenAmountIn;\\n            liquidityPositions[i].sumALastX128 = set.positions[set.active[i]].sumALastX128;\\n            liquidityPositions[i].sumBInsideLastX128 = set.positions[set.active[i]].sumBInsideLastX128;\\n            liquidityPositions[i].sumFpInsideLastX128 = set.positions[set.active[i]].sumFpInsideLastX128;\\n            liquidityPositions[i].sumFeeInsideLastX128 = set.positions[set.active[i]].sumFeeInsideLastX128;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x25947401aa35fb3e5761be573f078d62d458f577fc2b587d7893f5a83aeb868d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PriceMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nlibrary PriceMath {\\n    using FullMath for uint256;\\n\\n    error IllegalSqrtPrice(uint160 sqrtPriceX96);\\n\\n    function toPriceX128(uint160 sqrtPriceX96) internal pure returns (uint256 priceX128) {\\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\\n            revert IllegalSqrtPrice(sqrtPriceX96);\\n        }\\n\\n        // computing the square\\n        priceX128 = uint256(sqrtPriceX96).mulDiv(sqrtPriceX96, 1 << 64);\\n    }\\n}\\n\",\"keccak256\":\"0xe0765610914b351b6dca8d629cff421b0db56e996d5efcc5a7639ba552bba72a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/RTokenLib.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { Create2 } from '@openzeppelin/contracts/utils/Create2.sol';\\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\\nimport { PriceMath } from './PriceMath.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { IOracle } from '../interfaces/IOracle.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nlibrary RTokenLib {\\n    using RTokenLib for RToken;\\n    using FullMath for uint256;\\n    using PriceMath for uint160;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    struct RToken {\\n        address tokenAddress;\\n        address oracleAddress;\\n        uint32 oracleTimeHorizon;\\n    }\\n\\n    function eq(RToken storage a, RToken storage b) internal view returns (bool) {\\n        return a.tokenAddress == b.tokenAddress;\\n    }\\n\\n    function eq(RToken storage a, address b) internal view returns (bool) {\\n        return a.tokenAddress == b;\\n    }\\n\\n    function truncate(address realTokenAddress) internal pure returns (uint32) {\\n        return uint32(uint160(realTokenAddress));\\n    }\\n\\n    function truncate(RToken storage token) internal view returns (uint32) {\\n        return uint32(uint160(token.tokenAddress));\\n    }\\n\\n    function realToken(RToken storage token) internal view returns (IERC20) {\\n        return IERC20(token.tokenAddress);\\n    }\\n\\n    function oracle(RToken storage token) internal view returns (IOracle) {\\n        return IOracle(token.oracleAddress);\\n    }\\n\\n    function getRealTwapSqrtPriceX96(RToken storage token) internal view returns (uint160 sqrtPriceX96) {\\n        return token.oracle().getTwapSqrtPriceX96(token.oracleTimeHorizon);\\n    }\\n\\n    function getRealTwapPriceX128(RToken storage token) internal view returns (uint256 priceX128) {\\n        return token.getRealTwapSqrtPriceX96().toPriceX128();\\n    }\\n}\\n\",\"keccak256\":\"0x2fa900c7593aa8c4c8abb3b22790af3b8c87f57276561c2fc29818db40b3046a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SignedFullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\nlibrary SignedFullMath {\\n    function mulDiv(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = int256(FullMath.mulDiv(a < 0 ? uint256(-1 * a) : uint256(a), b, denominator));\\n        if (a < 0) {\\n            result = -result;\\n        }\\n    }\\n\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        bool resultPositive = true;\\n        uint256 _a;\\n        uint256 _b;\\n        uint256 _denominator;\\n        if (a < 0) {\\n            resultPositive = !resultPositive;\\n            _a = uint256(-a);\\n        } else {\\n            _a = uint256(a);\\n        }\\n        if (b < 0) {\\n            resultPositive = !resultPositive;\\n            _b = uint256(-b);\\n        } else {\\n            _b = uint256(b);\\n        }\\n        if (denominator < 0) {\\n            resultPositive = !resultPositive;\\n            _denominator = uint256(-1 * denominator);\\n        } else {\\n            _denominator = uint256(denominator);\\n        }\\n        result = int256(FullMath.mulDiv(_a, _b, _denominator));\\n        if (!resultPositive) {\\n            result = -result;\\n        }\\n    }\\n\\n    /// @notice Rounds down towards negative infinity\\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\\n    function mulDivRoundingDown(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (result < 0) {\\n            result += -1;\\n        }\\n    }\\n\\n    /// @notice Rounds down towards negative infinity\\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\\n    function mulDivRoundingDown(\\n        int256 a,\\n        int256 b,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (result < 0) {\\n            result += -1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99cbffc3a3116d9f070c5450619d1b84e5ad3d7d2c264322acb4c9badbd3d633\",\"license\":\"MIT\"},\"contracts/libraries/SignedMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nint256 constant ONE = 1;\\n\\nlibrary SignedMath {\\n    function abs(int256 value) internal pure returns (int256) {\\n        return value > 0 ? value : -value;\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? ONE : -ONE;\\n    }\\n}\\n\",\"keccak256\":\"0x90914230a286ee938c6643e2d03051f3d4b27b1bf6a055c738ec8d08d81ee15d\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Uint32L8Array.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Uint32L8ArrayLib {\\n    using Uint32L8ArrayLib for uint32[8];\\n\\n    error IllegalElement(uint32 element);\\n    error NoSpaceLeftToInsert(uint32 element);\\n\\n    function include(uint32[8] storage array, uint32 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n\\n        uint256 emptyIndex = 8; // max index is 7\\n        for (uint256 i; i < 8; i++) {\\n            if (array[i] == element) {\\n                return;\\n            }\\n            if (emptyIndex == 8 && array[i] == uint32(0)) {\\n                emptyIndex = i;\\n            }\\n        }\\n\\n        if (emptyIndex == 8) {\\n            revert NoSpaceLeftToInsert(element);\\n        }\\n\\n        array[emptyIndex] = element;\\n    }\\n\\n    function exclude(uint32[8] storage array, uint32 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n\\n        uint256 elementIndex = 8;\\n        uint256 i;\\n\\n        for (; i < 8; i++) {\\n            if (array[i] == element) {\\n                elementIndex = i;\\n            }\\n            if (array[i] == 0) {\\n                i = i > 0 ? i - 1 : 0; // last non-zero element\\n                break;\\n            }\\n        }\\n\\n        if (elementIndex != 8) {\\n            if (i == elementIndex) {\\n                array[elementIndex] = 0;\\n            } else {\\n                // move last to element's place and empty lastIndex slot\\n                (array[elementIndex], array[i]) = (array[i], 0);\\n            }\\n        }\\n    }\\n\\n    function indexOf(uint32[8] storage array, uint32 element) internal view returns (uint8) {\\n        for (uint8 i; i < 8; i++) {\\n            if (array[i] == element) {\\n                return i;\\n            }\\n        }\\n        return 255;\\n    }\\n\\n    function exists(uint32[8] storage array, uint32 element) internal view returns (bool) {\\n        return array.indexOf(element) != 255;\\n    }\\n\\n    function numberOfNonZeroElements(uint32[8] storage array) internal view returns (uint256) {\\n        for (uint8 i; i < 8; i++) {\\n            if (array[i] == 0) {\\n                return i;\\n            }\\n        }\\n        return 8;\\n    }\\n}\\n\",\"keccak256\":\"0xf551ffd3c50efb6d6ca85c80f3f5109866de014c78d61c07463b8f7b52fcadac\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Uint48.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Uint48Lib {\\n    function concat(int24 val1, int24 val2) internal pure returns (uint48 concatenated) {\\n        assembly {\\n            // concatenated := add(shl(24, val1), shr(232, shl(232, val2)))\\n            concatenated := add(shl(24, val1), and(val2, 0x000000ffffff))\\n        }\\n    }\\n\\n    function unconcat(uint48 concatenated) internal pure returns (int24 val1, int24 val2) {\\n        assembly {\\n            val2 := concatenated\\n            val1 := shr(24, concatenated)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x075df15cef13d6295c32a49e1b12e4a4eceaee20b1ba6adf941b0459b5d87b4a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Uint48L5Array.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Uint48L5ArrayLib {\\n    using Uint48L5ArrayLib for uint48[5];\\n\\n    error IllegalElement(uint48 element);\\n    error NoSpaceLeftToInsert(uint48 element);\\n\\n    function include(uint48[5] storage array, uint48 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n        uint256 emptyIndex = 5; // max index is 4\\n        for (uint256 i; i < 5; i++) {\\n            if (array[i] == element) {\\n                return;\\n            }\\n            if (emptyIndex == 5 && array[i] == uint48(0)) {\\n                emptyIndex = i;\\n            }\\n        }\\n\\n        if (emptyIndex == 5) {\\n            revert NoSpaceLeftToInsert(element);\\n        }\\n\\n        array[emptyIndex] = element;\\n    }\\n\\n    function exclude(uint48[5] storage array, uint48 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n\\n        uint256 elementIndex = 5;\\n        uint256 i;\\n\\n        for (; i < 5; i++) {\\n            if (array[i] == element) {\\n                elementIndex = i;\\n            }\\n            if (array[i] == 0) {\\n                i = i > 0 ? i - 1 : 0; // last non-zero element\\n                break;\\n            }\\n        }\\n\\n        if (elementIndex != 5) {\\n            if (i == elementIndex) {\\n                array[elementIndex] = 0;\\n            } else {\\n                // move last to element's place and empty lastIndex slot\\n                (array[elementIndex], array[i]) = (array[i], 0);\\n            }\\n        }\\n    }\\n\\n    function indexOf(uint48[5] storage array, uint48 element) internal view returns (uint8) {\\n        for (uint8 i; i < 5; i++) {\\n            if (array[i] == element) {\\n                return i;\\n            }\\n        }\\n        return 255;\\n    }\\n\\n    function exists(uint48[5] storage array, uint48 element) internal view returns (bool) {\\n        return array.indexOf(element) != 255;\\n    }\\n\\n    function numberOfNonZeroElements(uint48[5] storage array) internal view returns (uint256) {\\n        for (uint8 i; i < 5; i++) {\\n            if (array[i] == 0) {\\n                return i;\\n            }\\n        }\\n        return 5;\\n    }\\n}\\n\",\"keccak256\":\"0x269588257651a98a6692949e5c889c0f5ef988db1eca8ab4a63471ebfe7542be\",\"license\":\"UNLICENSED\"},\"contracts/libraries/UniswapV3PoolHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { PriceMath } from './PriceMath.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary UniswapV3PoolHelper {\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n    using PriceMath for uint160;\\n\\n    error IllegalTwapDuration(uint32 period);\\n    error OracleConsultFailed();\\n\\n    function tickCurrent(IUniswapV3Pool v3Pool) internal view returns (int24 tick) {\\n        (, tick, , , , , ) = v3Pool.slot0();\\n    }\\n\\n    function sqrtPriceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint160 sqrtPriceX96) {\\n        int24 tick;\\n        (sqrtPriceX96, tick, , , , , ) = v3Pool.slot0();\\n        // TODO remove this logic\\n        if (sqrtPriceX96 == 0) {\\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\\n        }\\n    }\\n\\n    function priceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint256 priceX128) {\\n        uint160 sqrtPriceX96 = v3Pool.sqrtPriceCurrent();\\n        return sqrtPriceX96.toPriceX128();\\n    }\\n\\n    function twapSqrtPrice(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (uint160 sqrtPriceX96) {\\n        int24 _twapTick = pool.twapTick(twapDuration);\\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_twapTick);\\n    }\\n\\n    function twapTick(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (int24 _twapTick) {\\n        if (twapDuration == 0) {\\n            revert IllegalTwapDuration(0);\\n        }\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = twapDuration;\\n        secondAgos[1] = 0;\\n\\n        // this call will fail if period is bigger than MaxObservationPeriod\\n        try pool.observe(secondAgos) returns (int56[] memory tickCumulatives, uint160[] memory) {\\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n            int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int56(uint56(twapDuration)));\\n\\n            // Always round to negative infinity\\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(twapDuration)) != 0)) {\\n                timeWeightedAverageTick--;\\n            }\\n            return timeWeightedAverageTick;\\n        } catch {\\n            (, _twapTick, , , , , ) = pool.slot0();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35db6aff4753f006576aec26687ccb134aed57ad16149979bb77bcc34ca0dcd2\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VTokenLib.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { PriceMath } from './PriceMath.sol';\\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\\n\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary VTokenLib {\\n    using VTokenLib for IVToken;\\n    using FullMath for uint256;\\n    using PriceMath for uint160;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    function eq(IVToken a, IVToken b) internal pure returns (bool) {\\n        return address(a) == address(b);\\n    }\\n\\n    function eq(IVToken a, address b) internal pure returns (bool) {\\n        return address(a) == b;\\n    }\\n\\n    function truncate(IVToken vToken) internal pure returns (uint32) {\\n        return uint32(uint160(address(vToken)));\\n    }\\n\\n    function iface(IVToken vToken) internal pure returns (IVToken) {\\n        return IVToken(address(vToken));\\n    }\\n\\n    function vPool(IVToken vToken, Account.ProtocolInfo storage protocol) internal view returns (IUniswapV3Pool) {\\n        return protocol.pools[vToken].vPool;\\n    }\\n\\n    function vPoolWrapper(IVToken vToken, Account.ProtocolInfo storage protocol) internal view returns (IVPoolWrapper) {\\n        return protocol.pools[vToken].vPoolWrapper;\\n    }\\n\\n    function getVirtualTwapSqrtPriceX96(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        return protocol.pools[vToken].vPool.twapSqrtPrice(protocol.pools[vToken].settings.twapDuration);\\n    }\\n\\n    function getVirtualCurrentSqrtPriceX96(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        return protocol.pools[vToken].vPool.sqrtPriceCurrent();\\n    }\\n\\n    function getVirtualTwapTick(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int24 tick)\\n    {\\n        return protocol.pools[vToken].vPool.twapTick(protocol.pools[vToken].settings.twapDuration);\\n    }\\n\\n    function getVirtualTwapPriceX128(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint256 priceX128)\\n    {\\n        return vToken.getVirtualTwapSqrtPriceX96(protocol).toPriceX128();\\n    }\\n\\n    function getVirtualCurrentPriceX128(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint256 priceX128)\\n    {\\n        return vToken.getVirtualCurrentSqrtPriceX96(protocol).toPriceX128();\\n    }\\n\\n    function getRealTwapSqrtPriceX96(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        return protocol.pools[vToken].settings.oracle.getTwapSqrtPriceX96(protocol.pools[vToken].settings.twapDuration);\\n    }\\n\\n    function getRealTwapPriceX128(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint256 priceX128)\\n    {\\n        return vToken.getRealTwapSqrtPriceX96(protocol).toPriceX128();\\n    }\\n\\n    function getMarginRatio(\\n        IVToken vToken,\\n        bool isInitialMargin,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (uint16) {\\n        if (isInitialMargin) {\\n            return protocol.pools[vToken].settings.initialMarginRatio;\\n        } else {\\n            return protocol.pools[vToken].settings.maintainanceMarginRatio;\\n        }\\n    }\\n\\n    function getWhitelisted(IVToken vToken, Account.ProtocolInfo storage protocol) internal view returns (bool) {\\n        return protocol.pools[vToken].settings.whitelisted;\\n    }\\n}\\n\",\"keccak256\":\"0xb94e4836b9e9612a08d62efbe5531d31349d580a7c91c2825ebab8d476419c26\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VTokenPosition.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { Account } from './Account.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\nimport { FundingPayment } from './FundingPayment.sol';\\n\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary VTokenPosition {\\n    using VTokenLib for IVToken;\\n    using FullMath for uint256;\\n    using SignedFullMath for int256;\\n    using LiquidityPosition for LiquidityPosition.Info;\\n\\n    enum RISK_SIDE {\\n        LONG,\\n        SHORT\\n    }\\n\\n    struct Position {\\n        int256 balance; // vTokenLong - vTokenShort\\n        int256 netTraderPosition;\\n        int256 sumAX128Ckpt; // later look into cint64\\n        // this is moved from accounts to here because of the in margin available check\\n        // the loop needs to be done over liquidity positions of same token only\\n        LiquidityPositionSet.Info liquidityPositions;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    error AlreadyInitialized();\\n\\n    /// @notice returns the market value of the supplied token position\\n    /// @param position token position\\n    /// @param priceX128 price in fixed point 128\\n    /// @param wrapper pool wrapper corresponding to position\\n    function marketValue(\\n        Position storage position,\\n        uint256 priceX128,\\n        IVPoolWrapper wrapper\\n    ) internal view returns (int256 value) {\\n        value = position.balance.mulDiv(priceX128, FixedPoint128.Q128);\\n        value += unrealizedFundingPayment(position, wrapper);\\n    }\\n\\n    /// @notice returns the market value of the supplied token position\\n    /// @param position token position\\n    /// @param priceX128 price in fixed point 128\\n    /// @param vToken tokenAddress corresponding to the position\\n    /// @param protocol platform constants\\n    function marketValue(\\n        Position storage position,\\n        IVToken vToken,\\n        uint256 priceX128,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 value) {\\n        return marketValue(position, priceX128, vToken.vPoolWrapper(protocol));\\n    }\\n\\n    /// @notice returns the market value of the supplied token position\\n    /// @param position token position\\n    /// @param vToken tokenAddress corresponding to the position\\n    /// @param protocol platform constants\\n    function marketValue(\\n        Position storage position,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256) {\\n        uint256 priceX128 = vToken.getVirtualTwapPriceX128(protocol);\\n        return marketValue(position, vToken, priceX128, protocol);\\n    }\\n\\n    function riskSide(Position storage position) internal view returns (RISK_SIDE) {\\n        return position.balance > 0 ? RISK_SIDE.LONG : RISK_SIDE.SHORT;\\n    }\\n\\n    /// @notice returns the unrealized funding payment for the trader position\\n    /// @param position token position\\n    /// @param wrapper pool wrapper corresponding to position\\n    function unrealizedFundingPayment(Position storage position, IVPoolWrapper wrapper) internal view returns (int256) {\\n        int256 extrapolatedSumAX128 = wrapper.getExtrapolatedSumAX128();\\n        int256 unrealizedFpBill = -FundingPayment.bill(\\n            extrapolatedSumAX128,\\n            position.sumAX128Ckpt,\\n            position.netTraderPosition\\n        );\\n        return unrealizedFpBill;\\n    }\\n\\n    /// @notice returns the unrealized funding payment for the position\\n    /// @param position token position\\n    /// @param vToken tokenAddress corresponding to the position\\n    /// @param protocol platform constants\\n    function unrealizedFundingPayment(\\n        Position storage position,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256) {\\n        return unrealizedFundingPayment(position, vToken.vPoolWrapper(protocol));\\n    }\\n}\\n\",\"keccak256\":\"0xa3c577e5583900fe899121e0491dbf337841dd097706940b283043a81b5ff3a4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VTokenPositionSet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { SignedMath } from './SignedMath.sol';\\nimport { VTokenPosition } from './VTokenPosition.sol';\\nimport { Uint32L8ArrayLib } from './Uint32L8Array.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary VTokenPositionSet {\\n    using Uint32L8ArrayLib for uint32[8];\\n    using VTokenLib for IVToken;\\n    using VTokenPosition for VTokenPosition.Position;\\n    using VTokenPositionSet for Set;\\n    using LiquidityPosition for LiquidityPosition.Info;\\n    using LiquidityPositionSet for LiquidityPositionSet.Info;\\n    using SafeCast for uint256;\\n    using SignedFullMath for int256;\\n    using SignedMath for int256;\\n\\n    error IncorrectUpdate();\\n    error DeactivationFailed(IVToken);\\n    error TokenInactive(IVToken vToken);\\n\\n    /// @notice stores info for VTokenPositionSet\\n    /// @param accountNo serial number of the account this set belongs to\\n    /// @param active list of all active token truncated addresses\\n    /// @param positions mapping from truncated token addresses to VTokenPosition struct for that address\\n    struct Set {\\n        // fixed length array of truncate(tokenAddress)\\n        // open positions in 8 different pairs at same time.\\n        // single per pool because it's fungible, allows for having\\n        uint256 accountNo;\\n        uint32[8] active;\\n        mapping(uint32 => VTokenPosition.Position) positions;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    /// @notice returns true if the set does not have any token position active\\n    /// @param set VTokenPositionSet\\n    /// @return _isEmpty\\n    function isEmpty(Set storage set) internal view returns (bool _isEmpty) {\\n        _isEmpty = set.active[0] == 0;\\n    }\\n\\n    /// @notice returns true if range position is active for 'vToken'\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    /// @return isRangeActive\\n    function getIsTokenRangeActive(\\n        Set storage set,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (bool isRangeActive) {\\n        VTokenPosition.Position storage vTokenPosition = set.getTokenPosition(vToken, false, protocol);\\n        isRangeActive = !vTokenPosition.liquidityPositions.isEmpty();\\n    }\\n\\n    /// @notice returns account market value of active positions\\n    /// @param set VTokenPositionSet\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return accountMarketValue\\n    function getAccountMarketValue(\\n        Set storage set,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 accountMarketValue) {\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n            if (truncated == 0) break;\\n            IVToken vToken = vTokens[truncated];\\n            VTokenPosition.Position storage position = set.positions[truncated];\\n\\n            //Value of token position for current vToken\\n            accountMarketValue += position.marketValue(vToken, protocol);\\n\\n            uint160 sqrtPriceX96 = vToken.getVirtualTwapSqrtPriceX96(protocol);\\n            //Value of all active range position for the current vToken\\n            accountMarketValue += int256(position.liquidityPositions.baseValue(sqrtPriceX96, vToken, protocol));\\n        }\\n\\n        //Value of the base token balance\\n        accountMarketValue += set.positions[IVToken(address(protocol.vBase)).truncate()].balance;\\n    }\\n\\n    /// @notice returns the max of two int256 numbers\\n    /// @param a first number\\n    /// @param b second number\\n    /// @return c  = max of a and b\\n    function max(int256 a, int256 b) internal pure returns (int256 c) {\\n        if (a > b) c = a;\\n        else c = b;\\n    }\\n\\n    /// @notice returns notional value of the given base and token amounts\\n    /// @param vToken address of the token\\n    /// @param vTokenAmount amount of tokens\\n    /// @param vBaseAmount amount of base\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed for the given token and base amounts\\n    function getNotionalValue(\\n        IVToken vToken,\\n        int256 vTokenAmount,\\n        int256 vBaseAmount,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 notionalAmountClosed) {\\n        notionalAmountClosed =\\n            vTokenAmount.abs().mulDiv(vToken.getVirtualTwapPriceX128(protocol), FixedPoint128.Q128) +\\n            vBaseAmount.abs();\\n    }\\n\\n    /// @notice returns the long and short side risk for range positions of a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param isInitialMargin specifies to use initial margin factor (true) or maintainance margin factor (false)\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    /// @return longSideRisk - risk if the token price goes down\\n    /// @return shortSideRisk - risk if the token price goes up\\n    function getLongShortSideRisk(\\n        Set storage set,\\n        bool isInitialMargin,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 longSideRisk, int256 shortSideRisk) {\\n        VTokenPosition.Position storage position = set.positions[vToken.truncate()];\\n\\n        uint256 price = vToken.getVirtualTwapPriceX128(protocol);\\n        uint16 marginRatio = vToken.getMarginRatio(isInitialMargin, protocol);\\n\\n        int256 tokenPosition = position.balance;\\n        int256 liquidityMaxTokenPosition = int256(position.liquidityPositions.maxNetPosition());\\n\\n        longSideRisk = max(tokenPosition + liquidityMaxTokenPosition, 0).mulDiv(price, FixedPoint128.Q128).mulDiv(\\n            marginRatio,\\n            1e5\\n        );\\n\\n        shortSideRisk = max(-tokenPosition, 0).mulDiv(price, FixedPoint128.Q128).mulDiv(marginRatio, 1e5);\\n        return (longSideRisk, shortSideRisk);\\n    }\\n\\n    /// @notice returns the long and short side risk for range positions of a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param isInitialMargin specifies to use initial margin factor (true) or maintainance margin factor (false)\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return requiredMargin - required margin value based on the current active positions\\n    function getRequiredMargin(\\n        Set storage set,\\n        bool isInitialMargin,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 requiredMargin) {\\n        int256 longSideRiskTotal;\\n        int256 shortSideRiskTotal;\\n        int256 longSideRisk;\\n        int256 shortSideRisk;\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            if (set.active[i] == 0) break;\\n            IVToken vToken = vTokens[set.active[i]];\\n            (longSideRisk, shortSideRisk) = set.getLongShortSideRisk(isInitialMargin, vToken, protocol);\\n\\n            if (vToken.getWhitelisted(protocol)) {\\n                longSideRiskTotal += longSideRisk;\\n                shortSideRiskTotal += shortSideRisk;\\n            } else {\\n                requiredMargin += max(longSideRisk, shortSideRisk);\\n            }\\n        }\\n\\n        requiredMargin += max(longSideRiskTotal, shortSideRiskTotal);\\n    }\\n\\n    /// @notice activates token with address 'vToken' if not already active\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    function activate(Set storage set, IVToken vToken) internal {\\n        set.active.include(vToken.truncate());\\n    }\\n\\n    /// @notice deactivates token with address 'vToken'\\n    /// @dev ensures that the balance is 0 and there are not range positions active otherwise throws an error\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    function deactivate(Set storage set, IVToken vToken) internal {\\n        uint32 truncated = vToken.truncate();\\n        if (set.positions[truncated].balance != 0 && !set.positions[truncated].liquidityPositions.isEmpty()) {\\n            revert DeactivationFailed(vToken);\\n        }\\n\\n        set.active.exclude(truncated);\\n    }\\n\\n    /// @notice updates token balance, net trader position and base balance\\n    /// @dev realizes funding payment to base balance if vToken is not for base\\n    /// @dev activates the token if not already active\\n    /// @dev deactivates the token if the balance = 0 and there are no range positions active\\n    /// @dev IMP: ensure that the global states are updated using zeroSwap or directly through some interaction with pool wrapper\\n    /// @param set VTokenPositionSet\\n    /// @param balanceAdjustments platform constants\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    function update(\\n        Set storage set,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        uint32 truncated = vToken.truncate();\\n        if (!vToken.eq(address(protocol.vBase))) {\\n            set.realizeFundingPayment(vToken, protocol);\\n            set.active.include(truncated);\\n        }\\n        VTokenPosition.Position storage _VTokenPosition = set.positions[truncated];\\n        _VTokenPosition.balance += balanceAdjustments.vTokenIncrease;\\n        _VTokenPosition.netTraderPosition += balanceAdjustments.traderPositionIncrease;\\n\\n        VTokenPosition.Position storage _VBasePosition = set.positions[IVToken(address(protocol.vBase)).truncate()];\\n        _VBasePosition.balance += balanceAdjustments.vBaseIncrease;\\n\\n        if (_VTokenPosition.balance == 0 && _VTokenPosition.liquidityPositions.active[0] == 0) {\\n            set.deactivate(vToken);\\n        }\\n    }\\n\\n    /// @notice realizes funding payment to base balance\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    function realizeFundingPayment(\\n        Set storage set,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        set.realizeFundingPayment(vToken, protocol.pools[vToken].vPoolWrapper, protocol);\\n    }\\n\\n    /// @notice realizes funding payment to base balance\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    function realizeFundingPayment(\\n        Set storage set,\\n        IVToken vToken,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        VTokenPosition.Position storage _VTokenPosition = set.positions[vToken.truncate()];\\n        int256 extrapolatedSumAX128 = wrapper.getSumAX128();\\n\\n        VTokenPosition.Position storage _VBasePosition = set.positions[IVToken(address(protocol.vBase)).truncate()];\\n        int256 fundingPayment = _VTokenPosition.unrealizedFundingPayment(wrapper);\\n        _VBasePosition.balance += fundingPayment;\\n\\n        _VTokenPosition.sumAX128Ckpt = extrapolatedSumAX128;\\n\\n        emit Account.FundingPayment(set.accountNo, vToken, 0, 0, fundingPayment);\\n    }\\n\\n    /// @notice get or create token position\\n    /// @dev activates inactive vToken if isCreateNew is true else reverts\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param createNew if 'vToken' is inactive then activates (true) else reverts with TokenInactive(false)\\n    /// @param protocol platform constants\\n    /// @return position - VTokenPosition corresponding to 'vToken'\\n    function getTokenPosition(\\n        Set storage set,\\n        IVToken vToken,\\n        bool createNew,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (VTokenPosition.Position storage position) {\\n        if (!vToken.eq(address(protocol.vBase))) {\\n            if (createNew) {\\n                set.activate(vToken);\\n            } else if (!set.active.exists(vToken.truncate())) {\\n                revert TokenInactive(vToken);\\n            }\\n        }\\n\\n        position = set.positions[vToken.truncate()];\\n    }\\n\\n    /// @notice swaps tokens (Long and Short) with input in token amount / base amount\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param swapParams parameters for swap\\n    /// @param protocol platform constants\\n    /// @return vTokenAmountOut - token amount coming out of pool\\n    /// @return vBaseAmountOut - base amount coming out of pool\\n    function swapToken(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.SwapParams memory swapParams,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        return set.swapToken(vToken, swapParams, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice swaps tokens (Long and Short) with input in token amount\\n    /// @dev activates inactive vToe\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param vTokenAmount amount of the token\\n    /// @param protocol platform constants\\n    /// @return vTokenAmountOut - token amount coming out of pool\\n    /// @return vBaseAmountOut - base amount coming out of pool\\n    function swapTokenAmount(\\n        Set storage set,\\n        IVToken vToken,\\n        int256 vTokenAmount,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        return\\n            set.swapToken(\\n                vToken,\\n                /// @dev 0 means no price limit and false means amount mentioned is token amount\\n                IClearingHouse.SwapParams(vTokenAmount, 0, false, false),\\n                vToken.vPoolWrapper(protocol),\\n                protocol\\n            );\\n    }\\n\\n    /// @notice function to remove an eligible limit order\\n    /// @dev checks whether the current price is on the correct side of the range based on the type of limit order (None, Low, High)\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param tickLower lower tick index for the range\\n    /// @param tickUpper upper tick index for the range\\n    /// @param protocol platform constants\\n    function removeLimitOrder(\\n        Set storage set,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        set.removeLimitOrder(vToken, tickLower, tickUpper, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice function for liquidity add/remove\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param liquidityChangeParams includes tickLower, tickUpper, liquidityDelta, limitOrderType\\n    /// @return vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @return vBaseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    function liquidityChange(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        return set.liquidityChange(vToken, liquidityChangeParams, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice function to liquidate liquidity positions for a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        return set.liquidateLiquidityPositions(vToken, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice function to liquidate all liquidity positions\\n    /// @param set VTokenPositionSet\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n            if (truncated == 0) break;\\n\\n            notionalAmountClosed += set.liquidateLiquidityPositions(vTokens[set.active[i]], protocol);\\n        }\\n    }\\n\\n    /// @notice swaps tokens (Long and Short) with input in token amount / base amount\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param swapParams parameters for swap\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    /// @return vTokenAmountOut - token amount coming out of pool\\n    /// @return vBaseAmountOut - base amount coming out of pool\\n    function swapToken(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.SwapParams memory swapParams,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        (vTokenAmountOut, vBaseAmountOut) = wrapper.swapToken(\\n            swapParams.amount,\\n            swapParams.sqrtPriceLimit,\\n            swapParams.isNotional\\n        );\\n\\n        // change direction basis uniswap to balance increase\\n        vTokenAmountOut = -vTokenAmountOut;\\n        vBaseAmountOut = -vBaseAmountOut;\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments = IClearingHouse.BalanceAdjustments(\\n            vBaseAmountOut,\\n            vTokenAmountOut,\\n            vTokenAmountOut\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n\\n        emit Account.TokenPositionChange(set.accountNo, vToken, vTokenAmountOut, vBaseAmountOut);\\n    }\\n\\n    /// @notice function for liquidity add/remove\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param liquidityChangeParams includes tickLower, tickUpper, liquidityDelta, limitOrderType\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @return vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @return vBaseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    function liquidityChange(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        VTokenPosition.Position storage vTokenPosition = set.getTokenPosition(vToken, true, protocol);\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments;\\n\\n        vTokenPosition.liquidityPositions.liquidityChange(\\n            set.accountNo,\\n            vToken,\\n            liquidityChangeParams,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n\\n        if (liquidityChangeParams.closeTokenPosition) {\\n            set.swapTokenAmount(vToken, -balanceAdjustments.traderPositionIncrease, protocol);\\n        }\\n\\n        return (balanceAdjustments.vTokenIncrease, balanceAdjustments.vBaseIncrease);\\n    }\\n\\n    /// @notice function to remove an eligible limit order\\n    /// @dev checks whether the current price is on the correct side of the range based on the type of limit order (None, Low, High)\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param tickLower lower tick index for the range\\n    /// @param tickUpper upper tick index for the range\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    function removeLimitOrder(\\n        Set storage set,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        VTokenPosition.Position storage vTokenPosition = set.getTokenPosition(vToken, false, protocol);\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments;\\n        int24 currentTick = vToken.getVirtualTwapTick(protocol);\\n\\n        vTokenPosition.liquidityPositions.removeLimitOrder(\\n            set.accountNo,\\n            vToken,\\n            currentTick,\\n            tickLower,\\n            tickUpper,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n    }\\n\\n    /// @notice function to liquidate liquidity positions for a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        IVToken vToken,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments;\\n\\n        set.getTokenPosition(vToken, false, protocol).liquidityPositions.closeAllLiquidityPositions(\\n            set.accountNo,\\n            vToken,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n\\n        return getNotionalValue(vToken, balanceAdjustments.vTokenIncrease, balanceAdjustments.vBaseIncrease, protocol);\\n    }\\n\\n    /// @notice function to liquidate all liquidity positions\\n    /// @param set VTokenPositionSet\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n            if (truncated == 0) break;\\n\\n            notionalAmountClosed += set.liquidateLiquidityPositions(vTokens[set.active[i]], wrapper, protocol);\\n        }\\n    }\\n\\n    function getView(Set storage set, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256 vBaseBalance, IClearingHouse.VTokenPositionView[] memory vTokenPositions)\\n    {\\n        vBaseBalance = set.positions[IVToken(address(protocol.vBase)).truncate()].balance;\\n\\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\\n        vTokenPositions = new IClearingHouse.VTokenPositionView[](numberOfTokenPositions);\\n\\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\\n            vTokenPositions[i].vTokenAddress = address(protocol.vTokens[set.active[i]]);\\n            vTokenPositions[i].balance = set.positions[set.active[i]].balance;\\n            vTokenPositions[i].netTraderPosition = set.positions[set.active[i]].netTraderPosition;\\n            vTokenPositions[i].sumAX128Ckpt = set.positions[set.active[i]].sumAX128Ckpt;\\n            vTokenPositions[i].liquidityPositions = set.positions[set.active[i]].liquidityPositions.getView();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x208d64ef4012df2e73ea32e20b88a6974c5c4fed7bfd1b8106d8b8853c1106b0\",\"license\":\"UNLICENSED\"},\"contracts/oracles/BaseOracle.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IOracle } from '../interfaces/IOracle.sol';\\n\\ncontract BaseOracle is IOracle {\\n    function getTwapSqrtPriceX96(uint32) external pure returns (uint160 sqrtPriceX96) {\\n        sqrtPriceX96 = 1 << 96;\\n    }\\n}\\n\",\"keccak256\":\"0x6d8f48d11310b9a8a68117e1e5f366782eac232a528391b6cd7715824da67235\",\"license\":\"UNLICENSED\"},\"contracts/protocol/RageTradeFactory.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport { ProxyAdmin } from '@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol';\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { IUniswapV3Factory } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Factory.sol';\\n\\nimport { ClearingHouseDeployer, IClearingHouse } from './clearinghouse/ClearingHouseDeployer.sol';\\nimport { InsuranceFundDeployer, IInsuranceFund } from './insurancefund/InsuranceFundDeployer.sol';\\nimport { VToken } from './tokens/VToken.sol';\\nimport { VBaseDeployer, IVBase } from './tokens/VBaseDeployer.sol';\\nimport { VTokenDeployer, IVToken } from './tokens/VTokenDeployer.sol';\\nimport { VPoolWrapperDeployer, IVPoolWrapper } from './wrapper/VPoolWrapperDeployer.sol';\\n\\nimport { IOracle } from '../interfaces/IOracle.sol';\\nimport { VTokenLib } from '../libraries/VTokenLib.sol';\\nimport { BaseOracle } from '../oracles/BaseOracle.sol';\\nimport { Governable } from '../utils/Governable.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\ncontract RageTradeFactory is\\n    Governable,\\n    ClearingHouseDeployer,\\n    InsuranceFundDeployer,\\n    VBaseDeployer,\\n    VPoolWrapperDeployer,\\n    VTokenDeployer\\n{\\n    using VTokenLib for IVToken;\\n\\n    address public immutable UNISWAP_V3_FACTORY_ADDRESS;\\n    uint24 public immutable UNISWAP_V3_DEFAULT_FEE_TIER;\\n    bytes32 public immutable UNISWAP_V3_POOL_BYTE_CODE_HASH;\\n\\n    IVBase public immutable vBase;\\n    IClearingHouse public immutable clearingHouse;\\n    // IInsuranceFund public insuranceFund; // stored in ClearingHouse, replacable from there\\n\\n    event PoolInitlized(IUniswapV3Pool vPool, IVToken vToken, IVPoolWrapper vPoolWrapper);\\n\\n    /// @notice Sets up the protocol by deploying necessary core contracts\\n    /// @dev Need to deploy logic contracts for ClearingHouse, VPoolWrapper, InsuranceFund prior to this\\n    constructor(\\n        address clearingHouseLogicAddress,\\n        address _vPoolWrapperLogicAddress,\\n        address insuranceFundLogicAddress,\\n        IERC20Metadata rBase,\\n        address nativeOracle,\\n        address _UNISWAP_V3_FACTORY_ADDRESS,\\n        uint24 _UNISWAP_V3_DEFAULT_FEE_TIER,\\n        bytes32 _UNISWAP_V3_POOL_BYTE_CODE_HASH\\n    ) VPoolWrapperDeployer(_vPoolWrapperLogicAddress) {\\n        proxyAdmin = _deployProxyAdmin();\\n        proxyAdmin.transferOwnership(msg.sender);\\n\\n        UNISWAP_V3_FACTORY_ADDRESS = _UNISWAP_V3_FACTORY_ADDRESS;\\n        UNISWAP_V3_DEFAULT_FEE_TIER = _UNISWAP_V3_DEFAULT_FEE_TIER;\\n        UNISWAP_V3_POOL_BYTE_CODE_HASH = _UNISWAP_V3_POOL_BYTE_CODE_HASH;\\n\\n        // deploys VBase contract at an address which has most significant nibble as \\\"f\\\"\\n        vBase = _deployVBase(rBase.decimals());\\n\\n        // deploys InsuranceFund proxy\\n        IInsuranceFund insuranceFund = _deployProxyForInsuranceFund(insuranceFundLogicAddress);\\n\\n        // deploys a proxy for ClearingHouse, and initialize it as well\\n        clearingHouse = _deployProxyForClearingHouseAndInitialize(\\n            ClearingHouseDeployer.DeployClearingHouseParams(\\n                clearingHouseLogicAddress,\\n                address(rBase),\\n                address(insuranceFund),\\n                address(vBase),\\n                nativeOracle\\n            )\\n        );\\n        clearingHouse.transferGovernance(msg.sender);\\n        clearingHouse.transferTeamMultisig(msg.sender);\\n\\n        // TODO refactor the code such that registering vBase as a pool is not needed\\n        clearingHouse.registerPool(\\n            address(vBase),\\n            IClearingHouse.RageTradePool(\\n                IUniswapV3Pool(address(0)),\\n                IVPoolWrapper(address(0)),\\n                IClearingHouse.RageTradePoolSettings(0, 0, 60, false, new BaseOracle())\\n            )\\n        );\\n\\n        _initializeInsuranceFund(insuranceFund, rBase, clearingHouse);\\n    }\\n\\n    struct InitializePoolParams {\\n        VTokenDeployer.DeployVTokenParams deployVTokenParams;\\n        IClearingHouse.RageTradePoolSettings rageTradePoolInitialSettings;\\n        uint24 liquidityFeePips;\\n        uint24 protocolFeePips;\\n    }\\n\\n    /// @notice Sets up a new Rage Trade Pool by deploying necessary contracts\\n    /// @dev An already deployed oracle contract address (implementing IOracle) is needed prior to using this\\n    /// @param initializePoolParams parameters for initializing the pool\\n    function initializePool(InitializePoolParams calldata initializePoolParams) external onlyGovernance {\\n        // STEP 1: Deploy the virtual token ERC20, such that it will be token0\\n        IVToken vToken = _deployVToken(initializePoolParams.deployVTokenParams);\\n\\n        // STEP 2: Deploy vPool (token0=vToken, token1=vBase) on actual uniswap\\n        IUniswapV3Pool vPool = _createUniswapV3Pool(vToken);\\n\\n        // STEP 3: Initialize the price on the vPool\\n        vPool.initialize(\\n            initializePoolParams.rageTradePoolInitialSettings.oracle.getTwapSqrtPriceX96(\\n                initializePoolParams.rageTradePoolInitialSettings.twapDuration\\n            )\\n        );\\n\\n        // STEP 4: Deploys a proxy for the wrapper contract for the vPool, and initialize it as well\\n        IVPoolWrapper vPoolWrapper = _deployProxyForVPoolWrapperAndInitialize(\\n            IVPoolWrapper.InitializeVPoolWrapperParams(\\n                clearingHouse,\\n                vToken,\\n                vBase,\\n                vPool,\\n                initializePoolParams.liquidityFeePips,\\n                initializePoolParams.protocolFeePips,\\n                UNISWAP_V3_DEFAULT_FEE_TIER\\n            )\\n        );\\n\\n        // STEP 5: Authorize vPoolWrapper in vToken and vBase, for minting/burning whenever needed\\n        vBase.authorize(address(vPoolWrapper));\\n        vToken.setVPoolWrapper(address(vPoolWrapper));\\n        clearingHouse.registerPool(\\n            address(vToken),\\n            IClearingHouse.RageTradePool(vPool, vPoolWrapper, initializePoolParams.rageTradePoolInitialSettings)\\n        );\\n\\n        emit PoolInitlized(vPool, vToken, vPoolWrapper);\\n    }\\n\\n    function _createUniswapV3Pool(IVToken vToken) internal returns (IUniswapV3Pool) {\\n        return\\n            IUniswapV3Pool(\\n                IUniswapV3Factory(UNISWAP_V3_FACTORY_ADDRESS).createPool(\\n                    address(vBase),\\n                    address(vToken),\\n                    UNISWAP_V3_DEFAULT_FEE_TIER\\n                )\\n            );\\n    }\\n\\n    function _isIVTokenAddressGood(address addr) internal view virtual override returns (bool) {\\n        return\\n            super._isIVTokenAddressGood(addr) &&\\n            (uint160(addr) < uint160(address(vBase))) &&\\n            clearingHouse.isVTokenAddressAvailable(uint32(uint160(addr)));\\n    }\\n}\\n\",\"keccak256\":\"0x4a06542903d795fddf88ce0b708a360de7ed565235f64628e63c2bb021e9bdc4\",\"license\":\"UNLICENSED\"},\"contracts/protocol/clearinghouse/ClearingHouseDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\\n\\nimport { ProxyAdminDeployer } from '../../utils/ProxyAdminDeployer.sol';\\n\\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\\n\\n/// @notice Manages deployment for ClearingHouseProxy\\n/// @dev ClearingHouse proxy is deployed only once\\nabstract contract ClearingHouseDeployer is ProxyAdminDeployer {\\n    struct DeployClearingHouseParams {\\n        address clearingHouseLogicAddress;\\n        address rBaseAddress;\\n        address insuranceFundAddress;\\n        address vBaseAddress;\\n        address nativeOracle;\\n    }\\n\\n    function _deployProxyForClearingHouseAndInitialize(DeployClearingHouseParams memory params)\\n        internal\\n        returns (IClearingHouse)\\n    {\\n        return\\n            IClearingHouse(\\n                address(\\n                    new TransparentUpgradeableProxy(\\n                        params.clearingHouseLogicAddress,\\n                        address(proxyAdmin),\\n                        abi.encodeWithSelector(\\n                            IClearingHouse.__ClearingHouse_init.selector,\\n                            address(this), // RageTradeFactory\\n                            params.rBaseAddress,\\n                            params.insuranceFundAddress,\\n                            params.vBaseAddress,\\n                            params.nativeOracle\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd20b6cb7d2c391914638ac8432d175d5088030cd1d3403c5b98397efab0760be\",\"license\":\"UNLICENSED\"},\"contracts/protocol/insurancefund/InsuranceFundDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\\n\\nimport { ProxyAdminDeployer } from '../../utils/ProxyAdminDeployer.sol';\\n\\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\\n\\nabstract contract InsuranceFundDeployer is ProxyAdminDeployer {\\n    function _deployProxyForInsuranceFund(address insuranceFundLogicAddress) internal returns (IInsuranceFund) {\\n        return\\n            IInsuranceFund(\\n                address(new TransparentUpgradeableProxy(insuranceFundLogicAddress, address(proxyAdmin), hex''))\\n            );\\n    }\\n\\n    function _initializeInsuranceFund(\\n        IInsuranceFund insuranceFund,\\n        IERC20 rBase,\\n        IClearingHouse clearingHouse\\n    ) internal {\\n        insuranceFund.__InsuranceFund_init(rBase, clearingHouse, 'RageTrade iBase', 'iBase');\\n    }\\n}\\n\",\"keccak256\":\"0x52e13381de45ccfaa6db4c9019136f0dae2169b948b425fd8a240aaec27e0e14\",\"license\":\"UNLICENSED\"},\"contracts/protocol/tokens/VBase.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\n// pragma solidity ^0.7.6;\\n\\npragma solidity ^0.8.9;\\n\\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { IVBase } from '../../interfaces/IVBase.sol';\\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\\n\\ncontract VBase is IVBase, ERC20('Rage Trade Virtual Base Token', 'vBase'), Ownable {\\n    mapping(address => bool) public isAuth;\\n\\n    uint8 immutable _decimals;\\n\\n    constructor(uint8 decimals_) {\\n        _decimals = decimals_;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal view override {\\n        // transfer cases:\\n        // - vPoolWrapper mints tokens at uniswap pool address\\n        // - uniswap v3 pool transfers tokens to vPoolWrapper\\n        // - vPoolWrapper burns all tokens it has, at its own address\\n        if (!(from == address(0) || to == address(0) || isAuth[from] || isAuth[to])) {\\n            revert Unauthorised();\\n        }\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function authorize(address vPoolWrapper) external onlyOwner {\\n        isAuth[vPoolWrapper] = true;\\n    }\\n\\n    error Unauthorised();\\n\\n    function mint(address account, uint256 amount) external {\\n        if (!isAuth[msg.sender]) {\\n            revert Unauthorised();\\n        }\\n        _mint(account, amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xbb75d1c357c8ca9a19944472b5ddfe094d0dc18f49c9d5ade9167ba89fd6dc63\",\"license\":\"UNLICENSED\"},\"contracts/protocol/tokens/VBaseDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IVBase } from '../../interfaces/IVBase.sol';\\n\\nimport { GoodAddressDeployer } from '../../libraries/GoodAddressDeployer.sol';\\n\\nimport { VBase } from '../tokens/VBase.sol';\\n\\nabstract contract VBaseDeployer {\\n    function _deployVBase(uint8 rBaseDecimals) internal returns (IVBase vBase) {\\n        return\\n            IVBase(\\n                GoodAddressDeployer.deploy(\\n                    0,\\n                    abi.encodePacked(type(VBase).creationCode, abi.encode(rBaseDecimals)),\\n                    _isVBaseAddressGood\\n                )\\n            );\\n    }\\n\\n    // returns true if most significant hex char of address is \\\"d\\\"\\n    function _isVBaseAddressGood(address addr) private pure returns (bool) {\\n        return (uint160(addr) >> 156) == 0xf;\\n    }\\n}\\n\",\"keccak256\":\"0x7108a2bccec3aaa691b4f3dc49538e57a8bd25a8b314401dfa4b1b330857e8c8\",\"license\":\"UNLICENSED\"},\"contracts/protocol/tokens/VToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\n// pragma solidity ^0.7.6;\\n\\npragma solidity ^0.8.9;\\n\\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport { IVToken } from '../../interfaces/IVToken.sol';\\n\\ncontract VToken is ERC20, IVToken {\\n    address public vPoolWrapper; // TODO change to immutable\\n\\n    uint8 immutable _decimals;\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    constructor(\\n        string memory vTokenName,\\n        string memory vTokenSymbol,\\n        uint8 rTokenDecimals\\n    ) ERC20(vTokenName, vTokenSymbol) {\\n        _decimals = rTokenDecimals;\\n    }\\n\\n    error Unauthorised();\\n\\n    function setVPoolWrapper(address _vPoolWrapper) external {\\n        if (vPoolWrapper == address(0)) {\\n            vPoolWrapper = _vPoolWrapper;\\n        }\\n    }\\n\\n    // TODO bring uniswap vPool address in the logic\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal view override {\\n        // transfer cases:\\n        // - vPoolWrapper mints tokens at uniswap pool address\\n        // - uniswap v3 pool transfers tokens to vPoolWrapper\\n        // - vPoolWrapper burns all tokens it has, at its own address\\n        if (!(from == address(0) || to == address(0) || from == vPoolWrapper || to == vPoolWrapper)) {\\n            revert Unauthorised();\\n        }\\n    }\\n\\n    function mint(address receiver, uint256 amount) external {\\n        if (msg.sender != vPoolWrapper) {\\n            revert Unauthorised();\\n        }\\n        _mint(receiver, amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8b4431765cda32122f265e5efd629ccbdc3fb0631f99fb4577862a68b45e7ba1\",\"license\":\"UNLICENSED\"},\"contracts/protocol/tokens/VTokenDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { Create2 } from '@openzeppelin/contracts/utils/Create2.sol';\\n\\nimport { GoodAddressDeployer } from '../../libraries/GoodAddressDeployer.sol';\\n\\nimport { VToken, IVToken } from './VToken.sol';\\n\\nabstract contract VTokenDeployer {\\n    struct DeployVTokenParams {\\n        string vTokenName;\\n        string vTokenSymbol;\\n        uint8 rTokenDecimals;\\n    }\\n\\n    /// @notice Deploys contract VToken at an address such that the last 4 bytes of contract address is unique\\n    /// @dev Use of CREATE2 is not to recompute address in future, but just to have unique last 4 bytes\\n    /// @param params: parameters used for construction, see above struct\\n    /// @return vToken : the deployed VToken contract\\n    function _deployVToken(DeployVTokenParams calldata params) internal returns (IVToken vToken) {\\n        bytes memory bytecode = abi.encodePacked(\\n            type(VToken).creationCode,\\n            abi.encode(params.vTokenName, params.vTokenSymbol, params.rTokenDecimals)\\n        );\\n\\n        vToken = IVToken(GoodAddressDeployer.deploy(0, bytecode, _isIVTokenAddressGood));\\n    }\\n\\n    // returns true if last 4 bytes are non-zero, also extended to add more conditions in VPoolFactory\\n    function _isIVTokenAddressGood(address addr) internal view virtual returns (bool) {\\n        return uint32(uint160(addr)) != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x4515bc5813bbf7202e8684138b0b82e2c2f4c730c39148d7dad98c3b45b41df2\",\"license\":\"UNLICENSED\"},\"contracts/protocol/wrapper/VPoolWrapperDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\\n\\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\\n\\nimport { Governable } from '../../utils/Governable.sol';\\nimport { ClearingHouseDeployer } from '../clearinghouse/ClearingHouseDeployer.sol';\\n\\nabstract contract VPoolWrapperDeployer is Governable, ClearingHouseDeployer {\\n    address public vPoolWrapperLogicAddress;\\n\\n    error IllegalAddress(address addr);\\n\\n    constructor(address _vPoolWrapperLogicAddress) {\\n        vPoolWrapperLogicAddress = _vPoolWrapperLogicAddress;\\n    }\\n\\n    /// @notice Admin method to set latest implementation logic for VPoolWrapper\\n    /// @param _vPoolWrapperLogicAddress: new logic address\\n    /// @dev When a new vPoolWrapperLogic is deployed, make sure that the initialize method is called.\\n    function setVPoolWrapperLogicAddress(address _vPoolWrapperLogicAddress) external onlyGovernance {\\n        if (_vPoolWrapperLogicAddress == address(0)) {\\n            revert IllegalAddress(address(0));\\n        }\\n\\n        vPoolWrapperLogicAddress = _vPoolWrapperLogicAddress;\\n    }\\n\\n    function _deployProxyForVPoolWrapperAndInitialize(IVPoolWrapper.InitializeVPoolWrapperParams memory params)\\n        internal\\n        returns (IVPoolWrapper vPoolWrapper)\\n    {\\n        return\\n            IVPoolWrapper(\\n                address(\\n                    new TransparentUpgradeableProxy(\\n                        address(vPoolWrapperLogicAddress),\\n                        address(proxyAdmin),\\n                        abi.encodeWithSelector(IVPoolWrapper.__VPoolWrapper_init.selector, params)\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5935bfb5382ee9b2c3fe7ead5433809206b29c105cec06b9d85bec389cd96f82\",\"license\":\"UNLICENSED\"},\"contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { Context } from '@openzeppelin/contracts/utils/Context.sol';\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport { IGovernable } from '../interfaces/IGovernable.sol';\\n\\n/**\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyGovernance` and `onlyGovernanceOrTeamMultisig`, which can be applied to your functions\\n * to restrict their use to the caller.\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address private _governance;\\n    address private _teamMultisig;\\n\\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\\n    event TeamMultisigTransferred(address indexed previousTeamMultisig, address indexed newTeamMultisig);\\n\\n    error Unauthorised();\\n    error ZeroAddress();\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governance and team multisig.\\n     */\\n    constructor() {\\n        __Governable_init();\\n    }\\n\\n    /**\\n     * @dev Useful to proxy contracts for initializing\\n     */\\n    function __Governable_init() internal {\\n        address msgSender = _msgSender();\\n\\n        __Governable_init(msgSender, msgSender);\\n    }\\n\\n    /**\\n     * @dev Useful to proxy contracts for initializing with custom addresses\\n     */\\n    function __Governable_init(address initialGovernance, address initialTeamMultisig) internal initializer {\\n        _governance = initialGovernance;\\n        emit GovernanceTransferred(address(0), initialGovernance);\\n\\n        _teamMultisig = initialTeamMultisig;\\n        emit TeamMultisigTransferred(address(0), initialTeamMultisig);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current governance.\\n     */\\n    function governance() public view virtual returns (address) {\\n        return _governance;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current team multisig.transferTeamMultisig\\n     */\\n    function teamMultisig() public view virtual returns (address) {\\n        return _teamMultisig;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governance.\\n     */\\n    modifier onlyGovernance() {\\n        if (governance() != _msgSender()) revert Unauthorised();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governance or team multisig.\\n     */\\n    modifier onlyGovernanceOrTeamMultisig() {\\n        if (teamMultisig() != _msgSender() && governance() != _msgSender()) revert Unauthorised();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governance to a new account (`newGovernance`).\\n     * Can only be called by the current governance.\\n     */\\n    function transferGovernance(address newGovernance) external virtual onlyGovernance {\\n        if (newGovernance == address(0)) revert ZeroAddress();\\n        emit GovernanceTransferred(_governance, newGovernance);\\n        _governance = newGovernance;\\n    }\\n\\n    /**\\n     * @dev Transfers teamMultisig to a new account (`newTeamMultisig`).\\n     * Can only be called by the current teamMultisig or current governance.\\n     */\\n    function transferTeamMultisig(address newTeamMultisig) external virtual onlyGovernanceOrTeamMultisig {\\n        if (newTeamMultisig == address(0)) revert ZeroAddress();\\n        emit TeamMultisigTransferred(_teamMultisig, newTeamMultisig);\\n        _teamMultisig = newTeamMultisig;\\n    }\\n}\\n\",\"keccak256\":\"0x674f5ef2c3452dbd7b53200a713f123223536002971f65207f47e543dd90983a\",\"license\":\"MIT\"},\"contracts/utils/ProxyAdminDeployer.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { ProxyAdmin } from '@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol';\\n\\nabstract contract ProxyAdminDeployer {\\n    ProxyAdmin public proxyAdmin;\\n\\n    function _deployProxyAdmin() internal returns (ProxyAdmin) {\\n        return new ProxyAdmin();\\n    }\\n}\\n\",\"keccak256\":\"0x4d5942acf1af12813ffbf02898d2d478cd4abc3c847075b9cd047ce0cd9d8bfe\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620066bf380380620066bf833981016040819052620000359162000a96565b86620000406200042a565b600380546001600160a01b0319166001600160a01b03929092169190911790556200006a6200043a565b600280546001600160a01b0319166001600160a01b0392909216918217905560405163f2fde38b60e01b815233600482015263f2fde38b90602401600060405180830381600087803b158015620000c057600080fd5b505af1158015620000d5573d6000803e3d6000fd5b505050506001600160a01b0383811660805262ffffff831660a05260c08290526040805163313ce56760e01b81529051620001649288169163313ce5679160048083019260209291908290030181865afa15801562000138573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015e919062000b52565b6200046d565b6001600160a01b031660e05260006200017d87620004f8565b9050620001e56040518060a001604052808b6001600160a01b03168152602001886001600160a01b03168152602001836001600160a01b0316815260200160e0516001600160a01b03168152602001876001600160a01b03168152506200056560201b60201c565b6001600160a01b03166101008190526040516334e2fffd60e21b815233600482015263d38bfff490602401600060405180830381600087803b1580156200022b57600080fd5b505af115801562000240573d6000803e3d6000fd5b505061010051604051637f64d66360e01b81523360048201526001600160a01b039091169250637f64d6639150602401600060405180830381600087803b1580156200028b57600080fd5b505af1158015620002a0573d6000803e3d6000fd5b50505050610100516001600160a01b0316632a66e9ca60e051604051806060016040528060006001600160a01b0316815260200160006001600160a01b031681526020016040518060a00160405280600061ffff168152602001600061ffff168152602001603c63ffffffff168152602001600015158152602001604051620003299062000a49565b604051809103906000f08015801562000346573d6000803e3d6000fd5b506001600160a01b0390811690915291526040805160e086901b6001600160e01b031916815293821660048501528251821660248501526020808401518316604486015292810151805161ffff908116606487015293810151909316608485015282015163ffffffff1660a48401526060820151151560c48401526080909101511660e482015261010401600060405180830381600087803b158015620003ec57600080fd5b505af115801562000401573d6000803e3d6000fd5b505050506200041b8187610100516200060160201b60201c565b50505050505050505062000c68565b33620004378180620006ae565b50565b60006040516200044a9062000a56565b604051809103906000f08015801562000467573d6000803e3d6000fd5b50905090565b6000620004f2600060405180602001620004879062000a64565b601f1982820381018352601f90910116604081815260ff871660208301520160408051601f1981840301815290829052620004c6929160200162000baa565b6040516020818303038152906040526200080760201b6200096c176200081360201b620009781760201c565b92915050565b60025460405160009183916001600160a01b03909116906200051a9062000a72565b6001600160a01b039283168152911660208201526060604082018190526000908201526080015b604051809103906000f0801580156200055e573d6000803e3d6000fd5b5092915050565b80516002546020808401516040808601516060870151608088015183513060248201526001600160a01b03958616604482015292851660648401529084166084830152831660a4808301919091528251808303909101815260c4909101825292830180516001600160e01b03166398f5c52760e01b1790525160009493919091169190620005f39062000a72565b620005419392919062000bdd565b604051630addda3b60e21b81526001600160a01b038381166004830152828116602483015260806044830152600f60848301526e52616765547261646520694261736560881b60a483015260c06064830152600560c483015264694261736560d81b60e4830152841690632b7768ec9061010401600060405180830381600087803b1580156200069057600080fd5b505af1158015620006a5573d6000803e3d6000fd5b50505050505050565b600054610100900460ff1680620006c8575060005460ff16155b620007315760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801562000754576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b0386169081029190911782556040519091907f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80908290a3600180546001600160a01b0319166001600160a01b0384169081179091556040516000907f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb2908290a3801562000802576000805461ff00191690555b505050565b609c1c600f9081161490565b6000620008308484846200082960014362000c2c565b4062000838565b949350505050565b825160208401206000905b6200085d8360001b82620008cf60201b6200099d1760201c565b91506200086a828560201c565b15620008765762000882565b60019092019162000843565b60006200089f878560001b886200094160201b620009fc1760201c565b9050806001600160a01b0316836001600160a01b031614620008c557620008c562000c52565b5050949350505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091526001600160601b03193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b60008084471015620009965760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604482015260640162000728565b8251620009e65760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604482015260640162000728565b8383516020850187f590506001600160a01b038116620008305760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f7900000000000000604482015260640162000728565b60b48062003e7b83390190565b6107788062003f2f83390190565b61110880620046a783390190565b610f1080620057af83390190565b6001600160a01b03811681146200043757600080fd5b600080600080600080600080610100898b03121562000ab457600080fd5b885162000ac18162000a80565b60208a015190985062000ad48162000a80565b60408a015190975062000ae78162000a80565b60608a015190965062000afa8162000a80565b60808a015190955062000b0d8162000a80565b60a08a015190945062000b208162000a80565b60c08a015190935062ffffff8116811462000b3a57600080fd5b8092505060e089015190509295985092959890939650565b60006020828403121562000b6557600080fd5b815160ff811681146200093a57600080fd5b60005b8381101562000b9457818101518382015260200162000b7a565b8381111562000ba4576000848401525b50505050565b6000835162000bbe81846020880162000b77565b83519083019062000bd481836020880162000b77565b01949350505050565b600060018060a01b03808616835280851660208401525060606040830152825180606084015262000c1681608085016020870162000b77565b601f01601f191691909101608001949350505050565b60008282101562000c4d57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b60805160a05160c05160e0516101005161318962000cf26000396000818160eb015281816105680152818161072e0152610e68015260008181610200015281816105a60152818161066f01528181610bc80152610e11015260006101490152600081816101c3015281816106200152610bf80152600081816102680152610c2601526131896000f3fe60806040523480156200001157600080fd5b5060043610620000e05760003560e01c80639314430e1162000097578063d38bfff4116200006e578063d38bfff41462000239578063dbc0c0851462000250578063e3d11ba01462000262578063fc344099146200028a57600080fd5b80639314430e14620001bd578063c5f1916c14620001fa578063cec38a44146200022257600080fd5b80630af9680014620000e5578063255034a9146200012a5780633ae726d514620001435780633e47158c146200017a5780635aa6e675146200018e5780637f64d66314620001a6575b600080fd5b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620001416200013b36600462000f13565b6200029e565b005b6200016b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200162000121565b6002546200010d906001600160a01b031681565b6000546201000090046001600160a01b03166200010d565b62000141620001b736600462000f13565b62000323565b620001e57f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff909116815260200162000121565b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b620001416200023336600462000f33565b620003f4565b620001416200024a36600462000f13565b620008a8565b6001546001600160a01b03166200010d565b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b6003546200010d906001600160a01b031681565b6000546001600160a01b0362010000909104163314620002d157604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b0381166200030157604051630562997d60e41b8152600060048201526024015b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633148015906200035157506000546001600160a01b0362010000909104163314155b156200037057604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b038116620003985760405163d92e233d60e01b815260040160405180910390fd5b6001546040516001600160a01b038084169216907f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb290600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03620100009091041633146200042757604051636bd1573560e11b815260040160405180910390fd5b60006200043f62000439838062000f72565b62000b04565b905060006200044e8262000bb1565b90506001600160a01b03811663f637731d6200047160c0860160a0870162000f13565b6001600160a01b03166372b6bb3862000491608088016060890162000fad565b6040516001600160e01b031960e084901b16815263ffffffff919091166004820152602401602060405180830381865afa158015620004d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fa919062000fcb565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156200053c57600080fd5b505af115801562000551573d6000803e3d6000fd5b5050505060006200064d6040518060e001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001856001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001846001600160a01b031681526020018660c0016020810190620005f7919062000feb565b62ffffff16815260200162000614610100880160e0890162000feb565b62ffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681525062000c9e565b604051635b52ebef60e11b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b6a5d7de90602401600060405180830381600087803b158015620006b657600080fd5b505af1158015620006cb573d6000803e3d6000fd5b5050604051636bd6da7f60e11b81526001600160a01b0384811660048301528616925063d7adb4fe9150602401600060405180830381600087803b1580156200071357600080fd5b505af115801562000728573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a66e9ca846040518060600160405280866001600160a01b03168152602001856001600160a01b03168152602001886020018036038101906200079b919062001034565b9052604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201528251841660248201526020808401518516604483015292820151805161ffff90811660648401529381015190931660848201529082015163ffffffff1660a48201526060820151151560c482015260809091015190911660e482015261010401600060405180830381600087803b1580156200083d57600080fd5b505af115801562000852573d6000803e3d6000fd5b5050604080516001600160a01b038681168252878116602083015285168183015290517f0d302405a4752eff773a2a9bb91dff79a0571f71ac88bdf8f0572f3c682efd3a9350908190036060019150a150505050565b6000546001600160a01b0362010000909104163314620008db57604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b038116620009035760405163d92e233d60e01b815260040160405180910390fd5b600080546040516001600160a01b03808516936201000090930416917f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce8091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b609c1c600f9081161490565b6000620009958484846200098e600143620010e0565b4062000d7e565b949350505050565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b6000808447101562000a515760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401620002f8565b825162000aa15760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401620002f8565b8383516020850187f590506001600160a01b038116620009955760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401620002f8565b6000806040518060200162000b199062000ede565b601f1982820381018352601f9091011660405262000b38848062001106565b62000b47602087018762001106565b62000b596060890160408a0162001157565b60405160200162000b6f959493929190620011a5565b60408051601f198184030181529082905262000b8f929160200162001219565b6040516020818303038152906040529050620009f560008262000dfc62000978565b60405163a167129560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015282811660248301527f000000000000000000000000000000000000000000000000000000000000000062ffffff1660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a1671295906064016020604051808303816000875af115801562000c72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c98919062000fcb565b92915050565b6003546002546040805184516001600160a01b039081166024830152602080870151821660448401528684015182166064840152606087015182166084840152608087015162ffffff90811660a485015260a0880151811660c485015260c08801511660e480850191909152845180850390910181526101049093018452820180516001600160e01b0316630f5751cd60e31b1790529151600094831693929092169162000d4c9062000eec565b62000d5a939291906200124c565b604051809103906000f08015801562000d77573d6000803e3d6000fd5b5092915050565b825160208401206000905b62000d9583826200099d565b915062000da5828563ffffffff16565b1562000db15762000dbd565b60019092019162000d89565b600062000dcc878588620009fc565b9050806001600160a01b0316836001600160a01b03161462000df25762000df26200129b565b5050949350505050565b600063ffffffff82161515801562000e4557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316105b801562000c985750604051636d62154b60e11b815263ffffffff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dac42a9690602401602060405180830381865afa15801562000eb8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c989190620012b1565b610f9b80620012d283390190565b610f10806200226d83390190565b6001600160a01b038116811462000f1057600080fd5b50565b60006020828403121562000f2657600080fd5b8135620009f58162000efa565b60006020828403121562000f4657600080fd5b813567ffffffffffffffff81111562000f5e57600080fd5b82016101008185031215620009f557600080fd5b60008235605e1983360301811262000f8957600080fd5b9190910192915050565b803563ffffffff8116811462000fa857600080fd5b919050565b60006020828403121562000fc057600080fd5b620009f58262000f93565b60006020828403121562000fde57600080fd5b8151620009f58162000efa565b60006020828403121562000ffe57600080fd5b813562ffffff81168114620009f557600080fd5b803561ffff8116811462000fa857600080fd5b801515811462000f1057600080fd5b600060a082840312156200104757600080fd5b60405160a0810181811067ffffffffffffffff821117156200107957634e487b7160e01b600052604160045260246000fd5b604052620010878362001012565b8152620010976020840162001012565b6020820152620010aa6040840162000f93565b60408201526060830135620010bf8162001025565b60608201526080830135620010d48162000efa565b60808201529392505050565b6000828210156200110157634e487b7160e01b600052601160045260246000fd5b500390565b6000808335601e198436030181126200111e57600080fd5b83018035915067ffffffffffffffff8211156200113a57600080fd5b6020019150368190038213156200115057600080fd5b9250929050565b6000602082840312156200116a57600080fd5b813560ff81168114620009f557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000620011bb6060830187896200117c565b8281036020840152620011d08186886200117c565b91505060ff831660408301529695505050505050565b60005b8381101562001203578181015183820152602001620011e9565b8381111562001213576000848401525b50505050565b600083516200122d818460208801620011e6565b83519083019062001243818360208801620011e6565b01949350505050565b600060018060a01b03808616835280851660208401525060606040830152825180606084015262001285816080850160208701620011e6565b601f01601f191691909101608001949350505050565b634e487b7160e01b600052600160045260246000fd5b600060208284031215620012c457600080fd5b8151620009f5816200102556fe60a06040523480156200001157600080fd5b5060405162000f9b38038062000f9b8339810160408190526200003491620001e8565b8251839083906200004d90600390602085019062000075565b5080516200006390600490602084019062000075565b50505060ff1660805250620002aa9050565b82805462000083906200026d565b90600052602060002090601f016020900481019282620000a75760008555620000f2565b82601f10620000c257805160ff1916838001178555620000f2565b82800160010185558215620000f2579182015b82811115620000f2578251825591602001919060010190620000d5565b506200010092915062000104565b5090565b5b8082111562000100576000815560010162000105565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014357600080fd5b81516001600160401b03808211156200016057620001606200011b565b604051601f8301601f19908116603f011681019082821181831017156200018b576200018b6200011b565b81604052838152602092508683858801011115620001a857600080fd5b600091505b83821015620001cc5785820183015181830184015290820190620001ad565b83821115620001de5760008385830101525b9695505050505050565b600080600060608486031215620001fe57600080fd5b83516001600160401b03808211156200021657600080fd5b620002248783880162000131565b945060208601519150808211156200023b57600080fd5b506200024a8682870162000131565b925050604084015160ff811681146200026257600080fd5b809150509250925092565b600181811c908216806200028257607f821691505b60208210811415620002a457634e487b7160e01b600052602260045260246000fd5b50919050565b608051610cd5620002c660003960006101670152610cd56000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342966c6811610097578063a9059cbb11610066578063a9059cbb14610210578063d7adb4fe14610223578063dd62ed3e14610236578063df8685d21461026f57600080fd5b806342966c68146101b957806370a08231146101cc57806395d89b41146101f5578063a457c2d7146101fd57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461019157806340c10f19146101a457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261029a565b60405161010f9190610b03565b60405180910390f35b61012b610126366004610b74565b61032c565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610b9e565b610342565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161010f565b61012b61019f366004610b74565b6103f1565b6101b76101b2366004610b74565b61042d565b005b6101b76101c7366004610bda565b610466565b61013f6101da366004610bf3565b6001600160a01b031660009081526020819052604090205490565b610102610473565b61012b61020b366004610b74565b610482565b61012b61021e366004610b74565b61051b565b6101b7610231366004610bf3565b610528565b61013f610244366004610c15565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600554610282906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6060600380546102a990610c48565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590610c48565b80156103225780601f106102f757610100808354040283529160200191610322565b820191906000526020600020905b81548152906001019060200180831161030557829003601f168201915b5050505050905090565b6000610339338484610558565b50600192915050565b600061034f84848461067d565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103d95760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103e68533858403610558565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610339918590610428908690610c99565b610558565b6005546001600160a01b0316331461045857604051636bd1573560e11b815260040160405180910390fd5b6104628282610857565b5050565b6104703382610942565b50565b6060600480546102a990610c48565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103d0565b6105113385858403610558565b5060019392505050565b600061033933848461067d565b6005546001600160a01b031661047057600580546001600160a01b0383166001600160a01b031990911617905550565b6001600160a01b0383166105ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d0565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166106e15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d0565b6001600160a01b0382166107435760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d0565b61074e838383610a99565b6001600160a01b038316600090815260208190526040902054818110156107c65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d0565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107fd908490610c99565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161084991815260200190565b60405180910390a350505050565b6001600160a01b0382166108ad5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d0565b6108b960008383610a99565b80600260008282546108cb9190610c99565b90915550506001600160a01b038216600090815260208190526040812080548392906108f8908490610c99565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166109a25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d0565b6109ae82600083610a99565b6001600160a01b03821660009081526020819052604090205481811015610a225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d0565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a51908490610cb1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610670565b505050565b6001600160a01b0383161580610ab657506001600160a01b038216155b80610ace57506005546001600160a01b038481169116145b80610ae657506005546001600160a01b038381169116145b610a9457604051636bd1573560e11b815260040160405180910390fd5b600060208083528351808285015260005b81811015610b3057858101830151858201604001528201610b14565b81811115610b42576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610b6f57600080fd5b919050565b60008060408385031215610b8757600080fd5b610b9083610b58565b946020939093013593505050565b600080600060608486031215610bb357600080fd5b610bbc84610b58565b9250610bca60208501610b58565b9150604084013590509250925092565b600060208284031215610bec57600080fd5b5035919050565b600060208284031215610c0557600080fd5b610c0e82610b58565b9392505050565b60008060408385031215610c2857600080fd5b610c3183610b58565b9150610c3f60208401610b58565b90509250929050565b600181811c90821680610c5c57607f821691505b60208210811415610c7d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b600082821015610cc357610cc3610c83565b50039056fea164736f6c634300080a000a608060405260405162000f1038038062000f10833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000ec9833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000ea983398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000ee96027913962000381565b9392505050565b60006200021a60008051602062000ea983398151915260001b6200045e60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000ea983398151915260001b6200045e60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61082380620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106d6565b610118565b61005b6100933660046106f1565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106d6565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610392565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610392915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103bd565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107f060279139610411565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104e5565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039b8361050d565b6000825111806103a85750805b156101c3576103b78383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e661035f565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161054d565b6060833b6104705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b03168560405161048b91906107a0565b600060405180830381855af49150503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b50915091506104db8282866105f6565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610383565b6105168161062f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105b25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610605575081610285565b8251156106155782518084602001fd5b8160405162461bcd60e51b815260040161032891906107bc565b803b6106935760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105d5565b80356001600160a01b03811681146106d157600080fd5b919050565b6000602082840312156106e857600080fd5b610285826106ba565b60008060006040848603121561070657600080fd5b61070f846106ba565b9250602084013567ffffffffffffffff8082111561072c57600080fd5b818601915086601f83011261074057600080fd5b81358181111561074f57600080fd5b87602082850101111561076157600080fd5b6020830194508093505050509250925092565b60005b8381101561078f578181015183820152602001610777565b838111156103b75750506000910152565b600082516107b2818460208701610774565b9190910192915050565b60208152600082518060208401526107db816040850160208701610774565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080a000ab53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080a000a608060405234801561001057600080fd5b5060958061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806372b6bb3814602d575b600080fd5b60416038366004605d565b50600160601b90565b6040516001600160a01b03909116815260200160405180910390f35b600060208284031215606e57600080fd5b813563ffffffff81168114608157600080fd5b939250505056fea164736f6c634300080a000a608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106fa8061007e6000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead1461016457600080fd5b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b3660046104ed565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610511565b610254565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f366004610560565b6102de565b34801561013057600080fd5b506100d161013f366004610511565b61036f565b34801561015057600080fd5b506100d161015f3660046104ed565b6103c7565b34801561017057600080fd5b506100a061017f3660046104ed565b610462565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610636565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610653565b60405180910390fd5b6102526000610488565b565b6000546001600160a01b0316331461027e5760405162461bcd60e51b815260040161023f90610653565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b1580156102c257600080fd5b505af11580156102d6573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103085760405162461bcd60e51b815260040161023f90610653565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906103389086908690600401610688565b6000604051808303818588803b15801561035157600080fd5b505af1158015610365573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103995760405162461bcd60e51b815260040161023f90610653565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102a8565b6000546001600160a01b031633146103f15760405162461bcd60e51b815260040161023f90610653565b6001600160a01b0381166104565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b61045f81610488565b50565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461045f57600080fd5b6000602082840312156104ff57600080fd5b813561050a816104d8565b9392505050565b6000806040838503121561052457600080fd5b823561052f816104d8565b9150602083013561053f816104d8565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561057557600080fd5b8335610580816104d8565b92506020840135610590816104d8565b9150604084013567ffffffffffffffff808211156105ad57600080fd5b818601915086601f8301126105c157600080fd5b8135818111156105d3576105d361054a565b604051601f8201601f19908116603f011681019083821181831017156105fb576105fb61054a565b8160405282815289602084870101111561061457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561064857600080fd5b815161050a816104d8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60018060a01b038316815260006020604081840152835180604085015260005b818110156106c4578581018301518582016060015282016106a8565b818111156106d6576000606083870101525b50601f01601f19169290920160600194935050505056fea164736f6c634300080a000a60a06040523480156200001157600080fd5b5060405162001108380380620011088339810160408190526200003491620001d1565b604080518082018252601d81527f52616765205472616465205669727475616c204261736520546f6b656e000000602080830191825283518085019094526005845264764261736560d81b90840152815191929162000096916003916200012b565b508051620000ac9060049060208401906200012b565b505050620000c9620000c3620000d560201b60201c565b620000d9565b60ff166080526200023a565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200013990620001fd565b90600052602060002090601f0160209004810192826200015d5760008555620001a8565b82601f106200017857805160ff1916838001178555620001a8565b82800160010185558215620001a8579182015b82811115620001a85782518255916020019190600101906200018b565b50620001b6929150620001ba565b5090565b5b80821115620001b65760008155600101620001bb565b600060208284031215620001e457600080fd5b815160ff81168114620001f657600080fd5b9392505050565b600181811c908216806200021257607f821691505b602082108114156200023457634e487b7160e01b600052602260045260246000fd5b50919050565b608051610eb26200025660003960006101ab0152610eb26000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610264578063a9059cbb14610277578063b6a5d7de1461028a578063dd62ed3e1461029d578063f2fde38b146102d657600080fd5b806370a0823114610210578063715018a6146102395780638da5cb5b1461024157806395d89b411461025c57600080fd5b80632520e7ff116100e95780632520e7ff14610181578063313ce567146101a457806339509351146101d557806340c10f19146101e857806342966c68146101fd57600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b6101236102e9565b6040516101309190610cab565b60405180910390f35b61014c610147366004610d1c565b61037b565b6040519015158152602001610130565b6002545b604051908152602001610130565b61014c61017c366004610d46565b610391565b61014c61018f366004610d82565b60066020526000908152604090205460ff1681565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610130565b61014c6101e3366004610d1c565b610440565b6101fb6101f6366004610d1c565b61047c565b005b6101fb61020b366004610da4565b6104ba565b61016061021e366004610d82565b6001600160a01b031660009081526020819052604090205490565b6101fb6104c7565b6005546040516001600160a01b039091168152602001610130565b6101236104fd565b61014c610272366004610d1c565b61050c565b61014c610285366004610d1c565b6105a5565b6101fb610298366004610d82565b6105b2565b6101606102ab366004610dbd565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101fb6102e4366004610d82565b610600565b6060600380546102f890610df0565b80601f016020809104026020016040519081016040528092919081815260200182805461032490610df0565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b5050505050905090565b6000610388338484610698565b50600192915050565b600061039e8484846107bd565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104285760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104358533858403610698565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610388918590610477908690610e41565b610698565b3360009081526006602052604090205460ff166104ac57604051636bd1573560e11b815260040160405180910390fd5b6104b68282610997565b5050565b6104c43382610a82565b50565b6005546001600160a01b031633146104f15760405162461bcd60e51b815260040161041f90610e59565b6104fb6000610bd9565b565b6060600480546102f890610df0565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561058e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161041f565b61059b3385858403610698565b5060019392505050565b60006103883384846107bd565b6005546001600160a01b031633146105dc5760405162461bcd60e51b815260040161041f90610e59565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6005546001600160a01b0316331461062a5760405162461bcd60e51b815260040161041f90610e59565b6001600160a01b03811661068f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041f565b6104c481610bd9565b6001600160a01b0383166106fa5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161041f565b6001600160a01b03821661075b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161041f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166108215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161041f565b6001600160a01b0382166108835760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161041f565b61088e838383610c2b565b6001600160a01b038316600090815260208190526040902054818110156109065760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161041f565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061093d908490610e41565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161098991815260200190565b60405180910390a350505050565b6001600160a01b0382166109ed5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161041f565b6109f960008383610c2b565b8060026000828254610a0b9190610e41565b90915550506001600160a01b03821660009081526020819052604081208054839290610a38908490610e41565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610ae25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161041f565b610aee82600083610c2b565b6001600160a01b03821660009081526020819052604090205481811015610b625760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161041f565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b91908490610e8e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016107b0565b505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0383161580610c4857506001600160a01b038216155b80610c6b57506001600160a01b03831660009081526006602052604090205460ff165b80610c8e57506001600160a01b03821660009081526006602052604090205460ff165b610bd457604051636bd1573560e11b815260040160405180910390fd5b600060208083528351808285015260005b81811015610cd857858101830151858201604001528201610cbc565b81811115610cea576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610d1757600080fd5b919050565b60008060408385031215610d2f57600080fd5b610d3883610d00565b946020939093013593505050565b600080600060608486031215610d5b57600080fd5b610d6484610d00565b9250610d7260208501610d00565b9150604084013590509250925092565b600060208284031215610d9457600080fd5b610d9d82610d00565b9392505050565b600060208284031215610db657600080fd5b5035919050565b60008060408385031215610dd057600080fd5b610dd983610d00565b9150610de760208401610d00565b90509250929050565b600181811c90821680610e0457607f821691505b60208210811415610e2557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610e5457610e54610e2b565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015610ea057610ea0610e2b565b50039056fea164736f6c634300080a000a608060405260405162000f1038038062000f10833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000ec9833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000ea983398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000ee96027913962000381565b9392505050565b60006200021a60008051602062000ea983398151915260001b6200045e60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000ea983398151915260001b6200045e60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61082380620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106d6565b610118565b61005b6100933660046106f1565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106d6565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610392565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610392915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103bd565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107f060279139610411565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104e5565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039b8361050d565b6000825111806103a85750805b156101c3576103b78383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e661035f565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161054d565b6060833b6104705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b03168560405161048b91906107a0565b600060405180830381855af49150503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b50915091506104db8282866105f6565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610383565b6105168161062f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105b25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610605575081610285565b8251156106155782518084602001fd5b8160405162461bcd60e51b815260040161032891906107bc565b803b6106935760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105d5565b80356001600160a01b03811681146106d157600080fd5b919050565b6000602082840312156106e857600080fd5b610285826106ba565b60008060006040848603121561070657600080fd5b61070f846106ba565b9250602084013567ffffffffffffffff8082111561072c57600080fd5b818601915086601f83011261074057600080fd5b81358181111561074f57600080fd5b87602082850101111561076157600080fd5b6020830194508093505050509250925092565b60005b8381101561078f578181015183820152602001610777565b838111156103b75750506000910152565b600082516107b2818460208701610774565b9190910192915050565b60208152600082518060208401526107db816040850160208701610774565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080a000ab53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e05760003560e01c80639314430e1162000097578063d38bfff4116200006e578063d38bfff41462000239578063dbc0c0851462000250578063e3d11ba01462000262578063fc344099146200028a57600080fd5b80639314430e14620001bd578063c5f1916c14620001fa578063cec38a44146200022257600080fd5b80630af9680014620000e5578063255034a9146200012a5780633ae726d514620001435780633e47158c146200017a5780635aa6e675146200018e5780637f64d66314620001a6575b600080fd5b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620001416200013b36600462000f13565b6200029e565b005b6200016b7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200162000121565b6002546200010d906001600160a01b031681565b6000546201000090046001600160a01b03166200010d565b62000141620001b736600462000f13565b62000323565b620001e57f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff909116815260200162000121565b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b620001416200023336600462000f33565b620003f4565b620001416200024a36600462000f13565b620008a8565b6001546001600160a01b03166200010d565b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b6003546200010d906001600160a01b031681565b6000546001600160a01b0362010000909104163314620002d157604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b0381166200030157604051630562997d60e41b8152600060048201526024015b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633148015906200035157506000546001600160a01b0362010000909104163314155b156200037057604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b038116620003985760405163d92e233d60e01b815260040160405180910390fd5b6001546040516001600160a01b038084169216907f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb290600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03620100009091041633146200042757604051636bd1573560e11b815260040160405180910390fd5b60006200043f62000439838062000f72565b62000b04565b905060006200044e8262000bb1565b90506001600160a01b03811663f637731d6200047160c0860160a0870162000f13565b6001600160a01b03166372b6bb3862000491608088016060890162000fad565b6040516001600160e01b031960e084901b16815263ffffffff919091166004820152602401602060405180830381865afa158015620004d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004fa919062000fcb565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b1580156200053c57600080fd5b505af115801562000551573d6000803e3d6000fd5b5050505060006200064d6040518060e001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001856001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001846001600160a01b031681526020018660c0016020810190620005f7919062000feb565b62ffffff16815260200162000614610100880160e0890162000feb565b62ffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681525062000c9e565b604051635b52ebef60e11b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b6a5d7de90602401600060405180830381600087803b158015620006b657600080fd5b505af1158015620006cb573d6000803e3d6000fd5b5050604051636bd6da7f60e11b81526001600160a01b0384811660048301528616925063d7adb4fe9150602401600060405180830381600087803b1580156200071357600080fd5b505af115801562000728573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a66e9ca846040518060600160405280866001600160a01b03168152602001856001600160a01b03168152602001886020018036038101906200079b919062001034565b9052604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201528251841660248201526020808401518516604483015292820151805161ffff90811660648401529381015190931660848201529082015163ffffffff1660a48201526060820151151560c482015260809091015190911660e482015261010401600060405180830381600087803b1580156200083d57600080fd5b505af115801562000852573d6000803e3d6000fd5b5050604080516001600160a01b038681168252878116602083015285168183015290517f0d302405a4752eff773a2a9bb91dff79a0571f71ac88bdf8f0572f3c682efd3a9350908190036060019150a150505050565b6000546001600160a01b0362010000909104163314620008db57604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b038116620009035760405163d92e233d60e01b815260040160405180910390fd5b600080546040516001600160a01b03808516936201000090930416917f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce8091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b609c1c600f9081161490565b6000620009958484846200098e600143620010e0565b4062000d7e565b949350505050565b604080516001600160f81b03196020808301919091526bffffffffffffffffffffffff193060601b16602183015260358201859052605580830185905283518084039091018152607590920190925280519101206000905b9392505050565b6000808447101562000a515760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e63650000006044820152606401620002f8565b825162000aa15760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152606401620002f8565b8383516020850187f590506001600160a01b038116620009955760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606401620002f8565b6000806040518060200162000b199062000ede565b601f1982820381018352601f9091011660405262000b38848062001106565b62000b47602087018762001106565b62000b596060890160408a0162001157565b60405160200162000b6f959493929190620011a5565b60408051601f198184030181529082905262000b8f929160200162001219565b6040516020818303038152906040529050620009f560008262000dfc62000978565b60405163a167129560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015282811660248301527f000000000000000000000000000000000000000000000000000000000000000062ffffff1660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063a1671295906064016020604051808303816000875af115801562000c72573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c98919062000fcb565b92915050565b6003546002546040805184516001600160a01b039081166024830152602080870151821660448401528684015182166064840152606087015182166084840152608087015162ffffff90811660a485015260a0880151811660c485015260c08801511660e480850191909152845180850390910181526101049093018452820180516001600160e01b0316630f5751cd60e31b1790529151600094831693929092169162000d4c9062000eec565b62000d5a939291906200124c565b604051809103906000f08015801562000d77573d6000803e3d6000fd5b5092915050565b825160208401206000905b62000d9583826200099d565b915062000da5828563ffffffff16565b1562000db15762000dbd565b60019092019162000d89565b600062000dcc878588620009fc565b9050806001600160a01b0316836001600160a01b03161462000df25762000df26200129b565b5050949350505050565b600063ffffffff82161515801562000e4557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316105b801562000c985750604051636d62154b60e11b815263ffffffff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063dac42a9690602401602060405180830381865afa15801562000eb8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c989190620012b1565b610f9b80620012d283390190565b610f10806200226d83390190565b6001600160a01b038116811462000f1057600080fd5b50565b60006020828403121562000f2657600080fd5b8135620009f58162000efa565b60006020828403121562000f4657600080fd5b813567ffffffffffffffff81111562000f5e57600080fd5b82016101008185031215620009f557600080fd5b60008235605e1983360301811262000f8957600080fd5b9190910192915050565b803563ffffffff8116811462000fa857600080fd5b919050565b60006020828403121562000fc057600080fd5b620009f58262000f93565b60006020828403121562000fde57600080fd5b8151620009f58162000efa565b60006020828403121562000ffe57600080fd5b813562ffffff81168114620009f557600080fd5b803561ffff8116811462000fa857600080fd5b801515811462000f1057600080fd5b600060a082840312156200104757600080fd5b60405160a0810181811067ffffffffffffffff821117156200107957634e487b7160e01b600052604160045260246000fd5b604052620010878362001012565b8152620010976020840162001012565b6020820152620010aa6040840162000f93565b60408201526060830135620010bf8162001025565b60608201526080830135620010d48162000efa565b60808201529392505050565b6000828210156200110157634e487b7160e01b600052601160045260246000fd5b500390565b6000808335601e198436030181126200111e57600080fd5b83018035915067ffffffffffffffff8211156200113a57600080fd5b6020019150368190038213156200115057600080fd5b9250929050565b6000602082840312156200116a57600080fd5b813560ff81168114620009f557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000620011bb6060830187896200117c565b8281036020840152620011d08186886200117c565b91505060ff831660408301529695505050505050565b60005b8381101562001203578181015183820152602001620011e9565b8381111562001213576000848401525b50505050565b600083516200122d818460208801620011e6565b83519083019062001243818360208801620011e6565b01949350505050565b600060018060a01b03808616835280851660208401525060606040830152825180606084015262001285816080850160208701620011e6565b601f01601f191691909101608001949350505050565b634e487b7160e01b600052600160045260246000fd5b600060208284031215620012c457600080fd5b8151620009f5816200102556fe60a06040523480156200001157600080fd5b5060405162000f9b38038062000f9b8339810160408190526200003491620001e8565b8251839083906200004d90600390602085019062000075565b5080516200006390600490602084019062000075565b50505060ff1660805250620002aa9050565b82805462000083906200026d565b90600052602060002090601f016020900481019282620000a75760008555620000f2565b82601f10620000c257805160ff1916838001178555620000f2565b82800160010185558215620000f2579182015b82811115620000f2578251825591602001919060010190620000d5565b506200010092915062000104565b5090565b5b8082111562000100576000815560010162000105565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014357600080fd5b81516001600160401b03808211156200016057620001606200011b565b604051601f8301601f19908116603f011681019082821181831017156200018b576200018b6200011b565b81604052838152602092508683858801011115620001a857600080fd5b600091505b83821015620001cc5785820183015181830184015290820190620001ad565b83821115620001de5760008385830101525b9695505050505050565b600080600060608486031215620001fe57600080fd5b83516001600160401b03808211156200021657600080fd5b620002248783880162000131565b945060208601519150808211156200023b57600080fd5b506200024a8682870162000131565b925050604084015160ff811681146200026257600080fd5b809150509250925092565b600181811c908216806200028257607f821691505b60208210811415620002a457634e487b7160e01b600052602260045260246000fd5b50919050565b608051610cd5620002c660003960006101670152610cd56000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342966c6811610097578063a9059cbb11610066578063a9059cbb14610210578063d7adb4fe14610223578063dd62ed3e14610236578063df8685d21461026f57600080fd5b806342966c68146101b957806370a08231146101cc57806395d89b41146101f5578063a457c2d7146101fd57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461019157806340c10f19146101a457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b61010261029a565b60405161010f9190610b03565b60405180910390f35b61012b610126366004610b74565b61032c565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610b9e565b610342565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161010f565b61012b61019f366004610b74565b6103f1565b6101b76101b2366004610b74565b61042d565b005b6101b76101c7366004610bda565b610466565b61013f6101da366004610bf3565b6001600160a01b031660009081526020819052604090205490565b610102610473565b61012b61020b366004610b74565b610482565b61012b61021e366004610b74565b61051b565b6101b7610231366004610bf3565b610528565b61013f610244366004610c15565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600554610282906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b6060600380546102a990610c48565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590610c48565b80156103225780601f106102f757610100808354040283529160200191610322565b820191906000526020600020905b81548152906001019060200180831161030557829003601f168201915b5050505050905090565b6000610339338484610558565b50600192915050565b600061034f84848461067d565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103d95760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6103e68533858403610558565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610339918590610428908690610c99565b610558565b6005546001600160a01b0316331461045857604051636bd1573560e11b815260040160405180910390fd5b6104628282610857565b5050565b6104703382610942565b50565b6060600480546102a990610c48565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105045760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103d0565b6105113385858403610558565b5060019392505050565b600061033933848461067d565b6005546001600160a01b031661047057600580546001600160a01b0383166001600160a01b031990911617905550565b6001600160a01b0383166105ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103d0565b6001600160a01b03821661061b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166106e15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103d0565b6001600160a01b0382166107435760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103d0565b61074e838383610a99565b6001600160a01b038316600090815260208190526040902054818110156107c65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103d0565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107fd908490610c99565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161084991815260200190565b60405180910390a350505050565b6001600160a01b0382166108ad5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103d0565b6108b960008383610a99565b80600260008282546108cb9190610c99565b90915550506001600160a01b038216600090815260208190526040812080548392906108f8908490610c99565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0382166109a25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103d0565b6109ae82600083610a99565b6001600160a01b03821660009081526020819052604090205481811015610a225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103d0565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610a51908490610cb1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610670565b505050565b6001600160a01b0383161580610ab657506001600160a01b038216155b80610ace57506005546001600160a01b038481169116145b80610ae657506005546001600160a01b038381169116145b610a9457604051636bd1573560e11b815260040160405180910390fd5b600060208083528351808285015260005b81811015610b3057858101830151858201604001528201610b14565b81811115610b42576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610b6f57600080fd5b919050565b60008060408385031215610b8757600080fd5b610b9083610b58565b946020939093013593505050565b600080600060608486031215610bb357600080fd5b610bbc84610b58565b9250610bca60208501610b58565b9150604084013590509250925092565b600060208284031215610bec57600080fd5b5035919050565b600060208284031215610c0557600080fd5b610c0e82610b58565b9392505050565b60008060408385031215610c2857600080fd5b610c3183610b58565b9150610c3f60208401610b58565b90509250929050565b600181811c90821680610c5c57607f821691505b60208210811415610c7d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b600082821015610cc357610cc3610c83565b50039056fea164736f6c634300080a000a608060405260405162000f1038038062000f10833981016040819052620000269162000507565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005e7565b60008051602062000ec9833981519152146200007557620000756200060d565b6200008382826000620000e7565b50620000b3905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005e7565b60008051602062000ea983398151915214620000d357620000d36200060d565b620000de8262000124565b50505062000676565b620000f2836200017f565b600082511180620001005750805b156200011f576200011d8383620001c160201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200014f620001f0565b604080516001600160a01b03928316815291841660208301520160405180910390a16200017c8162000229565b50565b6200018a81620002de565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001e9838360405180606001604052806027815260200162000ee96027913962000381565b9392505050565b60006200021a60008051602062000ea983398151915260001b6200045e60201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620002945760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002bd60008051602062000ea983398151915260001b6200045e60201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002f4816200046160201b6200028c1760201c565b620003585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200028b565b80620002bd60008051602062000ec983398151915260001b6200045e60201b620002081760201c565b6060833b620003e25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200028b565b600080856001600160a01b031685604051620003ff919062000623565b600060405180830381855af49150503d80600081146200043c576040519150601f19603f3d011682016040523d82523d6000602084013e62000441565b606091505b5090925090506200045482828662000467565b9695505050505050565b90565b3b151590565b6060831562000478575081620001e9565b825115620004895782518084602001fd5b8160405162461bcd60e51b81526004016200028b919062000641565b80516001600160a01b0381168114620004bd57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b838111156200011d5750506000910152565b6000806000606084860312156200051d57600080fd5b6200052884620004a5565b92506200053860208501620004a5565b60408501519092506001600160401b03808211156200055657600080fd5b818601915086601f8301126200056b57600080fd5b815181811115620005805762000580620004c2565b604051601f8201601f19908116603f01168101908382118183101715620005ab57620005ab620004c2565b81604052828152896020848701011115620005c557600080fd5b620005d8836020830160208801620004d8565b80955050505050509250925092565b6000828210156200060857634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825162000637818460208701620004d8565b9190910192915050565b602081526000825180602084015262000662816040850160208701620004d8565b601f01601f19169190910160400192915050565b61082380620006866000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106d6565b610118565b61005b6100933660046106f1565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106d6565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610392565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610392915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103bd565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107f060279139610411565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb6104e5565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b61039b8361050d565b6000825111806103a85750805b156101c3576103b78383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e661035f565b604080516001600160a01b03928316815291841660208301520160405180910390a16101548161054d565b6060833b6104705760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b03168560405161048b91906107a0565b600060405180830381855af49150503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b50915091506104db8282866105f6565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610383565b6105168161062f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105b25760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b60608315610605575081610285565b8251156106155782518084602001fd5b8160405162461bcd60e51b815260040161032891906107bc565b803b6106935760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105d5565b80356001600160a01b03811681146106d157600080fd5b919050565b6000602082840312156106e857600080fd5b610285826106ba565b60008060006040848603121561070657600080fd5b61070f846106ba565b9250602084013567ffffffffffffffff8082111561072c57600080fd5b818601915086601f83011261074057600080fd5b81358181111561074f57600080fd5b87602082850101111561076157600080fd5b6020830194508093505050509250925092565b60005b8381101561078f578181015183820152602001610777565b838111156103b75750506000910152565b600082516107b2818460208701610774565b9190910192915050565b60208152600082518060208401526107db816040850160208701610774565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080a000ab53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Need to deploy logic contracts for ClearingHouse, VPoolWrapper, InsuranceFund prior to this"
      },
      "governance()": {
        "details": "Returns the address of the current governance."
      },
      "initializePool(((string,string,uint8),(uint16,uint16,uint32,bool,address),uint24,uint24))": {
        "details": "An already deployed oracle contract address (implementing IOracle) is needed prior to using this",
        "params": {
          "initializePoolParams": "parameters for initializing the pool"
        }
      },
      "setVPoolWrapperLogicAddress(address)": {
        "details": "When a new vPoolWrapperLogic is deployed, make sure that the initialize method is called.",
        "params": {
          "_vPoolWrapperLogicAddress": ": new logic address"
        }
      },
      "teamMultisig()": {
        "details": "Returns the address of the current team multisig.transferTeamMultisig"
      },
      "transferGovernance(address)": {
        "details": "Transfers governance to a new account (`newGovernance`). Can only be called by the current governance."
      },
      "transferTeamMultisig(address)": {
        "details": "Transfers teamMultisig to a new account (`newTeamMultisig`). Can only be called by the current teamMultisig or current governance."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Sets up the protocol by deploying necessary core contracts"
      },
      "initializePool(((string,string,uint8),(uint16,uint16,uint32,bool,address),uint24,uint24))": {
        "notice": "Sets up a new Rage Trade Pool by deploying necessary contracts"
      },
      "setVPoolWrapperLogicAddress(address)": {
        "notice": "Admin method to set latest implementation logic for VPoolWrapper"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 252,
        "contract": "contracts/protocol/RageTradeFactory.sol:RageTradeFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 255,
        "contract": "contracts/protocol/RageTradeFactory.sol:RageTradeFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26649,
        "contract": "contracts/protocol/RageTradeFactory.sol:RageTradeFactory",
        "label": "_governance",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26651,
        "contract": "contracts/protocol/RageTradeFactory.sol:RageTradeFactory",
        "label": "_teamMultisig",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 26889,
        "contract": "contracts/protocol/RageTradeFactory.sol:RageTradeFactory",
        "label": "proxyAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ProxyAdmin)2300"
      },
      {
        "astId": 21680,
        "contract": "contracts/protocol/RageTradeFactory.sol:RageTradeFactory",
        "label": "vPoolWrapperLogicAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ProxyAdmin)2300": {
        "encoding": "inplace",
        "label": "contract ProxyAdmin",
        "numberOfBytes": "20"
      }
    }
  }
}