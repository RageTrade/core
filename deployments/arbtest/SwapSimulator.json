{
  "address": "0xEf19EbA21AD27E5e9Fb4C2D0127b7017d0dB7FA0",
  "abi": [
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "clearingHouse",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        },
        {
          "internalType": "bool",
          "name": "isNotional",
          "type": "bool"
        }
      ],
      "name": "simulateSwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amountSpecified",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "vTokenIn",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "vQuoteIn",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "liquidityFees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFees",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHouseStructures.SwapValues",
          "name": "swapValues",
          "type": "tuple"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96End",
          "type": "uint160"
        },
        {
          "components": [
            {
              "internalType": "uint160",
              "name": "sqrtPriceX96Start",
              "type": "uint160"
            },
            {
              "internalType": "int24",
              "name": "tickStart",
              "type": "int24"
            },
            {
              "internalType": "uint8",
              "name": "feeProtocol",
              "type": "uint8"
            },
            {
              "internalType": "uint128",
              "name": "liquidityStart",
              "type": "uint128"
            },
            {
              "internalType": "int24",
              "name": "tickSpacing",
              "type": "int24"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            }
          ],
          "internalType": "struct SimulateSwap.SwapCache",
          "name": "cache",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "amountSpecifiedRemaining",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "amountCalculated",
                  "type": "int256"
                },
                {
                  "internalType": "uint160",
                  "name": "sqrtPriceX96",
                  "type": "uint160"
                },
                {
                  "internalType": "int24",
                  "name": "tick",
                  "type": "int24"
                },
                {
                  "internalType": "uint256",
                  "name": "feeGrowthGlobalIncreaseX128",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "protocolFee",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                }
              ],
              "internalType": "struct SimulateSwap.SwapState",
              "name": "state",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint160",
                  "name": "sqrtPriceStartX96",
                  "type": "uint160"
                },
                {
                  "internalType": "int24",
                  "name": "tickNext",
                  "type": "int24"
                },
                {
                  "internalType": "bool",
                  "name": "initialized",
                  "type": "bool"
                },
                {
                  "internalType": "uint160",
                  "name": "sqrtPriceNextX96",
                  "type": "uint160"
                },
                {
                  "internalType": "uint256",
                  "name": "amountIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountOut",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SimulateSwap.StepComputations",
              "name": "step",
              "type": "tuple"
            }
          ],
          "internalType": "struct SwapSimulator.SwapStep[]",
          "name": "steps",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c9ee8f5c732096dd78e7dd1c9698543a45496a696a32906dc7f45e1e8dd0e34",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0xEf19EbA21AD27E5e9Fb4C2D0127b7017d0dB7FA0",
    "transactionIndex": 0,
    "gasUsed": "43089486",
    "logsBloom": "0x
    "blockHash": "0x455ce31d6ed96a3d65775da985c1ff43232a24a839ec8a7e6f62f0dc6abafbdf",
    "transactionHash": "0x2c9ee8f5c732096dd78e7dd1c9698543a45496a696a32906dc7f45e1e8dd0e34",
    "logs": [],
    "blockNumber": 10280194,
    "cumulativeGasUsed": "20095005",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01d5054bacc9f7c19ab36217e6273f93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"clearingHouse\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"isNotional\",\"type\":\"bool\"}],\"name\":\"simulateSwap\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vTokenIn\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vQuoteIn\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHouseStructures.SwapValues\",\"name\":\"swapValues\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96End\",\"type\":\"uint160\"},{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96Start\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tickStart\",\"type\":\"int24\"},{\"internalType\":\"uint8\",\"name\":\"feeProtocol\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"liquidityStart\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct SimulateSwap.SwapCache\",\"name\":\"cache\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"amountSpecifiedRemaining\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amountCalculated\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthGlobalIncreaseX128\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"internalType\":\"struct SimulateSwap.SwapState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceStartX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tickNext\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceNextX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct SimulateSwap.StepComputations\",\"name\":\"step\",\"type\":\"tuple\"}],\"internalType\":\"struct SwapSimulator.SwapStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/SwapSimulator.sol\":\"SwapSimulator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        unchecked {\\n            require(x > 0);\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                r += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                r += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                r += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                r += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                r += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                r += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                r += 2;\\n            }\\n            if (x >= 0x2) r += 1;\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @dev The function satisfies the property:\\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        unchecked {\\n            require(x > 0);\\n\\n            r = 255;\\n            if (x & type(uint128).max > 0) {\\n                r -= 128;\\n            } else {\\n                x >>= 128;\\n            }\\n            if (x & type(uint64).max > 0) {\\n                r -= 64;\\n            } else {\\n                x >>= 64;\\n            }\\n            if (x & type(uint32).max > 0) {\\n                r -= 32;\\n            } else {\\n                x >>= 32;\\n            }\\n            if (x & type(uint16).max > 0) {\\n                r -= 16;\\n            } else {\\n                x >>= 16;\\n            }\\n            if (x & type(uint8).max > 0) {\\n                r -= 8;\\n            } else {\\n                x >>= 8;\\n            }\\n            if (x & 0xf > 0) {\\n                r -= 4;\\n            } else {\\n                x >>= 4;\\n            }\\n            if (x & 0x3 > 0) {\\n                r -= 2;\\n            } else {\\n                x >>= 2;\\n            }\\n            if (x & 0x1 > 0) r -= 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c4d2d42caab2b3d170cc517518edcf0b98f1cc434faff7ecb1c0dfdc08827b0\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // Cannot overflow because denominator != 0\\n        uint256 twos;\\n        assembly {\\n            twos := and(add(not(denominator), 1), denominator)\\n        }\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n            prod0 := or(prod0, mul(prod1, twos))\\n        }\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv;\\n\\n        assembly {\\n            inv := xor(mul(3, denominator), 2)\\n        }\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        assembly {\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\\n        }\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        assembly {\\n            result := mul(prod0, inv)\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b1cd11afa50448a73daa8e8088911aff2c716eb721b0d2c14627e8fa23cb793\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        unchecked {\\n            if (y < 0) {\\n                require((z = x - uint128(-y)) < x, 'LS');\\n            } else {\\n                require((z = x + uint128(y)) >= x, 'LA');\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x952108927a815daba1d970c97a93b599d3cb0ae8f1cd77e67feb2719f042940a\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x + y) >= x);\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x - y) <= x);\\n        }\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require(x == 0 || (z = x * y) / x == y);\\n        }\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require((z = x + y) >= x == (y >= 0));\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require((z = x - y) <= x == (y >= 0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6c7bb12f704b6d5b4e5c39358ab4dd7e2c14d198cdc2f44b4edbc8c77d1a63c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        unchecked {\\n            require((z = uint160(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require((z = int128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255);\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x022028c6075d21ecb8c86c9f1bec125193092fa038a239d5eb5beb740313f142\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        unchecked {\\n            // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n            if (amount == 0) return sqrtPX96;\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n            if (add) {\\n                uint256 product;\\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                    uint256 denominator = numerator1 + product;\\n                    if (denominator >= numerator1)\\n                        // always fits in 160 bits\\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n                }\\n\\n                return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n            } else {\\n                uint256 product;\\n                // if the product overflows, we know the denominator underflows\\n                // in addition, we must check that the denominator does not underflow\\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n                uint256 denominator = numerator1 - product;\\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        unchecked {\\n            // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n            // in both cases, avoid a mulDiv for most inputs\\n            if (add) {\\n                uint256 quotient =\\n                    (\\n                        amount <= type(uint160).max\\n                            ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                            : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                    );\\n\\n                return uint256(sqrtPX96).add(quotient).toUint160();\\n            } else {\\n                uint256 quotient =\\n                    (\\n                        amount <= type(uint160).max\\n                            ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                            : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                    );\\n\\n                require(sqrtPX96 > quotient);\\n                // always fits 160 bits\\n                return uint160(sqrtPX96 - quotient);\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        unchecked {\\n            require(sqrtPX96 > 0);\\n            require(liquidity > 0);\\n\\n            // round to make sure that we don't pass the target price\\n            return\\n                zeroForOne\\n                    ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                    : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        unchecked {\\n            require(sqrtPX96 > 0);\\n            require(liquidity > 0);\\n\\n            // round to make sure that we pass the target price\\n            return\\n                zeroForOne\\n                    ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                    : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n        }\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n            require(sqrtRatioAX96 > 0);\\n\\n            return\\n                roundUp\\n                    ? UnsafeMath.divRoundingUp(\\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                        sqrtRatioAX96\\n                    )\\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                roundUp\\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fd52eb6c439be9c9ace522d9b1b5a074878257c81dd8a6cc6dc784c8a5f1c7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\nimport './FullMath.sol';\\nimport './SqrtPriceMath.sol';\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        unchecked {\\n            bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n            bool exactIn = amountRemaining >= 0;\\n\\n            if (exactIn) {\\n                uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\\n                amountIn = zeroForOne\\n                    ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\\n                if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n                else\\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                        sqrtRatioCurrentX96,\\n                        liquidity,\\n                        amountRemainingLessFee,\\n                        zeroForOne\\n                    );\\n            } else {\\n                amountOut = zeroForOne\\n                    ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\\n                if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\\n                else\\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                        sqrtRatioCurrentX96,\\n                        liquidity,\\n                        uint256(-amountRemaining),\\n                        zeroForOne\\n                    );\\n            }\\n\\n            bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n            // get the input/output amounts\\n            if (zeroForOne) {\\n                amountIn = max && exactIn\\n                    ? amountIn\\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\\n                amountOut = max && !exactIn\\n                    ? amountOut\\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\\n            } else {\\n                amountIn = max && exactIn\\n                    ? amountIn\\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\\n                amountOut = max && !exactIn\\n                    ? amountOut\\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\\n            }\\n\\n            // cap the output amount to not exceed the remaining output amount\\n            if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n                amountOut = uint256(-amountRemaining);\\n            }\\n\\n            if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n                // we didn't reach the target, so take the remainder of the maximum input as fee\\n                feeAmount = uint256(amountRemaining) - amountIn;\\n            } else {\\n                feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc892e8c0abee2e0e848bef0729490d3ca8dfced35228f190eb21742f5c38cf40\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {     \\n            // second inequality must be < because the price can never reach the price at the max tick\\n            require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63b385391f044a6332a912e2264bc2932dbf9a2a47ce1a7c743c8d0deddbb065\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IGovernable } from './IGovernable.sol';\\n\\nimport { IClearingHouseActions } from './clearinghouse/IClearingHouseActions.sol';\\nimport { IClearingHouseCustomErrors } from './clearinghouse/IClearingHouseCustomErrors.sol';\\nimport { IClearingHouseEnums } from './clearinghouse/IClearingHouseEnums.sol';\\nimport { IClearingHouseEvents } from './clearinghouse/IClearingHouseEvents.sol';\\nimport { IClearingHouseOwnerActions } from './clearinghouse/IClearingHouseOwnerActions.sol';\\nimport { IClearingHouseStructures } from './clearinghouse/IClearingHouseStructures.sol';\\nimport { IClearingHouseSystemActions } from './clearinghouse/IClearingHouseSystemActions.sol';\\nimport { IClearingHouseView } from './clearinghouse/IClearingHouseView.sol';\\n\\ninterface IClearingHouse is\\n    IGovernable,\\n    IClearingHouseEnums,\\n    IClearingHouseStructures,\\n    IClearingHouseActions,\\n    IClearingHouseCustomErrors,\\n    IClearingHouseEvents,\\n    IClearingHouseOwnerActions,\\n    IClearingHouseSystemActions,\\n    IClearingHouseView\\n{}\\n\",\"keccak256\":\"0xe4fe3d9705a9c96fdaa7233ab413ff97baf18f694e88dbd0a77d4687999ffb6a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IGovernable {\\n    function governance() external view returns (address);\\n\\n    function teamMultisig() external view returns (address);\\n\\n    function transferGovernance(address newGovernance) external;\\n\\n    function transferTeamMultisig(address newTeamMultisig) external;\\n}\\n\",\"keccak256\":\"0x1f30ea80d816aa283f24b2b24cce99fb1669ee45b425dede90b49867e4463d4b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInsuranceFund.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\n\\ninterface IInsuranceFund {\\n    function __initialize_InsuranceFund(\\n        IERC20 settlementToken,\\n        IClearingHouse clearingHouse,\\n        string calldata name,\\n        string calldata symbol\\n    ) external;\\n\\n    function claim(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xe993e2a3016af2f45e853fdbed3b37971b0e89bcd3929bd4a6c803f8c03a42f3\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IOracle {\\n    function getTwapPriceX128(uint32 twapDuration) external view returns (uint256 priceX128);\\n}\\n\",\"keccak256\":\"0xfb11bd15c6798c4b252030d763acd66307cba291ce94fe76f8d0a8c68825af5c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVPoolWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IVQuote } from './IVQuote.sol';\\nimport { IVToken } from './IVToken.sol';\\nimport { IClearingHouse } from './IClearingHouse.sol';\\n\\ninterface IVPoolWrapper {\\n    struct WrapperValuesInside {\\n        int256 sumAX128;\\n        int256 sumBInsideX128;\\n        int256 sumFpInsideX128;\\n        uint256 sumFeeInsideX128;\\n    }\\n\\n    event Swap(int256 vTokenIn, int256 vQuoteIn, uint256 liquidityFees, uint256 protocolFees);\\n\\n    event Mint(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\\n\\n    event Burn(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\\n\\n    event AccruedProtocolFeeCollected(uint256 amount);\\n\\n    event LiquidityFeeUpdated(uint24 liquidityFeePips);\\n\\n    event ProtocolFeeUpdated(uint24 protocolFeePips);\\n\\n    struct InitializeVPoolWrapperParams {\\n        IClearingHouse clearingHouse;\\n        IVToken vToken;\\n        IVQuote vQuote;\\n        IUniswapV3Pool vPool;\\n        uint24 liquidityFeePips;\\n        uint24 protocolFeePips;\\n        uint24 UNISWAP_V3_DEFAULT_FEE_TIER;\\n    }\\n\\n    function __initialize_VPoolWrapper(InitializeVPoolWrapperParams memory params) external;\\n\\n    function vPool() external view returns (IUniswapV3Pool);\\n\\n    function updateGlobalFundingState() external;\\n\\n    function getValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function swap(\\n        bool swapVTokenForVQuote, // zeroForOne\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (int256 vTokenAmount, int256 vQuoteAmount);\\n\\n    function mint(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity\\n    )\\n        external\\n        returns (\\n            uint256 vTokenPrincipal,\\n            uint256 vQuotePrincipal,\\n            WrapperValuesInside memory wrapperValuesInside\\n        );\\n\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity\\n    )\\n        external\\n        returns (\\n            uint256 vTokenPrincipal,\\n            uint256 vQuotePrincipal,\\n            WrapperValuesInside memory wrapperValuesInside\\n        );\\n\\n    function getSumAX128() external view returns (int256);\\n\\n    function getExtrapolatedSumAX128() external view returns (int256);\\n\\n    function collectAccruedProtocolFee() external returns (uint256 accruedProtocolFeeLast);\\n\\n    function uniswapFeePips() external view returns (uint24);\\n\\n    function liquidityFeePips() external view returns (uint24);\\n\\n    function protocolFeePips() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0xe9c07292d52343700915ca96591c08860497b557520230a416dd8412f8906803\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVQuote is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function authorize(address vPoolWrapper) external;\\n}\\n\",\"keccak256\":\"0x16318083436579cac71ea0d84c5a639f839a7d500ee9da97e3426791b5c7cff6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setVPoolWrapper(address) external;\\n}\\n\",\"keccak256\":\"0x8e1184dcb9ac0492d2f3a1aaea68f021b5f3e634c9a43a357b7290db7bf1cb41\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseActions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseActions is IClearingHouseStructures {\\n    /// @notice creates a new account and adds it to the accounts map\\n    /// @return newAccountId - serial number of the new account created\\n    function createAccount() external returns (uint256 newAccountId);\\n\\n    /// @notice deposits 'amount' of token associated with 'poolId'\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to deposit\\n    /// @param amount amount of token to deposit\\n    function addMargin(\\n        uint256 accountId,\\n        uint32 poolId,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice creates a new account and deposits 'amount' of token associated with 'poolId'\\n    /// @param poolId truncated address of token to deposit\\n    /// @param amount amount of token to deposit\\n    /// @return newAccountId - serial number of the new account created\\n    function createAccountAndAddMargin(uint32 poolId, uint256 amount) external returns (uint256 newAccountId);\\n\\n    /// @notice withdraws 'amount' of token associated with 'poolId'\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param amount amount of token to withdraw\\n    function removeMargin(\\n        uint256 accountId,\\n        uint32 poolId,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice withdraws 'amount' of settlement token from the profit made\\n    /// @param accountId account id\\n    /// @param amount amount of token to withdraw\\n    function updateProfit(uint256 accountId, int256 amount) external;\\n\\n    /// @notice swaps token associated with 'poolId' by 'amount' (Long if amount>0 else Short)\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param swapParams swap parameters\\n    function swapToken(\\n        uint256 accountId,\\n        uint32 poolId,\\n        SwapParams memory swapParams\\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\\n\\n    /// @notice updates range order of token associated with 'poolId' by 'liquidityDelta' (Adds if amount>0 else Removes)\\n    /// @notice also can be used to update limitOrderType\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param liquidityChangeParams liquidity change parameters\\n    function updateRangeOrder(\\n        uint256 accountId,\\n        uint32 poolId,\\n        LiquidityChangeParams calldata liquidityChangeParams\\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\\n\\n    /// @notice keeper call to remove a limit order\\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param tickLower liquidity change parameters\\n    /// @param tickUpper liquidity change parameters\\n    function removeLimitOrder(\\n        uint256 accountId,\\n        uint32 poolId,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external;\\n\\n    /// @notice keeper call for liquidation of range position\\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\\n    /// @param accountId account id\\n    function liquidateLiquidityPositions(uint256 accountId) external;\\n\\n    /// @notice keeper call for liquidation of token position\\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\\n    /// @param liquidatorAccountId liquidator account id\\n    /// @param targetAccountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator vQuote and token balance and net token position\\n    function liquidateTokenPosition(\\n        uint256 liquidatorAccountId,\\n        uint256 targetAccountId,\\n        uint32 poolId,\\n        uint16 liquidationBps\\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\\n\\n    /// @notice keeper call to remove a limit order\\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\\n    /// @param accountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param tickLower liquidity change parameters\\n    /// @param tickUpper liquidity change parameters\\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return keeperFee : amount of fees paid to caller\\n    function removeLimitOrderWithGasClaim(\\n        uint256 accountId,\\n        uint32 poolId,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 gasComputationUnitsClaim\\n    ) external returns (uint256 keeperFee);\\n\\n    /// @notice keeper call for liquidation of range position\\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\\n    /// @param accountId account id\\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return keeperFee : amount of fees paid to caller\\n    function liquidateLiquidityPositionsWithGasClaim(uint256 accountId, uint256 gasComputationUnitsClaim)\\n        external\\n        returns (int256 keeperFee);\\n\\n    /// @notice keeper call for liquidation of token position\\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\\n    /// @param liquidatorAccountId liquidator account id\\n    /// @param targetAccountId account id\\n    /// @param poolId truncated address of token to withdraw\\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator vQuote and token balance and net token position\\n    function liquidateTokenPositionWithGasClaim(\\n        uint256 liquidatorAccountId,\\n        uint256 targetAccountId,\\n        uint32 poolId,\\n        uint16 liquidationBps,\\n        uint256 gasComputationUnitsClaim\\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\\n}\\n\",\"keccak256\":\"0xc7a2c23918d3d74a30f34f072726a2b78b805d7879da7d243dc4b93537636756\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseCustomErrors.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseCustomErrors is IClearingHouseStructures {\\n    /// @notice error to denote invalid account access\\n    /// @param senderAddress address of msg sender\\n    error AccessDenied(address senderAddress);\\n\\n    /// @notice error to denote usage of uninitialized token\\n    /// @param collateralId address of token\\n    error CollateralDoesNotExist(uint32 collateralId);\\n\\n    /// @notice error to denote usage of unsupported collateral token\\n    /// @param collateralId address of token\\n    error CollateralNotAllowedForUse(uint32 collateralId);\\n\\n    /// @notice error to denote usage of uninitialized pool\\n    /// @param poolId unitialized truncated address supplied\\n    error PoolDoesNotExist(uint32 poolId);\\n\\n    /// @notice error to denote usage of unsupported pool\\n    /// @param poolId address of token\\n    error PoolNotAllowedForTrade(uint32 poolId);\\n\\n    /// @notice error to denote low notional value of txn\\n    /// @param notionalValue notional value of txn\\n    error LowNotionalValue(uint256 notionalValue);\\n\\n    /// @notice error to denote incorrect address is supplied while updating collateral settings\\n    /// @param incorrectAddress incorrect address of collateral token\\n    /// @param correctAddress correct address of collateral token\\n    error IncorrectCollateralAddress(IERC20 incorrectAddress, IERC20 correctAddress);\\n\\n    /// @notice error to denote invalid address supplied as a collateral token\\n    /// @param invalidAddress invalid address of collateral token\\n    error InvalidCollateralAddress(address invalidAddress);\\n\\n    /// @notice error to denote invalid token liquidation (fraction to liquidate> 1)\\n    error InvalidTokenLiquidationParameters();\\n\\n    /// @notice this is errored when the enum (uint8) value is out of bounds\\n    /// @param multicallOperationType is the value that is out of bounds\\n    error InvalidMulticallOperationType(MulticallOperationType multicallOperationType);\\n\\n    /// @notice error to denote slippage of txn beyond set threshold\\n    error SlippageBeyondTolerance();\\n\\n    /// @notice error to denote that keeper fee is negative or zero\\n    error KeeperFeeNotPositive(int256 keeperFee);\\n}\\n\",\"keccak256\":\"0xc2944923e472ada5987a5731df29c62910af58c514a79dc3244cf8ee1cd91c99\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseEnums.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IClearingHouseEnums {\\n    enum LimitOrderType {\\n        NONE,\\n        LOWER_LIMIT,\\n        UPPER_LIMIT\\n    }\\n\\n    enum MulticallOperationType {\\n        ADD_MARGIN,\\n        REMOVE_MARGIN,\\n        UPDATE_PROFIT,\\n        SWAP_TOKEN,\\n        UPDATE_RANGE_ORDER,\\n        REMOVE_LIMIT_ORDER,\\n        LIQUIDATE_LIQUIDITY_POSITIONS,\\n        LIQUIDATE_TOKEN_POSITION\\n    }\\n}\\n\",\"keccak256\":\"0x425552356754cf10db06270608db22b94f423b50b72b8debd338f71931b8898b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseEvents.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseEvents is IClearingHouseStructures {\\n    /// @notice denotes new account creation\\n    /// @param ownerAddress wallet address of account owner\\n    /// @param accountId serial number of the account\\n    event AccountCreated(address indexed ownerAddress, uint256 accountId);\\n\\n    /// @notice denotes deposit of margin\\n    /// @param accountId serial number of the account\\n    /// @param collateralId token in which margin is deposited\\n    /// @param amount amount of tokens deposited\\n    event MarginAdded(uint256 indexed accountId, uint32 indexed collateralId, uint256 amount);\\n\\n    /// @notice denotes withdrawal of margin\\n    /// @param accountId serial number of the account\\n    /// @param collateralId token in which margin is withdrawn\\n    /// @param amount amount of tokens withdrawn\\n    event MarginRemoved(uint256 indexed accountId, uint32 indexed collateralId, uint256 amount);\\n\\n    /// @notice new collateral supported as margin\\n    /// @param cTokenInfo collateral token info\\n    event CollateralSettingsUpdated(IERC20 cToken, CollateralSettings cTokenInfo);\\n\\n    /// @notice maintainance margin ratio of a pool changed\\n    /// @param poolId id of the rage trade pool\\n    /// @param settings new settings\\n    event PoolSettingsUpdated(uint32 poolId, PoolSettings settings);\\n\\n    /// @notice protocol settings changed\\n    /// @param liquidationParams liquidation params\\n    /// @param removeLimitOrderFee fee for remove limit order\\n    /// @param minimumOrderNotional minimum order notional\\n    /// @param minRequiredMargin minimum required margin\\n    event ProtocolSettingsUpdated(\\n        LiquidationParams liquidationParams,\\n        uint256 removeLimitOrderFee,\\n        uint256 minimumOrderNotional,\\n        uint256 minRequiredMargin\\n    );\\n\\n    event PausedUpdated(bool paused);\\n}\\n\",\"keccak256\":\"0x5d51fcb66e914930fdce04f8bbc1cc6868ed37c5ade0b404cf117bb81fb077ed\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseOwnerActions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseOwnerActions is IClearingHouseStructures {\\n    /// @notice updates the collataral settings\\n    /// @param cToken collateral token\\n    /// @param collateralSettings settings\\n    function updateCollateralSettings(IERC20 cToken, CollateralSettings memory collateralSettings) external;\\n\\n    /// @notice updates the rage trade pool settings\\n    /// @param poolId rage trade pool id\\n    /// @param newSettings updated rage trade pool settings\\n    function updatePoolSettings(uint32 poolId, PoolSettings calldata newSettings) external;\\n\\n    /// @notice updates the protocol settings\\n    /// @param liquidationParams liquidation params\\n    /// @param removeLimitOrderFee fee for remove limit order\\n    /// @param minimumOrderNotional minimum order notional\\n    /// @param minRequiredMargin minimum required margin\\n    function updateProtocolSettings(\\n        LiquidationParams calldata liquidationParams,\\n        uint256 removeLimitOrderFee,\\n        uint256 minimumOrderNotional,\\n        uint256 minRequiredMargin\\n    ) external;\\n\\n    /// @notice withdraws protocol fees collected in the supplied wrappers to team multisig\\n    /// @param wrapperAddresses list of wrapper addresses to collect fees from\\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external;\\n}\\n\",\"keccak256\":\"0x35e0108d35e64cb32c649403faab1c01a3562d179647ebf57736a83fc1126fac\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseStructures.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IOracle } from '../IOracle.sol';\\nimport { IVToken } from '../IVToken.sol';\\nimport { IVPoolWrapper } from '../IVPoolWrapper.sol';\\n\\nimport { IClearingHouseEnums } from './IClearingHouseEnums.sol';\\n\\ninterface IClearingHouseStructures is IClearingHouseEnums {\\n    struct Collateral {\\n        IERC20 token;\\n        CollateralSettings settings; // mutable by governance\\n    }\\n\\n    struct CollateralSettings {\\n        IOracle oracle;\\n        uint32 twapDuration;\\n        bool isAllowedForDeposit;\\n    }\\n\\n    struct Pool {\\n        IVToken vToken;\\n        IUniswapV3Pool vPool;\\n        IVPoolWrapper vPoolWrapper;\\n        PoolSettings settings; // mutable by governance\\n    }\\n\\n    struct PoolSettings {\\n        uint16 initialMarginRatio;\\n        uint16 maintainanceMarginRatio;\\n        uint32 twapDuration;\\n        bool isAllowedForTrade;\\n        bool isCrossMargined;\\n        IOracle oracle;\\n    }\\n\\n    struct LiquidityChangeParams {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int128 liquidityDelta;\\n        uint160 sqrtPriceCurrent;\\n        uint16 slippageToleranceBps;\\n        bool closeTokenPosition;\\n        LimitOrderType limitOrderType;\\n    }\\n\\n    /// @notice swaps params for specifying the swap params\\n    /// @param amount amount of tokens/vQuote to swap\\n    /// @param sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\\n    /// @param isNotional specifies whether the amount represents token amount (false) or vQuote amount(true)\\n    /// @param isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\\n    struct SwapParams {\\n        int256 amount;\\n        uint160 sqrtPriceLimit;\\n        bool isNotional;\\n        bool isPartialAllowed;\\n    }\\n\\n    /// @notice parameters to be used for account balance update\\n    /// @param vQuoteIncrease specifies the increase in vQuote balance\\n    /// @param vTokenIncrease specifies the increase in token balance\\n    /// @param traderPositionIncrease specifies the increase in trader position\\n    struct BalanceAdjustments {\\n        int256 vQuoteIncrease;\\n        int256 vTokenIncrease;\\n        int256 traderPositionIncrease;\\n    }\\n\\n    /// @notice parameters to be used for liquidation\\n    /// @param liquidationFeeFraction specifies the percentage of notional value liquidated to be charged as liquidation fees (scaled by 1e5)\\n    /// @param tokenLiquidationPriceDeltaBps specifies the price delta from current perp price at which the liquidator should get the position (scaled by 1e4)\\n    /// @param insuranceFundFeeShare specifies the fee share for insurance fund out of the total liquidation fee (scaled by 1e4)\\n    /// @param maxRangeLiquidationFees specifies the the maximum range liquidation fees (in settlement token amount decimals)\\n\\n    struct LiquidationParams {\\n        uint16 liquidationFeeFraction;\\n        uint16 tokenLiquidationPriceDeltaBps;\\n        uint16 insuranceFundFeeShareBps;\\n        uint128 maxRangeLiquidationFees;\\n    }\\n\\n    struct CollateralDepositView {\\n        IERC20 collateral;\\n        uint256 balance;\\n    }\\n\\n    struct VTokenPositionView {\\n        IVToken vToken;\\n        int256 balance; // vTokenLong - vTokenShort\\n        int256 netTraderPosition;\\n        int256 sumAX128Chkpt;\\n        LiquidityPositionView[] liquidityPositions;\\n    }\\n\\n    struct LiquidityPositionView {\\n        LimitOrderType limitOrderType;\\n        // the tick range of the position;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // the liquidity of the position\\n        uint128 liquidity;\\n        int256 vTokenAmountIn;\\n        // funding payment checkpoints\\n        int256 sumALastX128;\\n        int256 sumBInsideLastX128;\\n        int256 sumFpInsideLastX128;\\n        // fee growth inside\\n        uint256 sumFeeInsideLastX128;\\n    }\\n\\n    struct MulticallOperation {\\n        MulticallOperationType operationType;\\n        bytes data;\\n    }\\n\\n    struct SwapValues {\\n        int256 amountSpecified;\\n        int256 vTokenIn;\\n        int256 vQuoteIn;\\n        uint256 liquidityFees;\\n        uint256 protocolFees;\\n    }\\n}\\n\",\"keccak256\":\"0x5abe6a69818a5156e02aa1ab29b7bcd38f57132f83011cbbbe6c16a734960387\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseSystemActions.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IInsuranceFund } from '../IInsuranceFund.sol';\\nimport { IOracle } from '../IOracle.sol';\\nimport { IVQuote } from '../IVQuote.sol';\\nimport { IVToken } from '../IVToken.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseSystemActions is IClearingHouseStructures {\\n    /// @notice initializes clearing house contract\\n    /// @param rageTradeFactoryAddress rage trade factory address\\n    /// @param defaultCollateralToken address of default collateral token\\n    /// @param defaultCollateralTokenOracle address of default collateral token oracle\\n    /// @param insuranceFund address of insurance fund\\n    /// @param vQuote address of vQuote\\n    /// @param nativeOracle address of native oracle\\n    function __initialize_ClearingHouse(\\n        address rageTradeFactoryAddress,\\n        IERC20 defaultCollateralToken,\\n        IOracle defaultCollateralTokenOracle,\\n        IInsuranceFund insuranceFund,\\n        IVQuote vQuote,\\n        IOracle nativeOracle\\n    ) external;\\n\\n    function registerPool(Pool calldata poolInfo) external;\\n}\\n\",\"keccak256\":\"0x52411ab6783a19404b64c44a8f11e5b65f478af31575d14b84b6fe7fe5a07dd7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/clearinghouse/IClearingHouseView.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IVToken } from '../IVToken.sol';\\nimport { IVQuote } from '../IVQuote.sol';\\n\\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\\n\\ninterface IClearingHouseView is IClearingHouseStructures {\\n    function isPoolIdAvailable(uint32 truncated) external view returns (bool);\\n\\n    function getTwapPrices(IVToken vToken) external view returns (uint256 realPriceX128, uint256 virtualPriceX128);\\n\\n    /**\\n        Protocol.Info VIEW\\n     */\\n    function protocolInfo()\\n        external\\n        view\\n        returns (\\n            IVQuote vQuote,\\n            LiquidationParams memory liquidationParams,\\n            uint256 minRequiredMargin,\\n            uint256 removeLimitOrderFee,\\n            uint256 minimumOrderNotional\\n        );\\n\\n    function getPoolInfo(uint32 poolId) external view returns (Pool memory);\\n\\n    function getCollateralInfo(uint32 collateralId) external view returns (Collateral memory);\\n\\n    /**\\n        Account.UserInfo VIEW\\n     */\\n\\n    function getAccountInfo(uint256 accountId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            int256 vQuoteBalance,\\n            CollateralDepositView[] memory collateralDeposits,\\n            VTokenPositionView[] memory tokenPositions\\n        );\\n\\n    function getAccountMarketValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\\n        external\\n        view\\n        returns (int256 accountMarketValue, int256 requiredMargin);\\n\\n    function getAccountNetProfit(uint256 accountId) external view returns (int256 accountNetProfit);\\n\\n    function getNetTokenPosition(uint256 accountId, uint32 vTokenTruncatedAddess)\\n        external\\n        view\\n        returns (int256 netPosition);\\n}\\n\",\"keccak256\":\"0x642e17ada06c13e962030126e746f83693ba66ab009fa95a85111baf0ad96da7\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Bisection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @title Bisection Method\\n/// @notice https://en.wikipedia.org/wiki/Bisection_method\\nlibrary Bisection {\\n    error SolutionOutOfBounds(uint256 y_target, uint160 x_lower, uint160 x_upper);\\n\\n    /// @notice Finds the solution to the equation f(x) = y_target using the bisection method\\n    /// @param f: strictly increasing function f: uint160 -> uint256\\n    /// @param y_target: the target value of f(x)\\n    /// @param x_lower: the lower bound for x\\n    /// @param x_upper: the upper bound for x\\n    /// @return x_target: the rounded down solution to the equation f(x) = y_target\\n    function findSolution(\\n        function(uint160) pure returns (uint256) f,\\n        uint256 y_target,\\n        uint160 x_lower,\\n        uint160 x_upper\\n    ) internal pure returns (uint160) {\\n        // compute y at the bounds\\n        uint256 y_lower = f(x_lower);\\n        uint256 y_upper = f(x_upper);\\n\\n        // if y is out of the bounds then revert\\n        if (y_target < y_lower || y_target > y_upper) revert SolutionOutOfBounds(y_target, x_lower, x_upper);\\n\\n        // bisect repeatedly until the solution is within an error of 1 unit\\n        uint256 y_mid;\\n        uint160 x_mid;\\n        while (x_upper - x_lower > 1) {\\n            x_mid = x_lower + (x_upper - x_lower) / 2;\\n            y_mid = f(x_mid);\\n            if (y_mid > y_target) {\\n                x_upper = x_mid;\\n                y_upper = y_mid;\\n            } else {\\n                x_lower = x_mid;\\n                y_lower = y_mid;\\n            }\\n        }\\n\\n        // at this point, x_upper - x_lower is either 0 or 1\\n        // if it is 1 then check if x_upper is the solution, else return x_lower as the rounded down solution\\n        return x_lower != x_upper && f(x_upper) == y_target ? x_upper : x_lower;\\n    }\\n}\\n\",\"keccak256\":\"0x92da66e14fe6ad0b7a3b0984705d487fdca3afdd41e4944a8bf154f8de3f7564\",\"license\":\"MIT\"},\"contracts/libraries/PriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { Bisection } from './Bisection.sol';\\n\\n/// @title Price math functions\\nlibrary PriceMath {\\n    using FullMath for uint256;\\n\\n    error IllegalSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @notice Computes the square of a sqrtPriceX96 value\\n    /// @param sqrtPriceX96: input price in Q128 format\\n    /// @return priceX128 : the square root of the input price in Q96 format\\n    function toPriceX128(uint160 sqrtPriceX96) internal pure returns (uint256 priceX128) {\\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\\n            revert IllegalSqrtPrice(sqrtPriceX96);\\n        }\\n\\n        priceX128 = _toPriceX128(sqrtPriceX96);\\n    }\\n\\n    function _toPriceX128(uint160 sqrtPriceX96) private pure returns (uint256 priceX128) {\\n        priceX128 = uint256(sqrtPriceX96).mulDiv(sqrtPriceX96, 1 << 64);\\n    }\\n\\n    /// @notice Computes the square root of a priceX128 value\\n    /// @param priceX128: input price in Q128 format\\n    /// @return sqrtPriceX96 : the square root of the input price in Q96 format\\n    function toSqrtPriceX96(uint256 priceX128) internal pure returns (uint160 sqrtPriceX96) {\\n        // Uses bisection method to find solution to the equation toPriceX128(x) = priceX128\\n        sqrtPriceX96 = Bisection.findSolution(\\n            _toPriceX128,\\n            priceX128,\\n            TickMath.MIN_SQRT_RATIO,\\n            TickMath.MAX_SQRT_RATIO - 1\\n        );\\n\\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\\n            revert IllegalSqrtPrice(sqrtPriceX96);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58ae492fb79e539888c9c7e52e0cf34668dae193f5e77c1419f4905fc0631fbb\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nint256 constant ONE = 1;\\n\\n/// @title Signed math functions\\nlibrary SignedMath {\\n    function abs(int256 value) internal pure returns (int256) {\\n        return value > 0 ? value : -value;\\n    }\\n\\n    function absUint(int256 value) internal pure returns (uint256) {\\n        return uint256(abs(value));\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? ONE : -ONE;\\n    }\\n\\n    /// @notice Converts a signed integer into an unsigned integer and inverts positive bool if negative\\n    function extractSign(int256 a, bool positive) internal pure returns (uint256 _a, bool) {\\n        if (a < 0) {\\n            positive = !positive;\\n            _a = uint256(-a);\\n        } else {\\n            _a = uint256(a);\\n        }\\n        return (_a, positive);\\n    }\\n\\n    function extractSign(int256 a) internal pure returns (uint256 _a, bool) {\\n        return extractSign(a, true);\\n    }\\n}\\n\",\"keccak256\":\"0x655744d0559e2c9e09f612ff7d2c69cb71110f299ccb3c497ba7bb2cb04e5322\",\"license\":\"MIT\"},\"contracts/libraries/SimulateSwap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { LiquidityMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/LiquidityMath.sol';\\nimport { SwapMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/SwapMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\nimport { TickBitmapExtended } from './TickBitmapExtended.sol';\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @title Simulate Uniswap V3 Swaps\\nlibrary SimulateSwap {\\n    using SafeCast for uint256;\\n    using TickBitmapExtended for function(int16) external view returns (uint256);\\n\\n    error ZeroAmount();\\n\\n    struct SwapCache {\\n        // price at the beginning of the swap\\n        uint160 sqrtPriceX96Start;\\n        // tick at the beginning of the swap\\n        int24 tickStart;\\n        // the protocol fee for the input token\\n        uint8 feeProtocol;\\n        // liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the tick spacing of the pool\\n        int24 tickSpacing;\\n        // the lp fee share of the pool\\n        uint24 fee;\\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        // current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        // the tick associated with the current price\\n        int24 tick;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobalIncreaseX128;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        // the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n    }\\n\\n    function simulateSwap(\\n        IUniswapV3Pool v3Pool,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96\\n    ) internal returns (int256 amount0, int256 amount1) {\\n        return simulateSwap(v3Pool, zeroForOne, amountSpecified, sqrtPriceLimitX96, emptyFunction);\\n    }\\n\\n    function simulateSwap(\\n        IUniswapV3Pool v3Pool,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        function(bool, SwapCache memory, SwapState memory, StepComputations memory) onSwapStep\\n    ) internal returns (int256 amount0, int256 amount1) {\\n        return simulateSwap(v3Pool, zeroForOne, amountSpecified, sqrtPriceLimitX96, v3Pool.fee(), onSwapStep);\\n    }\\n\\n    function simulateSwap(\\n        IUniswapV3Pool v3Pool,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        uint24 v3PoolFee,\\n        function(bool, SwapCache memory, SwapState memory, StepComputations memory) onSwapStep\\n    ) internal returns (int256 amount0, int256 amount1) {\\n        if (amountSpecified == 0) revert ZeroAmount();\\n\\n        SwapCache memory cache;\\n        (cache.sqrtPriceX96Start, cache.tickStart, , , , cache.feeProtocol, ) = v3Pool.slot0();\\n        cache.liquidityStart = v3Pool.liquidity();\\n        cache.tickSpacing = v3Pool.tickSpacing();\\n        cache.fee = v3PoolFee;\\n\\n        require(\\n            zeroForOne\\n                ? sqrtPriceLimitX96 < cache.sqrtPriceX96Start && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\\n                : sqrtPriceLimitX96 > cache.sqrtPriceX96Start && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\\n            'SPL'\\n        );\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: cache.sqrtPriceX96Start,\\n            tick: cache.tickStart,\\n            feeGrowthGlobalIncreaseX128: 0,\\n            protocolFee: 0,\\n            liquidity: cache.liquidityStart\\n        });\\n\\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\\n            StepComputations memory step;\\n\\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\\n\\n            (step.tickNext, step.initialized) = v3Pool.tickBitmap.nextInitializedTickWithinOneWord(\\n                state.tick,\\n                cache.tickSpacing,\\n                zeroForOne\\n            );\\n\\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\\n            if (step.tickNext < TickMath.MIN_TICK) {\\n                step.tickNext = TickMath.MIN_TICK;\\n            } else if (step.tickNext > TickMath.MAX_TICK) {\\n                step.tickNext = TickMath.MAX_TICK;\\n            }\\n\\n            // get the price for the next tick\\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\\n\\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\\n                state.sqrtPriceX96,\\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\\n                    ? sqrtPriceLimitX96\\n                    : step.sqrtPriceNextX96,\\n                state.liquidity,\\n                state.amountSpecifiedRemaining,\\n                cache.fee\\n            );\\n\\n            if (exactInput) {\\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\\n                state.amountCalculated = state.amountCalculated - step.amountOut.toInt256();\\n            } else {\\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\\n                state.amountCalculated = state.amountCalculated + (step.amountIn + step.feeAmount).toInt256();\\n            }\\n\\n            // update global fee tracker\\n            if (state.liquidity > 0) {\\n                state.feeGrowthGlobalIncreaseX128 += FullMath.mulDiv(\\n                    step.feeAmount,\\n                    FixedPoint128.Q128,\\n                    state.liquidity\\n                );\\n            }\\n\\n            if (onSwapStep != emptyFunction) {\\n                onSwapStep(zeroForOne, cache, state, step);\\n            }\\n\\n            // shift tick if we reached the next price\\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\\n                // if the tick is initialized, adjust the liquidity\\n                if (step.initialized) {\\n                    (, int128 liquidityNet, , , , , , ) = v3Pool.ticks(step.tickNext);\\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\\n                    // safe because liquidityNet cannot be type(int128).min\\n                    if (zeroForOne) liquidityNet = -liquidityNet;\\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\\n                }\\n\\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\\n            }\\n        }\\n\\n        return\\n            zeroForOne == exactInput\\n                ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n                : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n    }\\n\\n    function emptyFunction(\\n        bool zeroForOne,\\n        SimulateSwap.SwapCache memory,\\n        SimulateSwap.SwapState memory,\\n        SimulateSwap.StepComputations memory\\n    ) internal view {}\\n}\\n\",\"keccak256\":\"0xf16fba901234267885bd21d70cca534b529a62ce9671e4486b53bb9b59b65b68\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { SignedMath } from './SignedMath.sol';\\n\\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @title Swap computation functions\\nlibrary SwapMath {\\n    using SignedMath for int256;\\n\\n    /// @dev This method mutates the data pointed by swapValues\\n    function beforeSwap(\\n        bool exactIn,\\n        bool swapVTokenForVQuote,\\n        uint24 uniswapFeePips,\\n        uint24 liquidityFeePips,\\n        uint24 protocolFeePips,\\n        IClearingHouseStructures.SwapValues memory swapValues\\n    ) internal pure {\\n        // inflate or deinfate to undo uniswap fees if necessary, and account for our fees\\n        if (exactIn) {\\n            if (swapVTokenForVQuote) {\\n                // CASE: exactIn vToken\\n                // fee: not now, will collect fee in vQuote after swap\\n                // inflate: for undoing the uniswap fees\\n                swapValues.amountSpecified = inflate(swapValues.amountSpecified, uniswapFeePips);\\n            } else {\\n                // CASE: exactIn vQuote\\n                // fee: remove fee and do smaller swap, so trader gets less vTokens\\n                // here, amountSpecified == swap amount + fee\\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\\n                    swapValues.amountSpecified,\\n                    AmountTypeEnum.VQUOTE_AMOUNT_PLUS_FEES,\\n                    liquidityFeePips,\\n                    protocolFeePips\\n                );\\n                swapValues.amountSpecified = includeFees(\\n                    swapValues.amountSpecified,\\n                    swapValues.liquidityFees + swapValues.protocolFees,\\n                    IncludeFeeEnum.SUBTRACT_FEE\\n                );\\n                // inflate: uniswap will collect fee so inflate to undo it\\n                swapValues.amountSpecified = inflate(swapValues.amountSpecified, uniswapFeePips);\\n            }\\n        } else {\\n            if (!swapVTokenForVQuote) {\\n                // CASE: exactOut vToken\\n                // fee: no need to collect fee as we want to collect fee in vQuote later\\n                // inflate: no need to inflate as uniswap collects fees in tokenIn\\n            } else {\\n                // CASE: exactOut vQuote\\n                // fee: buy more vQuote (short more vToken) so that fee can be removed in vQuote\\n                // here, amountSpecified + fee == swap amount\\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\\n                    swapValues.amountSpecified,\\n                    AmountTypeEnum.VQUOTE_AMOUNT_MINUS_FEES,\\n                    liquidityFeePips,\\n                    protocolFeePips\\n                );\\n                swapValues.amountSpecified = includeFees(\\n                    swapValues.amountSpecified,\\n                    swapValues.liquidityFees + swapValues.protocolFees,\\n                    IncludeFeeEnum.ADD_FEE\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev This method mutates the data pointed by swapValues\\n    function afterSwap(\\n        bool exactIn,\\n        bool swapVTokenForVQuote,\\n        uint24 uniswapFeePips,\\n        uint24 liquidityFeePips,\\n        uint24 protocolFeePips,\\n        IClearingHouseStructures.SwapValues memory swapValues\\n    ) internal pure {\\n        // swap is done so now adjusting vTokenIn and vQuoteIn amounts to remove uniswap fees and add our fees\\n        if (exactIn) {\\n            if (swapVTokenForVQuote) {\\n                // CASE: exactIn vToken\\n                // deinflate: vToken amount was inflated so that uniswap can collect fee\\n                swapValues.vTokenIn = deinflate(swapValues.vTokenIn, uniswapFeePips);\\n\\n                // fee: collect the fee, give less vQuote to trader\\n                // here, vQuoteIn == swap amount\\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\\n                    swapValues.vQuoteIn,\\n                    AmountTypeEnum.ZERO_FEE_VQUOTE_AMOUNT,\\n                    liquidityFeePips,\\n                    protocolFeePips\\n                );\\n                swapValues.vQuoteIn = includeFees(\\n                    swapValues.vQuoteIn,\\n                    swapValues.liquidityFees + swapValues.protocolFees,\\n                    IncludeFeeEnum.SUBTRACT_FEE\\n                );\\n            } else {\\n                // CASE: exactIn vQuote\\n                // deinflate: vQuote amount was inflated, hence need to deinflate for generating final statement\\n                swapValues.vQuoteIn = deinflate(swapValues.vQuoteIn, uniswapFeePips);\\n                // fee: fee is already removed before swap, lets include it to the final bill, so that trader pays for it\\n                swapValues.vQuoteIn = includeFees(\\n                    swapValues.vQuoteIn,\\n                    swapValues.liquidityFees + swapValues.protocolFees,\\n                    IncludeFeeEnum.ADD_FEE\\n                );\\n            }\\n        } else {\\n            if (!swapVTokenForVQuote) {\\n                // CASE: exactOut vToken\\n                // deinflate: uniswap want to collect fee in vQuote and hence ask more, so need to deinflate it\\n                swapValues.vQuoteIn = deinflate(swapValues.vQuoteIn, uniswapFeePips);\\n                // fee: collecting fees in vQuote\\n                // here, vQuoteIn == swap amount\\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\\n                    swapValues.vQuoteIn,\\n                    AmountTypeEnum.ZERO_FEE_VQUOTE_AMOUNT,\\n                    liquidityFeePips,\\n                    protocolFeePips\\n                );\\n                swapValues.vQuoteIn = includeFees(\\n                    swapValues.vQuoteIn,\\n                    swapValues.liquidityFees + swapValues.protocolFees,\\n                    IncludeFeeEnum.ADD_FEE\\n                );\\n            } else {\\n                // CASE: exactOut vQuote\\n                // deinflate: uniswap want to collect fee in vToken and hence ask more, so need to deinflate it\\n                swapValues.vTokenIn = deinflate(swapValues.vTokenIn, uniswapFeePips);\\n                // fee: already calculated before, subtract now\\n                swapValues.vQuoteIn = includeFees(\\n                    swapValues.vQuoteIn,\\n                    swapValues.liquidityFees + swapValues.protocolFees,\\n                    IncludeFeeEnum.SUBTRACT_FEE\\n                );\\n            }\\n        }\\n    }\\n\\n    function inflate(int256 amount, uint24 uniswapFeePips) internal pure returns (int256 inflated) {\\n        int256 fees = (amount * int256(uint256(uniswapFeePips))) / int24(1e6 - uniswapFeePips) + 1; // round up\\n        inflated = amount + fees;\\n    }\\n\\n    function deinflate(int256 inflated, uint24 uniswapFeePips) internal pure returns (int256 amount) {\\n        amount = (inflated * int24(1e6 - uniswapFeePips)) / 1e6;\\n    }\\n\\n    enum AmountTypeEnum {\\n        ZERO_FEE_VQUOTE_AMOUNT,\\n        VQUOTE_AMOUNT_MINUS_FEES,\\n        VQUOTE_AMOUNT_PLUS_FEES\\n    }\\n\\n    function calculateFees(\\n        int256 amount,\\n        AmountTypeEnum amountTypeEnum,\\n        uint24 liquidityFeePips,\\n        uint24 protocolFeePips\\n    ) internal pure returns (uint256 liquidityFees, uint256 protocolFees) {\\n        uint256 amountAbs = uint256(amount.abs());\\n        if (amountTypeEnum == AmountTypeEnum.VQUOTE_AMOUNT_MINUS_FEES) {\\n            // when amount is already subtracted by fees, we need to scale it up, so that\\n            // on calculating and subtracting fees on the scaled up value, we should get same amount\\n            amountAbs = (amountAbs * 1e6) / uint256(1e6 - liquidityFeePips - protocolFeePips);\\n        } else if (amountTypeEnum == AmountTypeEnum.VQUOTE_AMOUNT_PLUS_FEES) {\\n            // when amount is already added with fees, we need to scale it down, so that\\n            // on calculating and adding fees on the scaled down value, we should get same amount\\n            amountAbs = (amountAbs * 1e6) / uint256(1e6 + liquidityFeePips + protocolFeePips);\\n        }\\n        uint256 fees = (amountAbs * (liquidityFeePips + protocolFeePips)) / 1e6 + 1; // round up\\n        liquidityFees = (amountAbs * liquidityFeePips) / 1e6 + 1; // round up\\n        protocolFees = fees - liquidityFees;\\n    }\\n\\n    enum IncludeFeeEnum {\\n        ADD_FEE,\\n        SUBTRACT_FEE\\n    }\\n\\n    function includeFees(\\n        int256 amount,\\n        uint256 fees,\\n        IncludeFeeEnum includeFeeEnum\\n    ) internal pure returns (int256 amountAfterFees) {\\n        if ((amount > 0) == (includeFeeEnum == IncludeFeeEnum.ADD_FEE)) {\\n            amountAfterFees = amount + int256(fees);\\n        } else {\\n            amountAfterFees = amount - int256(fees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2939b8e734d2698d4fb3a1c12474f4c464b195534ccadd677042340f31e3b4f\",\"license\":\"MIT\"},\"contracts/libraries/TickBitmapExtended.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { BitMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/BitMath.sol';\\n\\n/// @title Tick bitmap extended functions\\n/// @dev Uses the bitmap from UniswapV3Pool\\nlibrary TickBitmapExtended {\\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\\n    /// @param tick The tick for which to compute the position\\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\\n    /// @return bitPos The bit position in the word where the flag is stored\\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\\n        wordPos = int16(tick >> 8);\\n        bitPos = uint8(uint24(tick % 256));\\n    }\\n\\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\\n    /// to the left (less than or equal to) or right (greater than) of the given tick\\n    /// @param self The mapping in which to compute the next initialized tick\\n    /// @param tick The starting tick\\n    /// @param tickSpacing The spacing between usable ticks\\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\\n    function nextInitializedTickWithinOneWord(\\n        function(int16) external view returns (uint256) self,\\n        int24 tick,\\n        int24 tickSpacing,\\n        bool lte\\n    ) internal view returns (int24 next, bool initialized) {\\n        int24 compressed = tick / tickSpacing;\\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\\n\\n        if (lte) {\\n            (int16 wordPos, uint8 bitPos) = position(compressed);\\n            // all the 1s at or to the right of the current bitPos\\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\\n            uint256 masked = self(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\\n                : (compressed - int24(uint24(bitPos))) * tickSpacing;\\n        } else {\\n            // start from the word of the next tick, since the current tick state doesn't matter\\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\\n            // all the 1s at or to the left of the bitPos\\n            uint256 mask = ~((1 << bitPos) - 1);\\n            uint256 masked = self(wordPos) & mask;\\n\\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\\n            initialized = masked != 0;\\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\\n            next = initialized\\n                ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\\n                : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x735a67782056c35d6f2665ecd42176c9d32a367ed74c56142fe0daaff705bb1a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UniswapV3PoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { PriceMath } from './PriceMath.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @title UniswapV3Pool helper functions\\nlibrary UniswapV3PoolHelper {\\n    using PriceMath for uint160;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    error UV3PH_IllegalTwapDuration(uint32 period);\\n    error UV3PH_OracleConsultFailed();\\n\\n    function tickCurrent(IUniswapV3Pool v3Pool) internal view returns (int24 tick) {\\n        (, tick, , , , , ) = v3Pool.slot0();\\n    }\\n\\n    function sqrtPriceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint160 sqrtPriceX96) {\\n        int24 tick;\\n        (sqrtPriceX96, tick, , , , , ) = v3Pool.slot0();\\n        // TODO remove this logic, fix the tests to make it work without the logic.\\n        // Sqrt price cannot be zero, unless the pool is uninitialized.\\n        // This is a hack to make the tests pass.\\n        if (sqrtPriceX96 == 0) {\\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\\n        }\\n    }\\n\\n    function priceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint256 priceX128) {\\n        uint160 sqrtPriceX96 = v3Pool.sqrtPriceCurrent();\\n        return sqrtPriceX96.toPriceX128();\\n    }\\n\\n    function twapSqrtPrice(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (uint160 sqrtPriceX96) {\\n        int24 _twapTick = pool.twapTick(twapDuration);\\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_twapTick);\\n    }\\n\\n    function twapTick(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (int24 _twapTick) {\\n        if (twapDuration == 0) {\\n            revert UV3PH_IllegalTwapDuration(0);\\n        }\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = twapDuration;\\n        secondAgos[1] = 0;\\n\\n        // this call will fail if period is bigger than MaxObservationPeriod\\n        try pool.observe(secondAgos) returns (int56[] memory tickCumulatives, uint160[] memory) {\\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n            int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int56(uint56(twapDuration)));\\n\\n            // Always round to negative infinity\\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(twapDuration)) != 0)) {\\n                timeWeightedAverageTick--;\\n            }\\n            return timeWeightedAverageTick;\\n        } catch {\\n            (, _twapTick, , , , , ) = pool.slot0();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe226a9af39c7a37e0736885c4ac18c3e2ff12c2f8a65293459a88d6fe481921b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/utils/SwapSimulator.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { SimulateSwap } from '../libraries/SimulateSwap.sol';\\nimport { SwapMath } from '../libraries/SwapMath.sol';\\nimport { UniswapV3PoolHelper } from '../libraries/UniswapV3PoolHelper.sol';\\n\\ncontract SwapSimulator {\\n    using SimulateSwap for IUniswapV3Pool;\\n\\n    struct SwapStep {\\n        SimulateSwap.SwapState state;\\n        SimulateSwap.StepComputations step;\\n    }\\n\\n    function simulateSwap(\\n        IClearingHouse clearingHouse,\\n        uint32 poolId,\\n        int256 amount,\\n        uint160 sqrtPriceLimitX96,\\n        bool isNotional\\n    )\\n        external\\n        returns (\\n            IClearingHouseStructures.SwapValues memory swapValues,\\n            uint160 sqrtPriceX96End,\\n            SimulateSwap.SwapCache memory cache,\\n            SwapStep[] memory steps\\n        )\\n    {\\n        // case isNotional true\\n        // amountSpecified is positive\\n        swapValues = _simulateSwap(\\n            clearingHouse,\\n            poolId,\\n            amount < 0,\\n            isNotional ? amount : -amount,\\n            sqrtPriceLimitX96,\\n            _onSwapStep\\n        );\\n\\n        cache = _cache;\\n        steps = _steps;\\n        sqrtPriceX96End = _sqrtPriceX96End;\\n        delete _cache;\\n        delete _steps;\\n        delete _sqrtPriceX96End;\\n    }\\n\\n    SimulateSwap.SwapCache _cache;\\n    SwapStep[] _steps;\\n    uint160 _sqrtPriceX96End;\\n\\n    function _onSwapStep(\\n        bool,\\n        SimulateSwap.SwapCache memory cache,\\n        SimulateSwap.SwapState memory state,\\n        SimulateSwap.StepComputations memory step\\n    ) internal {\\n        // for reading\\n        _cache = cache;\\n        _steps.push(SwapStep({ state: state, step: step }));\\n        _sqrtPriceX96End = state.sqrtPriceX96;\\n    }\\n\\n    function _simulateSwap(\\n        IClearingHouse clearingHouse,\\n        uint32 poolId,\\n        bool swapVTokenForVQuote, // zeroForOne\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        function(\\n            bool,\\n            SimulateSwap.SwapCache memory,\\n            SimulateSwap.SwapState memory,\\n            SimulateSwap.StepComputations memory\\n        ) onSwapStep\\n    ) internal returns (IClearingHouseStructures.SwapValues memory swapValues) {\\n        swapValues.amountSpecified = amountSpecified;\\n\\n        IClearingHouseStructures.Pool memory pool = clearingHouse.getPoolInfo(poolId);\\n\\n        bool exactIn = amountSpecified >= 0;\\n\\n        if (sqrtPriceLimitX96 == 0) {\\n            sqrtPriceLimitX96 = swapVTokenForVQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1;\\n        }\\n\\n        (uint24 uniswapFeePips, uint24 liquidityFeePips, uint24 protocolFeePips) = (\\n            pool.vPool.fee(),\\n            pool.vPoolWrapper.liquidityFeePips(),\\n            pool.vPoolWrapper.protocolFeePips()\\n        );\\n\\n        SwapMath.beforeSwap(\\n            exactIn,\\n            swapVTokenForVQuote,\\n            uniswapFeePips,\\n            liquidityFeePips,\\n            protocolFeePips,\\n            swapValues\\n        );\\n\\n        {\\n            // simulate swap and update our tick states\\n            (swapValues.vTokenIn, swapValues.vQuoteIn) = pool.vPool.simulateSwap(\\n                swapVTokenForVQuote,\\n                amountSpecified,\\n                sqrtPriceLimitX96,\\n                onSwapStep\\n            );\\n        }\\n\\n        SwapMath.afterSwap(exactIn, swapVTokenForVQuote, uniswapFeePips, liquidityFeePips, protocolFeePips, swapValues);\\n    }\\n}\\n\",\"keccak256\":\"0x691923c9c783ccb92dc0c2bc6795aae9ba2a4b136f130062fed5738cad24b651\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613130806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fbdeddde14610030575b600080fd5b61004361003e36600461272d565b61005c565b604051610053949392919061288e565b60405180910390f35b61008e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260606100e8898960008a12886100dd576100d88b61294e565b6100df565b8a5b8a6103ae6106b9565b6040805160c081018252600080546001600160a01b0381168352600160a01b8104600290810b602080860191909152600160b81b90920460ff16848601526001546001600160801b0381166060860152600160801b8104820b6080860152600160981b900462ffffff1660a085015280548551818402810184019096528086529599509296509293919284015b8282101561034b57838290600052602060002090600a0201604051806040016040529081600082016040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160149054906101000a900460020b60020b60020b8152602001600382015481526020016004820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160109054906101000a90046001600160801b03166001600160801b03166001600160801b0316815250508152602001600582016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900460020b60020b60020b81526020016000820160179054906101000a900460ff161515151581526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382015481526020016004820154815250508152505081526020019060010190610175565b5050600354600080546001600160c01b0319168155600180546001600160b01b03191690556001600160a01b03909116965092935061038f9260029250905061265c565b600380546001600160a01b031916905592989197509550909350915050565b826000808201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160176101000a81548160ff021916908360ff16021790555060608201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160010160106101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160136101000a81548162ffffff021916908362ffffff160217905550905050600260405180604001604052808481526020018381525090806001815401808255809150506001900390600052602060002090600a0201600090919091909150600082015181600001600082015181600001556020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548162ffffff021916908360020b62ffffff1602179055506080820151816003015560a08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060c08201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550505060208201518160050160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160176101000a81548160ff02191690831515021790555060608201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816002015560a0820151816003015560c08201518160040155505050508160400151600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b6106eb6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b838152604051635b3876a960e11b815263ffffffff871660048201526000906001600160a01b0389169063b670ed529060240161012060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076091906129e5565b905060008512156001600160a01b0385166107b1578661079e57610799600173fffd8963efd1fc6a506488495d951d5263988d26612acb565b6107ae565b6107ae6401000276a36001612af3565b94505b600080600084602001516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190612b1e565b85604001516001600160a01b03166386c8e9a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190612b1e565b86604001516001600160a01b031663fca6fbf26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190612b1e565b9250925092506108fc848b8585858b61093e565b6020850151610917906001600160a01b03168b8b8b8b6109e9565b6040880152602087015261092f848b8585858b610a69565b50505050509695505050505050565b851561099f57841561095d5780516109569085610b79565b81526109e1565b805161096c9060028585610bc4565b6080830181905260608301829052825161099292909161098b91612b43565b6001610cf1565b8082526109569085610b79565b846109a9576109e1565b80516109b89060018585610bc4565b608083018190526060830182905282516109de9290916109d791612b43565b6000610cf1565b81525b505050505050565b600080610a5b878787878b6001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190612b1e565b88610d36565b915091509550959350505050565b8515610af3578415610ac657610a8381602001518561144b565b60208201526040810151610a9a9060008585610bc4565b60808301819052606083018290526040830151610abc92909161098b91612b43565b60408201526109e1565b610ad481604001518561144b565b6040820181905260808201516060830151610abc92916109d791612b43565b84610b3c57610b0681604001518561144b565b60408201819052610b1a9060008585610bc4565b60808301819052606083018290526040830151610abc9290916109d791612b43565b610b4a81602001518561144b565b6020820152604081015160808201516060830151610b6c929161098b91612b43565b6040820152505050505050565b600080610b8983620f4240612b5b565b60020b610b9b62ffffff851686612b77565b610ba59190612c12565b610bb0906001612c40565b9050610bbc8185612c40565b949350505050565b6000806000610bd287611472565b90506001866002811115610be857610be8612c81565b1415610c295783610bfc86620f4240612b5b565b610c069190612b5b565b62ffffff16610c1882620f4240612c97565b610c229190612cb6565b9050610c7a565b6002866002811115610c3d57610c3d612c81565b1415610c7a5783610c5186620f4240612cca565b610c5b9190612cca565b62ffffff16610c6d82620f4240612c97565b610c779190612cb6565b90505b6000620f4240610c8a8688612cca565b610c999062ffffff1684612c97565b610ca39190612cb6565b610cae906001612b43565b9050620f4240610cc362ffffff881684612c97565b610ccd9190612cb6565b610cd8906001612b43565b9350610ce48482612ce8565b9250505094509492505050565b600080826001811115610d0657610d06612c81565b14600085131415610d2257610d1b8385612c40565b9050610d2f565b610d2c8385612cff565b90505b9392505050565b60008085610d5757604051631f2a200560e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152886001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190612d50565b5060ff1660408088019190915260029490940b6020808801919091526001600160a01b0395861687528451630d34328160e11b81529451958f1695631a68650295600480820196509294509092508290030181865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190612dfc565b6001600160801b03166060820152604080516334324e9f60e21b815290516001600160a01b038b169163d0c93a7c9160048083019260209291908290030181865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612e17565b60020b608082015262ffffff851660a082015287610f4b5780600001516001600160a01b0316866001600160a01b0316118015610f46575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038716105b610f7d565b80600001516001600160a01b0316866001600160a01b0316108015610f7d57506401000276a36001600160a01b038716115b610fb45760405162461bcd60e51b815260206004820152600360248201526214d41360ea1b60448201526064015b60405180910390fd5b6000808813905060006040518060e001604052808a81526020016000815260200184600001516001600160a01b03168152602001846020015160020b81526020016000815260200160006001600160801b0316815260200184606001516001600160801b031681525090505b8051158015906110465750876001600160a01b031681604001516001600160a01b031614155b15611406576040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260408201516001600160a01b039081168252606083015160808601516110b3928f1691635339c296918f611491565b1515604083015260020b60208201819052620d89e71913156110de57620d89e7196020820152611112565b6110eb620d89e719612e32565b60020b816020015160020b131561111257611109620d89e719612e32565b60020b60208201525b61111f81602001516116fd565b6001600160a01b031660608201526040820151611194908c611159578a6001600160a01b031683606001516001600160a01b031611611173565b8a6001600160a01b031683606001516001600160a01b0316105b611181578260600151611183565b8a5b60c0850151855160a0890151611a30565b60c085015260a084015260808301526001600160a01b03166040830152821561120c576111d38160c0015182608001516111ce9190612b43565b611c22565b825183906111e2908390612cff565b90525060a08101516111f390611c22565b82602001516112029190612cff565b6020830152611257565b6112198160a00151611c22565b82518390611228908390612c40565b90525060c08101516080820151611242916111ce91612b43565b82602001516112519190612c40565b60208301525b60c08201516001600160801b03161561129f5761128a8160c00151600160801b8460c001516001600160801b0316611c34565b8260800181815161129b9190612b43565b9052505b63ffffffff611ce28116908816146112c1576112c18b8584848b63ffffffff16565b80606001516001600160a01b031682604001516001600160a01b031614156113c95780604001511561139c57602081015160405163f30dba9360e01b815260029190910b60048201526000906001600160a01b038e169063f30dba939060240161010060405180830381865afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113639190612e55565b5050505050509150508b1561137e5761137b81612efb565b90505b61138c8360c0015182611ce8565b6001600160801b031660c0840152505b8a6113ab5780602001516113bc565b600181602001516113bc9190612f22565b60020b6060830152611400565b80600001516001600160a01b031682604001516001600160a01b031614611400576113f78260400151611d85565b60020b60608301525b50611020565b8115158a1515146114275760208101518151611422908b612cff565b611439565b8051611433908a612cff565b81602001515b94509450505050965096945050505050565b6000620f424061145b8382612b5b565b6114689060020b85612b77565b610d2f9190612c12565b6000808213611489576114848261294e565b61148b565b815b92915050565b6000808061149f8587612f6a565b905060008660020b1280156114bf57506114b98587612fa4565b60020b15155b156114d257806114ce81612fc6565b9150505b83156115d7576000806114e48361209e565b90925090506000600160ff831681901b906114ff9082612ce8565b6115099190612b43565b90506000818c8c866040518263ffffffff1660e01b8152600401611536919060019190910b815260200190565b602060405180830381865afa158015611553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115779190612fea565b1680151596509050856115a1578861159260ff851687612f22565b61159c9190613003565b6115cc565b886115ab826120bb565b6115b59085613090565b6115c29060ff1687612f22565b6115cc9190613003565b9650505050506116f2565b6000806115ed6115e88460016130b3565b61209e565b90925090506000611605600160ff841681901b612ce8565b1990506000818c8c866040518263ffffffff1660e01b8152600401611633919060019190910b815260200190565b602060405180830381865afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116749190612fea565b1680151596509050856116b4578861168d8460ff613090565b60ff1661169b8760016130b3565b6116a591906130b3565b6116af9190613003565b6116eb565b88836116bf8361215c565b6116c99190613090565b60ff166116d78760016130b3565b6116e191906130b3565b6116eb9190613003565b9650505050505b509550959350505050565b60008060008360020b12611714578260020b61171c565b8260020b6000035b9050620d89e88111156117555760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610fab565b60006001821661176957600160801b61177b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156117af576ffff97272373d413259a46990580e213a0260801c5b60048216156117ce576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156117ed576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561180c576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561182b576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561184a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611869576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611889576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156118a9576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156118c9576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156118e9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611909576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611929576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611949576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611969576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561198a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156119aa576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156119c9576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156119e6576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611a07578060001981611a0357611a03612bfc565b0490505b640100000000810615611a1b576001611a1e565b60005b60ff16602082901c0192505050919050565b60008080806001600160a01b03808916908a161015818712801590611ab5576000611a698989620f42400362ffffff16620f4240611c34565b905082611a8257611a7d8c8c8c6001612246565b611a8f565b611a8f8b8d8c60016122bf565b9550858110611aa0578a9650611aaf565b611aac8c8b8386612376565b96505b50611aff565b81611acc57611ac78b8b8b60006122bf565b611ad9565b611ad98a8c8b6000612246565b9350838860000310611aed57899550611aff565b611afc8b8a8a600003856123c2565b95505b6001600160a01b038a8116908716148215611b6257808015611b1e5750815b611b3457611b2f878d8c60016122bf565b611b36565b855b9550808015611b43575081155b611b5957611b54878d8c6000612246565b611b5b565b845b9450611bac565b808015611b6c5750815b611b8257611b7d8c888c6001612246565b611b84565b855b9550808015611b91575081155b611ba757611ba28c888c60006122bf565b611ba9565b845b94505b81158015611bbc57508860000385115b15611bc8578860000394505b818015611be757508a6001600160a01b0316876001600160a01b031614155b15611bf6578589039350611c13565b611c10868962ffffff168a620f42400362ffffff1661240e565b93505b50505095509550955095915050565b6000600160ff1b821061148957600080fd5b600080806000198587098587029250828110838203039150508060001415611c6e5760008411611c6357600080fd5b508290049050610d2f565b808411611c7a57600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b50505050565b60008082600f0b1215611d3957508082016001600160801b03808416908216106114845760405162461bcd60e51b81526020600482015260026024820152614c5360f01b6044820152606401610fab565b826001600160801b03168284019150816001600160801b0316101561148b5760405162461bcd60e51b81526020600482015260026024820152614c4160f01b6044820152606401610fab565b60006401000276a36001600160a01b03831610801590611dc1575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b611df15760405162461bcd60e51b81526020600482015260016024820152602960f91b6044820152606401610fab565b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110611e8557607f810383901c9150611e8f565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461208f57886001600160a01b0316612074826116fd565b6001600160a01b031611156120895781612091565b80612091565b815b9998505050505050505050565b600281900b60081d60006120b461010084612fa4565b9050915091565b60008082116120c957600080fd5b600160801b82106120dc57608091821c91015b6801000000000000000082106120f457604091821c91015b640100000000821061210857602091821c91015b62010000821061211a57601091821c91015b610100821061212b57600891821c91015b6010821061213b57600491821c91015b6004821061214b57600291821c91015b60028210612157576001015b919050565b600080821161216a57600080fd5b5060ff6001600160801b0382161561218557607f190161218d565b608082901c91505b67ffffffffffffffff8216156121a657603f19016121ae565b604082901c91505b63ffffffff8216156121c357601f19016121cb565b602082901c91505b61ffff8216156121de57600f19016121e6565b601082901c91505b60ff8216156121f85760071901612200565b600882901c91505b600f821615612212576003190161221a565b600482901c91505b600382161561222c5760011901612234565b600282901c91505b60018216156121575760001901919050565b6000836001600160a01b0316856001600160a01b03161115612266579293925b816122935761228e836001600160801b03168686036001600160a01b0316600160601b611c34565b6122b6565b6122b6836001600160801b03168686036001600160a01b0316600160601b61240e565b95945050505050565b6000836001600160a01b0316856001600160a01b031611156122df579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661230957600080fd5b8361233f57866001600160a01b031661232c8383896001600160a01b0316611c34565b8161233957612339612bfc565b0461236b565b61236b6123568383896001600160a01b031661240e565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161238d57600080fd5b6000846001600160801b0316116123a357600080fd5b816123b55761228e858585600161244e565b6122b6858585600161253b565b600080856001600160a01b0316116123d957600080fd5b6000846001600160801b0316116123ef57600080fd5b816124015761228e858585600061253b565b6122b6858585600061244e565b600061241b848484611c34565b90506000828061242d5761242d612bfc565b8486091115610d2f57600019811061244457600080fd5b6001019392505050565b600081156124c75760006001600160a01b038411156124845761247f84600160601b876001600160801b0316611c34565b6124a2565b6001600160801b038516606085901b816124a0576124a0612bfc565b045b90506124bf6124ba6001600160a01b03881683612636565b612646565b915050610bbc565b60006001600160a01b038411156124f5576124f084600160601b876001600160801b031661240e565b612512565b612512606085901b6001600160801b038716808204910615150190565b905080866001600160a01b03161161252957600080fd5b6001600160a01b038616039050610bbc565b600082612549575083610bbc565b600160601b600160e01b03606085901b1682156125e9576001600160a01b0386168481029085828161257d5761257d612bfc565b0414156125ae578181018281106125ac576125a283896001600160a01b03168361240e565b9350505050610bbc565b505b6125e0826125d5878a6001600160a01b031686816125ce576125ce612bfc565b0490612636565b808204910615150190565b92505050610bbc565b6001600160a01b0386168481029085828161260657612606612bfc565b0414801561261357508082115b61261c57600080fd5b8082036125a26124ba846001600160a01b038b168461240e565b8082018281101561148b57600080fd5b806001600160a01b038116811461215757600080fd5b50805460008255600a029060005260206000209081019061267d9190612680565b50565b5b808211156126f4576000808255600182018190556002820180546001600160b81b031916905560038201819055600482018190556005820180546001600160c01b03191690556006820180546001600160a01b031916905560078201819055600882018190556009820155600a01612681565b5090565b6001600160a01b038116811461267d57600080fd5b63ffffffff8116811461267d57600080fd5b801515811461267d57600080fd5b600080600080600060a0868803121561274557600080fd5b8535612750816126f8565b945060208601356127608161270d565b9350604086013592506060860135612777816126f8565b915060808601356127878161271f565b809150509295509295909350565b600081518084526020808501945080840160005b8381101561288357815180518051895284810151858a01526040808201516001600160a01b0316908a015260608082015160020b908a0152608080820151908a015260a0808201516001600160801b03908116918b019190915260c091820151169089015283015161286e60e089018260018060a01b03808251168352602082015160020b6020840152604082015115156040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b506101c09690960195908201906001016127a9565b509495945050505050565b60006101a0865183526020870151602084015260408701516040840152606087015160608401526080870151608084015260018060a01b0380871660a08501528086511660c085015250602085015160020b60e084015260ff6040860151166101008401526001600160801b03606086015116610120840152608085015160020b61014084015262ffffff60a0860151166101608401528061018084015261236b81840185612795565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82141561296457612964612938565b5060000390565b6040516080810167ffffffffffffffff8111828210171561299c57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160c0810167ffffffffffffffff8111828210171561299c57634e487b7160e01b600052604160045260246000fd5b805161ffff8116811461215757600080fd5b60008183036101208112156129f957600080fd5b612a0161296b565b8351612a0c816126f8565b81526020840151612a1c816126f8565b60208201526040840151612a2f816126f8565b604082015260c0605f1983011215612a4657600080fd5b612a4e6129a2565b9150612a5c606085016129d3565b8252612a6a608085016129d3565b602083015260a0840151612a7d8161270d565b604083015260c0840151612a908161271f565b606083015260e0840151612aa38161271f565b6080830152610100840151612ab7816126f8565b60a083015260608101919091529392505050565b60006001600160a01b0383811690831681811015612aeb57612aeb612938565b039392505050565b60006001600160a01b03828116848216808303821115612b1557612b15612938565b01949350505050565b600060208284031215612b3057600080fd5b815162ffffff81168114610d2f57600080fd5b60008219821115612b5657612b56612938565b500190565b600062ffffff83811690831681811015612aeb57612aeb612938565b60006001600160ff1b0381841382841380821686840486111615612b9d57612b9d612938565b600160ff1b6000871282811687830589121615612bbc57612bbc612938565b60008712925087820587128484161615612bd857612bd8612938565b87850587128184161615612bee57612bee612938565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b600082612c2157612c21612bfc565b600160ff1b821460001984141615612c3b57612c3b612938565b500590565b600080821280156001600160ff1b0384900385131615612c6257612c62612938565b600160ff1b8390038412811615612c7b57612c7b612938565b50500190565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615612cb157612cb1612938565b500290565b600082612cc557612cc5612bfc565b500490565b600062ffffff808316818516808303821115612b1557612b15612938565b600082821015612cfa57612cfa612938565b500390565b60008083128015600160ff1b850184121615612d1d57612d1d612938565b6001600160ff1b0384018313811615612d3857612d38612938565b50500390565b8051600281900b811461215757600080fd5b600080600080600080600060e0888a031215612d6b57600080fd5b8751612d76816126f8565b9650612d8460208901612d3e565b9550612d92604089016129d3565b9450612da0606089016129d3565b9350612dae608089016129d3565b925060a088015160ff81168114612dc457600080fd5b60c0890151909250612dd58161271f565b8091505092959891949750929550565b80516001600160801b038116811461215757600080fd5b600060208284031215612e0e57600080fd5b610d2f82612de5565b600060208284031215612e2957600080fd5b610d2f82612d3e565b60008160020b627fffff19811415612e4c57612e4c612938565b60000392915050565b600080600080600080600080610100898b031215612e7257600080fd5b612e7b89612de5565b9750602089015180600f0b8114612e9157600080fd5b80975050604089015195506060890151945060808901518060060b8114612eb757600080fd5b60a08a0151909450612ec8816126f8565b60c08a0151909350612ed98161270d565b60e08a0151909250612eea8161271f565b809150509295985092959890939650565b600081600f0b6f7fffffffffffffffffffffffffffffff19811415612e4c57612e4c612938565b60008160020b8360020b6000811281627fffff1901831281151615612f4957612f49612938565b81627fffff018313811615612f6057612f60612938565b5090039392505050565b60008160020b8360020b80612f8157612f81612bfc565b627fffff19821460001982141615612f9b57612f9b612938565b90059392505050565b60008260020b80612fb757612fb7612bfc565b808360020b0791505092915050565b60008160020b627fffff19811415612fe057612fe0612938565b6000190192915050565b600060208284031215612ffc57600080fd5b5051919050565b60008160020b8360020b627fffff60008213600084138383048511828216161561302f5761302f612938565b627fffff19600085128281168783058712161561304e5761304e612938565b6000871292508582058712848416161561306a5761306a612938565b8585058712818416161561308057613080612938565b5050509290910295945050505050565b600060ff821660ff8416808210156130aa576130aa612938565b90039392505050565b60008160020b8360020b6000821282627fffff038213811516156130d9576130d9612938565b82627fffff190382128116156130f1576130f1612938565b5001939250505056fea2646970667358221220943a273d0a9b94c04ef83d765565060bb31cc5348bb38a7e4fa0f71e6e476bde64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fbdeddde14610030575b600080fd5b61004361003e36600461272d565b61005c565b604051610053949392919061288e565b60405180910390f35b61008e6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260606100e8898960008a12886100dd576100d88b61294e565b6100df565b8a5b8a6103ae6106b9565b6040805160c081018252600080546001600160a01b0381168352600160a01b8104600290810b602080860191909152600160b81b90920460ff16848601526001546001600160801b0381166060860152600160801b8104820b6080860152600160981b900462ffffff1660a085015280548551818402810184019096528086529599509296509293919284015b8282101561034b57838290600052602060002090600a0201604051806040016040529081600082016040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820160149054906101000a900460020b60020b60020b8152602001600382015481526020016004820160009054906101000a90046001600160801b03166001600160801b03166001600160801b031681526020016004820160109054906101000a90046001600160801b03166001600160801b03166001600160801b0316815250508152602001600582016040518060e00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900460020b60020b60020b81526020016000820160179054906101000a900460ff161515151581526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382015481526020016004820154815250508152505081526020019060010190610175565b5050600354600080546001600160c01b0319168155600180546001600160b01b03191690556001600160a01b03909116965092935061038f9260029250905061265c565b600380546001600160a01b031916905592989197509550909350915050565b826000808201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160176101000a81548160ff021916908360ff16021790555060608201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160010160106101000a81548162ffffff021916908360020b62ffffff16021790555060a08201518160010160136101000a81548162ffffff021916908362ffffff160217905550905050600260405180604001604052808481526020018381525090806001815401808255809150506001900390600052602060002090600a0201600090919091909150600082015181600001600082015181600001556020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548162ffffff021916908360020b62ffffff1602179055506080820151816003015560a08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060c08201518160040160106101000a8154816001600160801b0302191690836001600160801b03160217905550505060208201518160050160008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548162ffffff021916908360020b62ffffff16021790555060408201518160000160176101000a81548160ff02191690831515021790555060608201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816002015560a0820151816003015560c08201518160040155505050508160400151600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b6106eb6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b838152604051635b3876a960e11b815263ffffffff871660048201526000906001600160a01b0389169063b670ed529060240161012060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076091906129e5565b905060008512156001600160a01b0385166107b1578661079e57610799600173fffd8963efd1fc6a506488495d951d5263988d26612acb565b6107ae565b6107ae6401000276a36001612af3565b94505b600080600084602001516001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190612b1e565b85604001516001600160a01b03166386c8e9a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190612b1e565b86604001516001600160a01b031663fca6fbf26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e89190612b1e565b9250925092506108fc848b8585858b61093e565b6020850151610917906001600160a01b03168b8b8b8b6109e9565b6040880152602087015261092f848b8585858b610a69565b50505050509695505050505050565b851561099f57841561095d5780516109569085610b79565b81526109e1565b805161096c9060028585610bc4565b6080830181905260608301829052825161099292909161098b91612b43565b6001610cf1565b8082526109569085610b79565b846109a9576109e1565b80516109b89060018585610bc4565b608083018190526060830182905282516109de9290916109d791612b43565b6000610cf1565b81525b505050505050565b600080610a5b878787878b6001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a559190612b1e565b88610d36565b915091509550959350505050565b8515610af3578415610ac657610a8381602001518561144b565b60208201526040810151610a9a9060008585610bc4565b60808301819052606083018290526040830151610abc92909161098b91612b43565b60408201526109e1565b610ad481604001518561144b565b6040820181905260808201516060830151610abc92916109d791612b43565b84610b3c57610b0681604001518561144b565b60408201819052610b1a9060008585610bc4565b60808301819052606083018290526040830151610abc9290916109d791612b43565b610b4a81602001518561144b565b6020820152604081015160808201516060830151610b6c929161098b91612b43565b6040820152505050505050565b600080610b8983620f4240612b5b565b60020b610b9b62ffffff851686612b77565b610ba59190612c12565b610bb0906001612c40565b9050610bbc8185612c40565b949350505050565b6000806000610bd287611472565b90506001866002811115610be857610be8612c81565b1415610c295783610bfc86620f4240612b5b565b610c069190612b5b565b62ffffff16610c1882620f4240612c97565b610c229190612cb6565b9050610c7a565b6002866002811115610c3d57610c3d612c81565b1415610c7a5783610c5186620f4240612cca565b610c5b9190612cca565b62ffffff16610c6d82620f4240612c97565b610c779190612cb6565b90505b6000620f4240610c8a8688612cca565b610c999062ffffff1684612c97565b610ca39190612cb6565b610cae906001612b43565b9050620f4240610cc362ffffff881684612c97565b610ccd9190612cb6565b610cd8906001612b43565b9350610ce48482612ce8565b9250505094509492505050565b600080826001811115610d0657610d06612c81565b14600085131415610d2257610d1b8385612c40565b9050610d2f565b610d2c8385612cff565b90505b9392505050565b60008085610d5757604051631f2a200560e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152886001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190612d50565b5060ff1660408088019190915260029490940b6020808801919091526001600160a01b0395861687528451630d34328160e11b81529451958f1695631a68650295600480820196509294509092508290030181865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190612dfc565b6001600160801b03166060820152604080516334324e9f60e21b815290516001600160a01b038b169163d0c93a7c9160048083019260209291908290030181865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612e17565b60020b608082015262ffffff851660a082015287610f4b5780600001516001600160a01b0316866001600160a01b0316118015610f46575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038716105b610f7d565b80600001516001600160a01b0316866001600160a01b0316108015610f7d57506401000276a36001600160a01b038716115b610fb45760405162461bcd60e51b815260206004820152600360248201526214d41360ea1b60448201526064015b60405180910390fd5b6000808813905060006040518060e001604052808a81526020016000815260200184600001516001600160a01b03168152602001846020015160020b81526020016000815260200160006001600160801b0316815260200184606001516001600160801b031681525090505b8051158015906110465750876001600160a01b031681604001516001600160a01b031614155b15611406576040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915260408201516001600160a01b039081168252606083015160808601516110b3928f1691635339c296918f611491565b1515604083015260020b60208201819052620d89e71913156110de57620d89e7196020820152611112565b6110eb620d89e719612e32565b60020b816020015160020b131561111257611109620d89e719612e32565b60020b60208201525b61111f81602001516116fd565b6001600160a01b031660608201526040820151611194908c611159578a6001600160a01b031683606001516001600160a01b031611611173565b8a6001600160a01b031683606001516001600160a01b0316105b611181578260600151611183565b8a5b60c0850151855160a0890151611a30565b60c085015260a084015260808301526001600160a01b03166040830152821561120c576111d38160c0015182608001516111ce9190612b43565b611c22565b825183906111e2908390612cff565b90525060a08101516111f390611c22565b82602001516112029190612cff565b6020830152611257565b6112198160a00151611c22565b82518390611228908390612c40565b90525060c08101516080820151611242916111ce91612b43565b82602001516112519190612c40565b60208301525b60c08201516001600160801b03161561129f5761128a8160c00151600160801b8460c001516001600160801b0316611c34565b8260800181815161129b9190612b43565b9052505b63ffffffff611ce28116908816146112c1576112c18b8584848b63ffffffff16565b80606001516001600160a01b031682604001516001600160a01b031614156113c95780604001511561139c57602081015160405163f30dba9360e01b815260029190910b60048201526000906001600160a01b038e169063f30dba939060240161010060405180830381865afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113639190612e55565b5050505050509150508b1561137e5761137b81612efb565b90505b61138c8360c0015182611ce8565b6001600160801b031660c0840152505b8a6113ab5780602001516113bc565b600181602001516113bc9190612f22565b60020b6060830152611400565b80600001516001600160a01b031682604001516001600160a01b031614611400576113f78260400151611d85565b60020b60608301525b50611020565b8115158a1515146114275760208101518151611422908b612cff565b611439565b8051611433908a612cff565b81602001515b94509450505050965096945050505050565b6000620f424061145b8382612b5b565b6114689060020b85612b77565b610d2f9190612c12565b6000808213611489576114848261294e565b61148b565b815b92915050565b6000808061149f8587612f6a565b905060008660020b1280156114bf57506114b98587612fa4565b60020b15155b156114d257806114ce81612fc6565b9150505b83156115d7576000806114e48361209e565b90925090506000600160ff831681901b906114ff9082612ce8565b6115099190612b43565b90506000818c8c866040518263ffffffff1660e01b8152600401611536919060019190910b815260200190565b602060405180830381865afa158015611553573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115779190612fea565b1680151596509050856115a1578861159260ff851687612f22565b61159c9190613003565b6115cc565b886115ab826120bb565b6115b59085613090565b6115c29060ff1687612f22565b6115cc9190613003565b9650505050506116f2565b6000806115ed6115e88460016130b3565b61209e565b90925090506000611605600160ff841681901b612ce8565b1990506000818c8c866040518263ffffffff1660e01b8152600401611633919060019190910b815260200190565b602060405180830381865afa158015611650573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116749190612fea565b1680151596509050856116b4578861168d8460ff613090565b60ff1661169b8760016130b3565b6116a591906130b3565b6116af9190613003565b6116eb565b88836116bf8361215c565b6116c99190613090565b60ff166116d78760016130b3565b6116e191906130b3565b6116eb9190613003565b9650505050505b509550959350505050565b60008060008360020b12611714578260020b61171c565b8260020b6000035b9050620d89e88111156117555760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610fab565b60006001821661176957600160801b61177b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156117af576ffff97272373d413259a46990580e213a0260801c5b60048216156117ce576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156117ed576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561180c576fffcb9843d60f6159c9db58835c9266440260801c5b602082161561182b576fff973b41fa98c081472e6896dfb254c00260801c5b604082161561184a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611869576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611889576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156118a9576ff987a7253ac413176f2b074cf7815e540260801c5b6104008216156118c9576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156118e9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611909576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611929576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611949576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611969576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561198a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156119aa576e5d6af8dedb81196699c329225ee6040260801c5b620400008216156119c9576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156119e6576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611a07578060001981611a0357611a03612bfc565b0490505b640100000000810615611a1b576001611a1e565b60005b60ff16602082901c0192505050919050565b60008080806001600160a01b03808916908a161015818712801590611ab5576000611a698989620f42400362ffffff16620f4240611c34565b905082611a8257611a7d8c8c8c6001612246565b611a8f565b611a8f8b8d8c60016122bf565b9550858110611aa0578a9650611aaf565b611aac8c8b8386612376565b96505b50611aff565b81611acc57611ac78b8b8b60006122bf565b611ad9565b611ad98a8c8b6000612246565b9350838860000310611aed57899550611aff565b611afc8b8a8a600003856123c2565b95505b6001600160a01b038a8116908716148215611b6257808015611b1e5750815b611b3457611b2f878d8c60016122bf565b611b36565b855b9550808015611b43575081155b611b5957611b54878d8c6000612246565b611b5b565b845b9450611bac565b808015611b6c5750815b611b8257611b7d8c888c6001612246565b611b84565b855b9550808015611b91575081155b611ba757611ba28c888c60006122bf565b611ba9565b845b94505b81158015611bbc57508860000385115b15611bc8578860000394505b818015611be757508a6001600160a01b0316876001600160a01b031614155b15611bf6578589039350611c13565b611c10868962ffffff168a620f42400362ffffff1661240e565b93505b50505095509550955095915050565b6000600160ff1b821061148957600080fd5b600080806000198587098587029250828110838203039150508060001415611c6e5760008411611c6357600080fd5b508290049050610d2f565b808411611c7a57600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b50505050565b60008082600f0b1215611d3957508082016001600160801b03808416908216106114845760405162461bcd60e51b81526020600482015260026024820152614c5360f01b6044820152606401610fab565b826001600160801b03168284019150816001600160801b0316101561148b5760405162461bcd60e51b81526020600482015260026024820152614c4160f01b6044820152606401610fab565b60006401000276a36001600160a01b03831610801590611dc1575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b611df15760405162461bcd60e51b81526020600482015260016024820152602960f91b6044820152606401610fab565b640100000000600160c01b03602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110611e8557607f810383901c9150611e8f565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461208f57886001600160a01b0316612074826116fd565b6001600160a01b031611156120895781612091565b80612091565b815b9998505050505050505050565b600281900b60081d60006120b461010084612fa4565b9050915091565b60008082116120c957600080fd5b600160801b82106120dc57608091821c91015b6801000000000000000082106120f457604091821c91015b640100000000821061210857602091821c91015b62010000821061211a57601091821c91015b610100821061212b57600891821c91015b6010821061213b57600491821c91015b6004821061214b57600291821c91015b60028210612157576001015b919050565b600080821161216a57600080fd5b5060ff6001600160801b0382161561218557607f190161218d565b608082901c91505b67ffffffffffffffff8216156121a657603f19016121ae565b604082901c91505b63ffffffff8216156121c357601f19016121cb565b602082901c91505b61ffff8216156121de57600f19016121e6565b601082901c91505b60ff8216156121f85760071901612200565b600882901c91505b600f821615612212576003190161221a565b600482901c91505b600382161561222c5760011901612234565b600282901c91505b60018216156121575760001901919050565b6000836001600160a01b0316856001600160a01b03161115612266579293925b816122935761228e836001600160801b03168686036001600160a01b0316600160601b611c34565b6122b6565b6122b6836001600160801b03168686036001600160a01b0316600160601b61240e565b95945050505050565b6000836001600160a01b0316856001600160a01b031611156122df579293925b600160601b600160e01b03606084901b166001600160a01b03868603811690871661230957600080fd5b8361233f57866001600160a01b031661232c8383896001600160a01b0316611c34565b8161233957612339612bfc565b0461236b565b61236b6123568383896001600160a01b031661240e565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161238d57600080fd5b6000846001600160801b0316116123a357600080fd5b816123b55761228e858585600161244e565b6122b6858585600161253b565b600080856001600160a01b0316116123d957600080fd5b6000846001600160801b0316116123ef57600080fd5b816124015761228e858585600061253b565b6122b6858585600061244e565b600061241b848484611c34565b90506000828061242d5761242d612bfc565b8486091115610d2f57600019811061244457600080fd5b6001019392505050565b600081156124c75760006001600160a01b038411156124845761247f84600160601b876001600160801b0316611c34565b6124a2565b6001600160801b038516606085901b816124a0576124a0612bfc565b045b90506124bf6124ba6001600160a01b03881683612636565b612646565b915050610bbc565b60006001600160a01b038411156124f5576124f084600160601b876001600160801b031661240e565b612512565b612512606085901b6001600160801b038716808204910615150190565b905080866001600160a01b03161161252957600080fd5b6001600160a01b038616039050610bbc565b600082612549575083610bbc565b600160601b600160e01b03606085901b1682156125e9576001600160a01b0386168481029085828161257d5761257d612bfc565b0414156125ae578181018281106125ac576125a283896001600160a01b03168361240e565b9350505050610bbc565b505b6125e0826125d5878a6001600160a01b031686816125ce576125ce612bfc565b0490612636565b808204910615150190565b92505050610bbc565b6001600160a01b0386168481029085828161260657612606612bfc565b0414801561261357508082115b61261c57600080fd5b8082036125a26124ba846001600160a01b038b168461240e565b8082018281101561148b57600080fd5b806001600160a01b038116811461215757600080fd5b50805460008255600a029060005260206000209081019061267d9190612680565b50565b5b808211156126f4576000808255600182018190556002820180546001600160b81b031916905560038201819055600482018190556005820180546001600160c01b03191690556006820180546001600160a01b031916905560078201819055600882018190556009820155600a01612681565b5090565b6001600160a01b038116811461267d57600080fd5b63ffffffff8116811461267d57600080fd5b801515811461267d57600080fd5b600080600080600060a0868803121561274557600080fd5b8535612750816126f8565b945060208601356127608161270d565b9350604086013592506060860135612777816126f8565b915060808601356127878161271f565b809150509295509295909350565b600081518084526020808501945080840160005b8381101561288357815180518051895284810151858a01526040808201516001600160a01b0316908a015260608082015160020b908a0152608080820151908a015260a0808201516001600160801b03908116918b019190915260c091820151169089015283015161286e60e089018260018060a01b03808251168352602082015160020b6020840152604082015115156040840152806060830151166060840152506080810151608083015260a081015160a083015260c081015160c08301525050565b506101c09690960195908201906001016127a9565b509495945050505050565b60006101a0865183526020870151602084015260408701516040840152606087015160608401526080870151608084015260018060a01b0380871660a08501528086511660c085015250602085015160020b60e084015260ff6040860151166101008401526001600160801b03606086015116610120840152608085015160020b61014084015262ffffff60a0860151166101608401528061018084015261236b81840185612795565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b82141561296457612964612938565b5060000390565b6040516080810167ffffffffffffffff8111828210171561299c57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160c0810167ffffffffffffffff8111828210171561299c57634e487b7160e01b600052604160045260246000fd5b805161ffff8116811461215757600080fd5b60008183036101208112156129f957600080fd5b612a0161296b565b8351612a0c816126f8565b81526020840151612a1c816126f8565b60208201526040840151612a2f816126f8565b604082015260c0605f1983011215612a4657600080fd5b612a4e6129a2565b9150612a5c606085016129d3565b8252612a6a608085016129d3565b602083015260a0840151612a7d8161270d565b604083015260c0840151612a908161271f565b606083015260e0840151612aa38161271f565b6080830152610100840151612ab7816126f8565b60a083015260608101919091529392505050565b60006001600160a01b0383811690831681811015612aeb57612aeb612938565b039392505050565b60006001600160a01b03828116848216808303821115612b1557612b15612938565b01949350505050565b600060208284031215612b3057600080fd5b815162ffffff81168114610d2f57600080fd5b60008219821115612b5657612b56612938565b500190565b600062ffffff83811690831681811015612aeb57612aeb612938565b60006001600160ff1b0381841382841380821686840486111615612b9d57612b9d612938565b600160ff1b6000871282811687830589121615612bbc57612bbc612938565b60008712925087820587128484161615612bd857612bd8612938565b87850587128184161615612bee57612bee612938565b505050929093029392505050565b634e487b7160e01b600052601260045260246000fd5b600082612c2157612c21612bfc565b600160ff1b821460001984141615612c3b57612c3b612938565b500590565b600080821280156001600160ff1b0384900385131615612c6257612c62612938565b600160ff1b8390038412811615612c7b57612c7b612938565b50500190565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615612cb157612cb1612938565b500290565b600082612cc557612cc5612bfc565b500490565b600062ffffff808316818516808303821115612b1557612b15612938565b600082821015612cfa57612cfa612938565b500390565b60008083128015600160ff1b850184121615612d1d57612d1d612938565b6001600160ff1b0384018313811615612d3857612d38612938565b50500390565b8051600281900b811461215757600080fd5b600080600080600080600060e0888a031215612d6b57600080fd5b8751612d76816126f8565b9650612d8460208901612d3e565b9550612d92604089016129d3565b9450612da0606089016129d3565b9350612dae608089016129d3565b925060a088015160ff81168114612dc457600080fd5b60c0890151909250612dd58161271f565b8091505092959891949750929550565b80516001600160801b038116811461215757600080fd5b600060208284031215612e0e57600080fd5b610d2f82612de5565b600060208284031215612e2957600080fd5b610d2f82612d3e565b60008160020b627fffff19811415612e4c57612e4c612938565b60000392915050565b600080600080600080600080610100898b031215612e7257600080fd5b612e7b89612de5565b9750602089015180600f0b8114612e9157600080fd5b80975050604089015195506060890151945060808901518060060b8114612eb757600080fd5b60a08a0151909450612ec8816126f8565b60c08a0151909350612ed98161270d565b60e08a0151909250612eea8161271f565b809150509295985092959890939650565b600081600f0b6f7fffffffffffffffffffffffffffffff19811415612e4c57612e4c612938565b60008160020b8360020b6000811281627fffff1901831281151615612f4957612f49612938565b81627fffff018313811615612f6057612f60612938565b5090039392505050565b60008160020b8360020b80612f8157612f81612bfc565b627fffff19821460001982141615612f9b57612f9b612938565b90059392505050565b60008260020b80612fb757612fb7612bfc565b808360020b0791505092915050565b60008160020b627fffff19811415612fe057612fe0612938565b6000190192915050565b600060208284031215612ffc57600080fd5b5051919050565b60008160020b8360020b627fffff60008213600084138383048511828216161561302f5761302f612938565b627fffff19600085128281168783058712161561304e5761304e612938565b6000871292508582058712848416161561306a5761306a612938565b8585058712818416161561308057613080612938565b5050509290910295945050505050565b600060ff821660ff8416808210156130aa576130aa612938565b90039392505050565b60008160020b8360020b6000821282627fffff038213811516156130d9576130d9612938565b82627fffff190382128116156130f1576130f1612938565b5001939250505056fea2646970667358221220943a273d0a9b94c04ef83d765565060bb31cc5348bb38a7e4fa0f71e6e476bde64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29164,
        "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
        "label": "_cache",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(SwapCache)14308_storage"
      },
      {
        "astId": 29168,
        "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
        "label": "_steps",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(SwapStep)29096_storage)dyn_storage"
      },
      {
        "astId": 29170,
        "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
        "label": "_sqrtPriceX96End",
        "offset": 0,
        "slot": "3",
        "type": "t_uint160"
      }
    ],
    "types": {
      "t_array(t_struct(SwapStep)29096_storage)dyn_storage": {
        "base": "t_struct(SwapStep)29096_storage",
        "encoding": "dynamic_array",
        "label": "struct SwapSimulator.SwapStep[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(StepComputations)14338_storage": {
        "encoding": "inplace",
        "label": "struct SimulateSwap.StepComputations",
        "members": [
          {
            "astId": 14325,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "sqrtPriceStartX96",
            "offset": 0,
            "slot": "0",
            "type": "t_uint160"
          },
          {
            "astId": 14327,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "tickNext",
            "offset": 20,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 14329,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "initialized",
            "offset": 23,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 14331,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "sqrtPriceNextX96",
            "offset": 0,
            "slot": "1",
            "type": "t_uint160"
          },
          {
            "astId": 14333,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "amountIn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 14335,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "amountOut",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14337,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "feeAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SwapCache)14308_storage": {
        "encoding": "inplace",
        "label": "struct SimulateSwap.SwapCache",
        "members": [
          {
            "astId": 14297,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "sqrtPriceX96Start",
            "offset": 0,
            "slot": "0",
            "type": "t_uint160"
          },
          {
            "astId": 14299,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "tickStart",
            "offset": 20,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 14301,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "feeProtocol",
            "offset": 23,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 14303,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "liquidityStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 14305,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "tickSpacing",
            "offset": 16,
            "slot": "1",
            "type": "t_int24"
          },
          {
            "astId": 14307,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "fee",
            "offset": 19,
            "slot": "1",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SwapState)14323_storage": {
        "encoding": "inplace",
        "label": "struct SimulateSwap.SwapState",
        "members": [
          {
            "astId": 14310,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "amountSpecifiedRemaining",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 14312,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "amountCalculated",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 14314,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "sqrtPriceX96",
            "offset": 0,
            "slot": "2",
            "type": "t_uint160"
          },
          {
            "astId": 14316,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "tick",
            "offset": 20,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 14318,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "feeGrowthGlobalIncreaseX128",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14320,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "protocolFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint128"
          },
          {
            "astId": 14322,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "liquidity",
            "offset": 16,
            "slot": "4",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(SwapStep)29096_storage": {
        "encoding": "inplace",
        "label": "struct SwapSimulator.SwapStep",
        "members": [
          {
            "astId": 29092,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(SwapState)14323_storage"
          },
          {
            "astId": 29095,
            "contract": "contracts/utils/SwapSimulator.sol:SwapSimulator",
            "label": "step",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(StepComputations)14338_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}