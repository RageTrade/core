{
  "address": "0xC4Dc80A68132f9efB5dD2481855607ac4663B5E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_flags",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_vTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_vQuoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "name": "IllegalAggregatorAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughHistory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SequencerOffline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "aggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkFlags",
      "outputs": [
        {
          "internalType": "contract FlagsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        }
      ],
      "name": "getTwapPriceX128",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceX128",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x171664511674170df7c2291fb574366303a045ab479c3bb5055b0370281b7899",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0xC4Dc80A68132f9efB5dD2481855607ac4663B5E0",
    "transactionIndex": 0,
    "gasUsed": "10026960",
    "logsBloom": "0x
    "blockHash": "0xa93ea9848b4322c7b7add2de037b5604834ea73d20c0314469641931fdf1b86f",
    "transactionHash": "0x171664511674170df7c2291fb574366303a045ab479c3bb5055b0370281b7899",
    "logs": [],
    "blockNumber": 11126465,
    "cumulativeGasUsed": "4335380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f0423B1a6935dc5596e7A24d98532b67A0AeFd8",
    "0x491B1dDA0A8fa069bbC1125133A975BF4e85a91b",
    18,
    6
  ],
  "numDeployments": 1,
  "solcInputHash": "9d3f6a0132a46af92b891a675524b4d4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flags\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_vTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_vQuoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"IllegalAggregatorAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughHistory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SequencerOffline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"aggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkFlags\",\"outputs\":[{\"internalType\":\"contract FlagsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"}],\"name\":\"getTwapPriceX128\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ChainlinkOracle.sol\":\"ChainlinkOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":833},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/FlagsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface FlagsInterface {\\n  function getFlag(address) external view returns (bool);\\n\\n  function getFlags(address[] calldata) external view returns (bool[] memory);\\n\\n  function raiseFlag(address) external;\\n\\n  function raiseFlags(address[] calldata) external;\\n\\n  function lowerFlags(address[] calldata) external;\\n\\n  function setRaisingAccessController(address) external;\\n}\\n\",\"keccak256\":\"0x1c43c08e51038f968848bc7823233b01c931b33f43d71eb3d81b8d37087b3ca5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4c12bf820c0b011f5490a209960ca34dd8af34660ef9e01de0438393d15e3fd8\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IOracle {\\n    function getTwapPriceX128(uint32 twapDuration) external view returns (uint256 priceX128);\\n}\\n\",\"keccak256\":\"0xe98d764bed7fc805dd2bb3aae8bf7b2f1cc66e42e15b61852840f28ea3b7d1e1\",\"license\":\"MIT\"},\"contracts/interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setVPoolWrapper(address) external;\\n}\\n\",\"keccak256\":\"0x699675a44160b54b098f05556fce3c0f8fb1cec57adfb028daf2a0568aa5b245\",\"license\":\"MIT\"},\"contracts/libraries/AddressHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\n/// @title Address helper functions\\nlibrary AddressHelper {\\n    /// @notice Convert address to uint32, using the least significant 32 bits\\n    /// @param addr Address to convert\\n    /// @return truncated last 4 bytes of the address\\n    function truncate(address addr) internal pure returns (uint32 truncated) {\\n        assembly {\\n            truncated := and(addr, 0xffffffff)\\n        }\\n    }\\n\\n    function truncate(IERC20 addr) internal pure returns (uint32 truncated) {\\n        return truncate(address(addr));\\n    }\\n\\n    function eq(address a, address b) internal pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    function eq(IERC20 a, IERC20 b) internal pure returns (bool) {\\n        return eq(address(a), address(b));\\n    }\\n\\n    function isZero(address a) internal pure returns (bool) {\\n        return a == address(0);\\n    }\\n\\n    function isZero(IERC20 a) internal pure returns (bool) {\\n        return isZero(address(a));\\n    }\\n}\\n\",\"keccak256\":\"0x5fee0cb1dcf501d0fed236300258070da27e3fe3df39db80df41c70f7e799699\",\"license\":\"MIT\"},\"contracts/libraries/Bisection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n/// @title Bisection Method\\n/// @notice https://en.wikipedia.org/wiki/Bisection_method\\nlibrary Bisection {\\n    error SolutionOutOfBounds(uint256 y_target, uint160 x_lower, uint160 x_upper);\\n\\n    /// @notice Finds the solution to the equation f(x) = y_target using the bisection method\\n    /// @param f: strictly increasing function f: uint160 -> uint256\\n    /// @param y_target: the target value of f(x)\\n    /// @param x_lower: the lower bound for x\\n    /// @param x_upper: the upper bound for x\\n    /// @return x_target: the rounded down solution to the equation f(x) = y_target\\n    function findSolution(\\n        function(uint160) pure returns (uint256) f,\\n        uint256 y_target,\\n        uint160 x_lower,\\n        uint160 x_upper\\n    ) internal pure returns (uint160) {\\n        // compute y at the bounds\\n        uint256 y_lower = f(x_lower);\\n        uint256 y_upper = f(x_upper);\\n\\n        // if y is out of the bounds then revert\\n        if (y_target < y_lower || y_target > y_upper) revert SolutionOutOfBounds(y_target, x_lower, x_upper);\\n\\n        // bisect repeatedly until the solution is within an error of 1 unit\\n        uint256 y_mid;\\n        uint160 x_mid;\\n        while (x_upper - x_lower > 1) {\\n            x_mid = x_lower + (x_upper - x_lower) / 2;\\n            y_mid = f(x_mid);\\n            if (y_mid > y_target) {\\n                x_upper = x_mid;\\n                y_upper = y_mid;\\n            } else {\\n                x_lower = x_mid;\\n                y_lower = y_mid;\\n            }\\n        }\\n\\n        // at this point, x_upper - x_lower is either 0 or 1\\n        // if it is 1 then check if x_upper is the solution, else return x_lower as the rounded down solution\\n        return x_lower != x_upper && f(x_upper) == y_target ? x_upper : x_lower;\\n    }\\n}\\n\",\"keccak256\":\"0x2075fe39689855e3b604cf962794f9ec838c480eeaf24a5d9f8823e02c209152\",\"license\":\"MIT\"},\"contracts/libraries/PriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { Bisection } from './Bisection.sol';\\n\\n/// @title Price math functions\\nlibrary PriceMath {\\n    using FullMath for uint256;\\n\\n    error IllegalSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @notice Computes the square of a sqrtPriceX96 value\\n    /// @param sqrtPriceX96: input price in Q128 format\\n    /// @return priceX128 : the square root of the input price in Q96 format\\n    function toPriceX128(uint160 sqrtPriceX96) internal pure returns (uint256 priceX128) {\\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\\n            revert IllegalSqrtPrice(sqrtPriceX96);\\n        }\\n\\n        priceX128 = _toPriceX128(sqrtPriceX96);\\n    }\\n\\n    function _toPriceX128(uint160 sqrtPriceX96) private pure returns (uint256 priceX128) {\\n        priceX128 = uint256(sqrtPriceX96).mulDiv(sqrtPriceX96, 1 << 64);\\n    }\\n\\n    /// @notice Computes the square root of a priceX128 value\\n    /// @param priceX128: input price in Q128 format\\n    /// @return sqrtPriceX96 : the square root of the input price in Q96 format\\n    function toSqrtPriceX96(uint256 priceX128) internal pure returns (uint160 sqrtPriceX96) {\\n        // Uses bisection method to find solution to the equation toPriceX128(x) = priceX128\\n        sqrtPriceX96 = Bisection.findSolution(\\n            _toPriceX128,\\n            priceX128,\\n            /// @dev sqrtPriceX96 is always bounded by MIN_SQRT_RATIO and MAX_SQRT_RATIO.\\n            ///     If solution falls outside of these bounds, findSolution method reverts\\n            TickMath.MIN_SQRT_RATIO,\\n            TickMath.MAX_SQRT_RATIO - 1\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8f6c36a6b671efeb83ce5cfdd8b5c8fbca7ee1eef3209ad8ebffbd38b3b8986f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/oracles/ChainlinkOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.9;\\n\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport { FlagsInterface } from '@chainlink/contracts/src/v0.8/interfaces/FlagsInterface.sol';\\n\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\n\\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\\nimport { PriceMath } from '../libraries/PriceMath.sol';\\n\\nimport { IOracle } from '../interfaces/IOracle.sol';\\n\\ncontract ChainlinkOracle is IOracle {\\n    using AddressHelper for address;\\n    using FullMath for uint256;\\n    using SafeCast for uint256;\\n    using PriceMath for uint256;\\n\\n    AggregatorV3Interface public aggregator;\\n    FlagsInterface public chainlinkFlags;\\n\\n    uint8 immutable vTokenDecimals;\\n    uint8 immutable vQuoteDecimals;\\n    address private constant FLAG_ARBITRUM_SEQ_OFFLINE =\\n        address(bytes20(bytes32(uint256(keccak256('chainlink.flags.arbitrum-seq-offline')) - 1)));\\n\\n    error NotEnoughHistory();\\n    error SequencerOffline();\\n    error IllegalAggregatorAddress(address aggregator);\\n\\n    constructor(\\n        address _aggregator,\\n        address _flags,\\n        uint8 _vTokenDecimals,\\n        uint8 _vQuoteDecimals\\n    ) {\\n        if (_aggregator.isZero()) revert IllegalAggregatorAddress(address(0));\\n        aggregator = AggregatorV3Interface(_aggregator);\\n        chainlinkFlags = FlagsInterface(_flags);\\n        vTokenDecimals = _vTokenDecimals;\\n        vQuoteDecimals = _vQuoteDecimals;\\n    }\\n\\n    function getTwapPriceX128(uint32 twapDuration) public view returns (uint256 priceX128) {\\n        priceX128 = getPrice(twapDuration);\\n        priceX128 = priceX128.mulDiv(\\n            FixedPoint128.Q128 * 10**(vQuoteDecimals),\\n            10**(vTokenDecimals + aggregator.decimals())\\n        );\\n    }\\n\\n    function getPrice(uint256 twapDuration) internal view returns (uint256) {\\n        FlagsInterface _chainlinkFlags = chainlinkFlags;\\n        if (address(_chainlinkFlags) != address(0)) {\\n            bool isRaised = _chainlinkFlags.getFlag(FLAG_ARBITRUM_SEQ_OFFLINE);\\n            if (isRaised) {\\n                revert SequencerOffline();\\n            }\\n        }\\n        (uint80 round, uint256 latestPrice, uint256 latestTS) = _getLatestRoundData();\\n        uint256 endTS = block.timestamp;\\n        uint256 thresholdTS = endTS - twapDuration;\\n\\n        //If twap duration = 0 or less data available just return latestPrice\\n        if (twapDuration == 0 || round == 0 || latestTS <= thresholdTS) {\\n            return latestPrice;\\n        }\\n\\n        uint256 totalTime = endTS - latestTS;\\n        uint256 twap = latestPrice * totalTime;\\n        uint256 periodLength;\\n        uint256 startTS;\\n        uint256 periodPrice;\\n\\n        endTS = latestTS;\\n\\n        //Aggregate prices for all the eligible rounds before thresholdTS i.e. adds price*periodLength to twap\\n        //For the last eligible round goes till thresholdTS only\\n        while (true) {\\n            //If 0 round is reached before reaching thresholdTS then just consider the available data\\n            if (round == 0) {\\n                return totalTime == 0 ? latestPrice : twap / totalTime;\\n            }\\n\\n            round = round - 1;\\n            (, periodPrice, startTS) = _getRoundData(round);\\n            if (periodPrice == 0) break;\\n            //If the starting time of a period is lesser than threshold timestamp (now-twapDuration) then period is thresholdTS -> endTS\\n            if (startTS <= thresholdTS) {\\n                periodLength = (endTS - thresholdTS);\\n                twap += periodPrice * periodLength;\\n                totalTime += periodLength;\\n                break;\\n            }\\n\\n            // In normal case where thresholdTS < startTS. The whole period is considered i.e. startTS -> endTS\\n            periodLength = (endTS - startTS);\\n            twap += (periodPrice * periodLength);\\n            totalTime += periodLength;\\n\\n            //endTS of previous period = startTS of current period\\n            endTS = startTS;\\n        }\\n\\n        //Divide the accumulated value by the whole duration\\n        return twap == 0 ? latestPrice : twap / totalTime;\\n    }\\n\\n    function _getLatestRoundData()\\n        private\\n        view\\n        returns (\\n            uint80,\\n            uint256 finalPrice,\\n            uint256\\n        )\\n    {\\n        (uint80 round, int256 latestPrice, , uint256 latestTS, ) = aggregator.latestRoundData();\\n\\n        if (latestPrice < 0 && round <= 0) revert NotEnoughHistory();\\n\\n        if (latestPrice < 0) {\\n            (round, finalPrice, latestTS) = _getRoundData(round - 1);\\n        } else {\\n            finalPrice = uint256(latestPrice);\\n        }\\n        return (round, finalPrice, latestTS);\\n    }\\n\\n    function _getRoundData(uint80 _round)\\n        private\\n        view\\n        returns (\\n            uint80,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (uint80 round, int256 latestPrice, , uint256 latestTS, ) = _getRoundDataWithCheck(_round);\\n        while (latestPrice < 0 && round > 0) {\\n            round = round - 1;\\n            (, latestPrice, , latestTS, ) = aggregator.getRoundData(round);\\n        }\\n        if (latestPrice < 0 && round <= 0) revert NotEnoughHistory();\\n        return (round, uint256(latestPrice), latestTS);\\n    }\\n\\n    function _getRoundDataWithCheck(uint80 _round)\\n        private\\n        view\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        )\\n    {\\n        try aggregator.getRoundData(_round) returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        ) {\\n            return (roundId, answer, startedAt, updatedAt, answeredInRound);\\n        } catch {\\n            return (0, 0, 0, 0, 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1e5aed823360981172a6ec44ea89b0e26fc1c9c878e234a5af835f216eacc3ae\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610bb3380380610bb383398101604081905261002f916100eb565b61004b846001600160a01b03166100b160201b6101be1760201c565b156100705760405163091b998160e11b81526000600482015260240160405180910390fd5b600080546001600160a01b039586166001600160a01b031991821617909155600180549490951693169290921790925560ff9182166080521660a05261013f565b6001600160a01b03161590565b80516001600160a01b03811681146100d557600080fd5b919050565b805160ff811681146100d557600080fd5b6000806000806080858703121561010157600080fd5b61010a856100be565b9350610118602086016100be565b9250610126604086016100da565b9150610134606086016100da565b905092959194509250565b60805160a051610a50610163600039600060c5015260006101810152610a506000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063245a7bfc14610046578063dd86c10114610076578063e4440e0214610097575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610089610084366004610777565b6100aa565b60405190815260200161006d565b600154610059906001600160a01b031681565b60006100bb8263ffffffff166101cb565b90506101b86100eb7f0000000000000000000000000000000000000000000000000000000000000000600a610897565b610106907001000000000000000000000000000000006108a6565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017b91906108c5565b6101a5907f00000000000000000000000000000000000000000000000000000000000000006108e8565b6101b090600a610897565b839190610412565b92915050565b6001600160a01b03161590565b6001546000906001600160a01b031680156102ba5760006001600160a01b03821663357e47fe61021c60017fa438451d6458044c3c8cd2f6f31c91ac882a6d917fa1d50c2bc3074c4524952d61090d565b60405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260609190911c6004820152602401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610924565b905080156102b85760405163db502a6760e01b815260040160405180910390fd5b505b60008060006102c76104c5565b919450925090504260006102db888361090d565b90508715806102f4575069ffffffffffffffffffff8516155b806102ff5750808311155b156103105750919695505050505050565b600061031c848461090d565b9050600061032a82876108a6565b905060008060008796505b8969ffffffffffffffffffff1660000361037157841561035e576103598585610946565b610360565b885b9d9c50505050505050505050505050565b61037c60018b610968565b99506103878a6105bc565b93509150508015610402578582116103cc576103a3868861090d565b92506103af83826108a6565b6103b99085610993565b93506103c58386610993565b9450610402565b6103d6828861090d565b92506103e283826108a6565b6103ec9085610993565b93506103f88386610993565b9450819650610335565b831561035e576103598585610946565b600080806000198587098587029250828110838203039150508060000361044b576000841161044057600080fd5b5082900490506104be565b80841161045757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906109ca565b5093505092509250600082128015610565575069ffffffffffffffffffff8316155b1561058357604051639ee522a960e01b815260040160405180910390fd5b60008212156105ac5761059f61059a600185610968565b6105bc565b90965090935090506105b0565b8194505b91959394509092915050565b6000806000806000806105ce876106d0565b50935050925092505b6000821280156105f3575060008369ffffffffffffffffffff16115b1561068b57610603600184610968565b600054604051639a6fc8f560e01b815269ffffffffffffffffffff831660048201529194506001600160a01b031690639a6fc8f59060240160a060405180830381865afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906109ca565b509194509092506105d7915050565b6000821280156106a5575069ffffffffffffffffffff8316155b156106c357604051639ee522a960e01b815260040160405180910390fd5b9196909550909350915050565b60008054604051639a6fc8f560e01b815269ffffffffffffffffffff8416600482015282918291829182916001600160a01b0390911690639a6fc8f59060240160a060405180830381865afa925050508015610749575060408051601f3d908101601f19168201909252610746918101906109ca565b60015b6107615750600093508392508291508190508061076e565b9398509196509450925090505b91939590929450565b60006020828403121561078957600080fd5b813563ffffffff811681146104be57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156107ee5781600019048211156107d4576107d461079d565b808516156107e157918102915b93841c93908002906107b8565b509250929050565b600082610805575060016101b8565b81610812575060006101b8565b816001811461082857600281146108325761084e565b60019150506101b8565b60ff8411156108435761084361079d565b50506001821b6101b8565b5060208310610133831016604e8410600b8410161715610871575081810a6101b8565b61087b83836107b3565b806000190482111561088f5761088f61079d565b029392505050565b60006104be60ff8416836107f6565b60008160001904831182151516156108c0576108c061079d565b500290565b6000602082840312156108d757600080fd5b815160ff811681146104be57600080fd5b600060ff821660ff84168060ff038211156109055761090561079d565b019392505050565b60008282101561091f5761091f61079d565b500390565b60006020828403121561093657600080fd5b815180151581146104be57600080fd5b60008261096357634e487b7160e01b600052601260045260246000fd5b500490565b600069ffffffffffffffffffff8381169083168181101561098b5761098b61079d565b039392505050565b600082198211156109a6576109a661079d565b500190565b805169ffffffffffffffffffff811681146109c557600080fd5b919050565b600080600080600060a086880312156109e257600080fd5b6109eb866109ab565b9450602086015193506040860151925060608601519150610a0e608087016109ab565b9050929550929590935056fea2646970667358221220d97b2f1246ca5652d052e123eec1e145af9143bd1197c796a64a047449d91e4064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063245a7bfc14610046578063dd86c10114610076578063e4440e0214610097575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610089610084366004610777565b6100aa565b60405190815260200161006d565b600154610059906001600160a01b031681565b60006100bb8263ffffffff166101cb565b90506101b86100eb7f0000000000000000000000000000000000000000000000000000000000000000600a610897565b610106907001000000000000000000000000000000006108a6565b60008054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017b91906108c5565b6101a5907f00000000000000000000000000000000000000000000000000000000000000006108e8565b6101b090600a610897565b839190610412565b92915050565b6001600160a01b03161590565b6001546000906001600160a01b031680156102ba5760006001600160a01b03821663357e47fe61021c60017fa438451d6458044c3c8cd2f6f31c91ac882a6d917fa1d50c2bc3074c4524952d61090d565b60405160e083901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260609190911c6004820152602401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610924565b905080156102b85760405163db502a6760e01b815260040160405180910390fd5b505b60008060006102c76104c5565b919450925090504260006102db888361090d565b90508715806102f4575069ffffffffffffffffffff8516155b806102ff5750808311155b156103105750919695505050505050565b600061031c848461090d565b9050600061032a82876108a6565b905060008060008796505b8969ffffffffffffffffffff1660000361037157841561035e576103598585610946565b610360565b885b9d9c50505050505050505050505050565b61037c60018b610968565b99506103878a6105bc565b93509150508015610402578582116103cc576103a3868861090d565b92506103af83826108a6565b6103b99085610993565b93506103c58386610993565b9450610402565b6103d6828861090d565b92506103e283826108a6565b6103ec9085610993565b93506103f88386610993565b9450819650610335565b831561035e576103598585610946565b600080806000198587098587029250828110838203039150508060000361044b576000841161044057600080fd5b5082900490506104be565b80841161045757600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054391906109ca565b5093505092509250600082128015610565575069ffffffffffffffffffff8316155b1561058357604051639ee522a960e01b815260040160405180910390fd5b60008212156105ac5761059f61059a600185610968565b6105bc565b90965090935090506105b0565b8194505b91959394509092915050565b6000806000806000806105ce876106d0565b50935050925092505b6000821280156105f3575060008369ffffffffffffffffffff16115b1561068b57610603600184610968565b600054604051639a6fc8f560e01b815269ffffffffffffffffffff831660048201529194506001600160a01b031690639a6fc8f59060240160a060405180830381865afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906109ca565b509194509092506105d7915050565b6000821280156106a5575069ffffffffffffffffffff8316155b156106c357604051639ee522a960e01b815260040160405180910390fd5b9196909550909350915050565b60008054604051639a6fc8f560e01b815269ffffffffffffffffffff8416600482015282918291829182916001600160a01b0390911690639a6fc8f59060240160a060405180830381865afa925050508015610749575060408051601f3d908101601f19168201909252610746918101906109ca565b60015b6107615750600093508392508291508190508061076e565b9398509196509450925090505b91939590929450565b60006020828403121561078957600080fd5b813563ffffffff811681146104be57600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b808511156107ee5781600019048211156107d4576107d461079d565b808516156107e157918102915b93841c93908002906107b8565b509250929050565b600082610805575060016101b8565b81610812575060006101b8565b816001811461082857600281146108325761084e565b60019150506101b8565b60ff8411156108435761084361079d565b50506001821b6101b8565b5060208310610133831016604e8410600b8410161715610871575081810a6101b8565b61087b83836107b3565b806000190482111561088f5761088f61079d565b029392505050565b60006104be60ff8416836107f6565b60008160001904831182151516156108c0576108c061079d565b500290565b6000602082840312156108d757600080fd5b815160ff811681146104be57600080fd5b600060ff821660ff84168060ff038211156109055761090561079d565b019392505050565b60008282101561091f5761091f61079d565b500390565b60006020828403121561093657600080fd5b815180151581146104be57600080fd5b60008261096357634e487b7160e01b600052601260045260246000fd5b500490565b600069ffffffffffffffffffff8381169083168181101561098b5761098b61079d565b039392505050565b600082198211156109a6576109a661079d565b500190565b805169ffffffffffffffffffff811681146109c557600080fd5b919050565b600080600080600060a086880312156109e257600080fd5b6109eb866109ab565b9450602086015193506040860151925060608601519150610a0e608087016109ab565b9050929550929590935056fea2646970667358221220d97b2f1246ca5652d052e123eec1e145af9143bd1197c796a64a047449d91e4064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19354,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "aggregator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 19357,
        "contract": "contracts/oracles/ChainlinkOracle.sol:ChainlinkOracle",
        "label": "chainlinkFlags",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FlagsInterface)86"
      }
    ],
    "types": {
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(FlagsInterface)86": {
        "encoding": "inplace",
        "label": "contract FlagsInterface",
        "numberOfBytes": "20"
      }
    }
  }
}