{
  "address": "0x0630D84797139c558B43988Dcb3bB8982731C1fb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        }
      ],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "CalldataLengthExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasUsedClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasUsedActual",
          "type": "uint256"
        }
      ],
      "name": "ExcessGasUsedClaim",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "txGasPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "ExcessTxGasPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "name": "IllegalSqrtPrice",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        }
      ],
      "name": "IllegalTwapDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenLiquidationParameters",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "notionalValue",
          "type": "uint256"
        }
      ],
      "name": "LowNotionalValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRageTradeFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageBeyondTolerance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        }
      ],
      "name": "UninitializedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rTokenAddress",
          "type": "address"
        }
      ],
      "name": "UnsupportedRToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "UnsupportedVToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernance",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousTeamMultisig",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTeamMultisig",
          "type": "address"
        }
      ],
      "name": "TeamMultisigTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rageTradeFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rBase",
          "type": "address"
        },
        {
          "internalType": "contract IInsuranceFund",
          "name": "_insuranceFund",
          "type": "address"
        },
        {
          "internalType": "contract IVBase",
          "name": "_vBase",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_nativeOracle",
          "type": "address"
        }
      ],
      "name": "__ClearingHouse_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracleAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "twapDuration",
          "type": "uint32"
        }
      ],
      "name": "addCollateralSupport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "rTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newAccountId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "extsload",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "val",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "slots",
          "type": "bytes32[]"
        }
      ],
      "name": "extsload",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInitialMargin",
          "type": "bool"
        }
      ],
      "name": "getAccountMarketValueAndRequiredMargin",
      "outputs": [
        {
          "internalType": "int256",
          "name": "accountMarketValue",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "requiredMargin",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        }
      ],
      "name": "getAccountNetProfit",
      "outputs": [
        {
          "internalType": "int256",
          "name": "accountNetProfit",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        }
      ],
      "name": "getAccountView",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "vBaseBalance",
          "type": "int256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "rTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ],
          "internalType": "struct IClearingHouse.DepositTokenView[]",
          "name": "tokenDeposits",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "vTokenAddress",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "balance",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "netTraderPosition",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "sumAX128Ckpt",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "enum IClearingHouse.LimitOrderType",
                  "name": "limitOrderType",
                  "type": "uint8"
                },
                {
                  "internalType": "int24",
                  "name": "tickLower",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "tickUpper",
                  "type": "int24"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int256",
                  "name": "vTokenAmountIn",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sumALastX128",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sumBInsideLastX128",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "sumFpInsideLastX128",
                  "type": "int256"
                },
                {
                  "internalType": "uint256",
                  "name": "sumFeeInsideLastX128",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IClearingHouse.LiquidityPositionView[]",
              "name": "liquidityPositions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IClearingHouse.VTokenPositionView[]",
          "name": "tokenPositions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "getTwapSqrtPricesForSetDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "realPriceX128",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "virtualPriceX128",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFund",
      "outputs": [
        {
          "internalType": "contract IInsuranceFund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "truncated",
          "type": "uint32"
        }
      ],
      "name": "isVTokenAddressAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        }
      ],
      "name": "liquidateLiquidityPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasComputationUnitsClaim",
          "type": "uint256"
        }
      ],
      "name": "liquidateLiquidityPositionsWithGasClaim",
      "outputs": [
        {
          "internalType": "int256",
          "name": "keeperFee",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidatorAccountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "liquidationBps",
          "type": "uint16"
        }
      ],
      "name": "liquidateTokenPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "vBaseIncrease",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "vTokenIncrease",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "traderPositionIncrease",
              "type": "int256"
            }
          ],
          "internalType": "struct IClearingHouse.BalanceAdjustments",
          "name": "liquidatorBalanceAdjustments",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidatorAccountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "liquidationBps",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "gasComputationUnitsClaim",
          "type": "uint256"
        }
      ],
      "name": "liquidateTokenPositionWithGasClaim",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "vBaseIncrease",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "vTokenIncrease",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "traderPositionIncrease",
              "type": "int256"
            }
          ],
          "internalType": "struct IClearingHouse.BalanceAdjustments",
          "name": "liquidatorBalanceAdjustments",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "vPool",
              "type": "address"
            },
            {
              "internalType": "contract IVPoolWrapper",
              "name": "vPoolWrapper",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "initialMarginRatio",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "maintainanceMarginRatio",
                  "type": "uint16"
                },
                {
                  "internalType": "uint32",
                  "name": "twapDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "whitelisted",
                  "type": "bool"
                },
                {
                  "internalType": "contract IOracle",
                  "name": "oracle",
                  "type": "address"
                }
              ],
              "internalType": "struct IClearingHouse.RageTradePoolSettings",
              "name": "settings",
              "type": "tuple"
            }
          ],
          "internalType": "struct IClearingHouse.RageTradePool",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolInfo",
      "outputs": [
        {
          "internalType": "contract IVBase",
          "name": "vBase",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "liquidationFeeFraction",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tokenLiquidationPriceDeltaBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "insuranceFundFeeShareBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct Account.LiquidationParams",
          "name": "liquidationParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minRequiredMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "removeLimitOrderFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumOrderNotional",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rBase",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "rTokenId",
          "type": "uint32"
        }
      ],
      "name": "rTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracleAddress",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "oracleTimeHorizon",
              "type": "uint32"
            }
          ],
          "internalType": "struct RTokenLib.RToken",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rageTradeFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "full",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IUniswapV3Pool",
              "name": "vPool",
              "type": "address"
            },
            {
              "internalType": "contract IVPoolWrapper",
              "name": "vPoolWrapper",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "initialMarginRatio",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "maintainanceMarginRatio",
                  "type": "uint16"
                },
                {
                  "internalType": "uint32",
                  "name": "twapDuration",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "whitelisted",
                  "type": "bool"
                },
                {
                  "internalType": "contract IOracle",
                  "name": "oracle",
                  "type": "address"
                }
              ],
              "internalType": "struct IClearingHouse.RageTradePoolSettings",
              "name": "settings",
              "type": "tuple"
            }
          ],
          "internalType": "struct IClearingHouse.RageTradePool",
          "name": "rageTradePool",
          "type": "tuple"
        }
      ],
      "name": "registerPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        }
      ],
      "name": "removeLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint256",
          "name": "gasComputationUnitsClaim",
          "type": "uint256"
        }
      ],
      "name": "removeLimitOrderWithGasClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "keeperFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "rTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "liquidationFeeFraction",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tokenLiquidationPriceDeltaBps",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "insuranceFundFeeShareBps",
              "type": "uint16"
            }
          ],
          "internalType": "struct Account.LiquidationParams",
          "name": "_liquidationParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_removeLimitOrderFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumOrderNotional",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minRequiredMargin",
          "type": "uint256"
        }
      ],
      "name": "setPlatformParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_txGasPriceLimit",
          "type": "uint256"
        }
      ],
      "name": "setTxGasPriceLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedDeposits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedVTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "amount",
              "type": "int256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimit",
              "type": "uint160"
            },
            {
              "internalType": "bool",
              "name": "isNotional",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isPartialAllowed",
              "type": "bool"
            }
          ],
          "internalType": "struct IClearingHouse.SwapParams",
          "name": "swapParams",
          "type": "tuple"
        }
      ],
      "name": "swapToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "vTokenAmountOut",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "vBaseAmountOut",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamMultisig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTeamMultisig",
          "type": "address"
        }
      ],
      "name": "transferTeamMultisig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txGasPriceLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "updateProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "vToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "initialMarginRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "maintainanceMarginRatio",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "twapDuration",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "whitelisted",
              "type": "bool"
            },
            {
              "internalType": "contract IOracle",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct IClearingHouse.RageTradePoolSettings",
          "name": "newSettings",
          "type": "tuple"
        }
      ],
      "name": "updateRageTradePoolSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accountNo",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "vTokenTruncatedAddress",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "int128",
              "name": "liquidityDelta",
              "type": "int128"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceCurrent",
              "type": "uint160"
            },
            {
              "internalType": "uint16",
              "name": "slippageToleranceBps",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "closeTokenPosition",
              "type": "bool"
            },
            {
              "internalType": "enum IClearingHouse.LimitOrderType",
              "name": "limitOrderType",
              "type": "uint8"
            }
          ],
          "internalType": "struct IClearingHouse.LiquidityChangeParams",
          "name": "liquidityChangeParams",
          "type": "tuple"
        }
      ],
      "name": "updateRangeOrder",
      "outputs": [
        {
          "internalType": "int256",
          "name": "vTokenAmountOut",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "vBaseAmountOut",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "add",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updateSupportedDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVToken",
          "name": "add",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updateSupportedVTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "vTokenAddressTruncated",
          "type": "uint32"
        }
      ],
      "name": "vTokens",
      "outputs": [
        {
          "internalType": "contract IVToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wrapperAddresses",
          "type": "address[]"
        }
      ],
      "name": "withdrawProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x72ccb7cd46c33a9386b2c0ff2ff8a2b2821ac24d2dd812c979713452f1c8d086",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0x0630D84797139c558B43988Dcb3bB8982731C1fb",
    "transactionIndex": 0,
    "gasUsed": "76976802",
    "logsBloom": "0x
    "blockHash": "0xc26f5572b2796365215b3ce960397ebc7538d33b4b9c455d433ed82870df0490",
    "transactionHash": "0x72ccb7cd46c33a9386b2c0ff2ff8a2b2821ac24d2dd812c979713452f1c8d086",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9522320,
        "transactionHash": "0x72ccb7cd46c33a9386b2c0ff2ff8a2b2821ac24d2dd812c979713452f1c8d086",
        "address": "0x0630D84797139c558B43988Dcb3bB8982731C1fb",
        "topics": [
          "0x5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc26f5572b2796365215b3ce960397ebc7538d33b4b9c455d433ed82870df0490"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9522320,
        "transactionHash": "0x72ccb7cd46c33a9386b2c0ff2ff8a2b2821ac24d2dd812c979713452f1c8d086",
        "address": "0x0630D84797139c558B43988Dcb3bB8982731C1fb",
        "topics": [
          "0x39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004ec0dda0430a54b4796109913545f715b2d89f34"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc26f5572b2796365215b3ce960397ebc7538d33b4b9c455d433ed82870df0490"
      }
    ],
    "blockNumber": 9522320,
    "cumulativeGasUsed": "35693640",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a4f86ba0634cd1c18bcd3c42ff526506",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"}],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"CalldataLengthExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsedClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsedActual\",\"type\":\"uint256\"}],\"name\":\"ExcessGasUsedClaim\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ExcessTxGasPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"IllegalSqrtPrice\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"IllegalTwapDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenLiquidationParameters\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"notionalValue\",\"type\":\"uint256\"}],\"name\":\"LowNotionalValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRageTradeFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageBeyondTolerance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"}],\"name\":\"UninitializedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rTokenAddress\",\"type\":\"address\"}],\"name\":\"UnsupportedRToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"UnsupportedVToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousTeamMultisig\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamMultisig\",\"type\":\"address\"}],\"name\":\"TeamMultisigTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rageTradeFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rBase\",\"type\":\"address\"},{\"internalType\":\"contract IInsuranceFund\",\"name\":\"_insuranceFund\",\"type\":\"address\"},{\"internalType\":\"contract IVBase\",\"name\":\"_vBase\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_nativeOracle\",\"type\":\"address\"}],\"name\":\"__ClearingHouse_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"}],\"name\":\"addCollateralSupport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"rTokenTruncatedAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newAccountId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"extsload\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"slots\",\"type\":\"bytes32[]\"}],\"name\":\"extsload\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialMargin\",\"type\":\"bool\"}],\"name\":\"getAccountMarketValueAndRequiredMargin\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"accountMarketValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"requiredMargin\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"}],\"name\":\"getAccountNetProfit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"accountNetProfit\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"}],\"name\":\"getAccountView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"vBaseBalance\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"rTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHouse.DepositTokenView[]\",\"name\":\"tokenDeposits\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"vTokenAddress\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"netTraderPosition\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sumAX128Ckpt\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"enum IClearingHouse.LimitOrderType\",\"name\":\"limitOrderType\",\"type\":\"uint8\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int256\",\"name\":\"vTokenAmountIn\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sumALastX128\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sumBInsideLastX128\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"sumFpInsideLastX128\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"sumFeeInsideLastX128\",\"type\":\"uint256\"}],\"internalType\":\"struct IClearingHouse.LiquidityPositionView[]\",\"name\":\"liquidityPositions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IClearingHouse.VTokenPositionView[]\",\"name\":\"tokenPositions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"getTwapSqrtPricesForSetDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"realPriceX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"virtualPriceX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"contract IInsuranceFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"truncated\",\"type\":\"uint32\"}],\"name\":\"isVTokenAddressAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"}],\"name\":\"liquidateLiquidityPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasComputationUnitsClaim\",\"type\":\"uint256\"}],\"name\":\"liquidateLiquidityPositionsWithGasClaim\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"keeperFee\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidatorAccountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationBps\",\"type\":\"uint16\"}],\"name\":\"liquidateTokenPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"vBaseIncrease\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vTokenIncrease\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"traderPositionIncrease\",\"type\":\"int256\"}],\"internalType\":\"struct IClearingHouse.BalanceAdjustments\",\"name\":\"liquidatorBalanceAdjustments\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidatorAccountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"liquidationBps\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"gasComputationUnitsClaim\",\"type\":\"uint256\"}],\"name\":\"liquidateTokenPositionWithGasClaim\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"vBaseIncrease\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vTokenIncrease\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"traderPositionIncrease\",\"type\":\"int256\"}],\"internalType\":\"struct IClearingHouse.BalanceAdjustments\",\"name\":\"liquidatorBalanceAdjustments\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"vPool\",\"type\":\"address\"},{\"internalType\":\"contract IVPoolWrapper\",\"name\":\"vPoolWrapper\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"initialMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maintainanceMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IClearingHouse.RageTradePoolSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"internalType\":\"struct IClearingHouse.RageTradePool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"contract IVBase\",\"name\":\"vBase\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"liquidationFeeFraction\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenLiquidationPriceDeltaBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insuranceFundFeeShareBps\",\"type\":\"uint16\"}],\"internalType\":\"struct Account.LiquidationParams\",\"name\":\"liquidationParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLimitOrderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumOrderNotional\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rBase\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"rTokenId\",\"type\":\"uint32\"}],\"name\":\"rTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"oracleTimeHorizon\",\"type\":\"uint32\"}],\"internalType\":\"struct RTokenLib.RToken\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rageTradeFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"full\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IUniswapV3Pool\",\"name\":\"vPool\",\"type\":\"address\"},{\"internalType\":\"contract IVPoolWrapper\",\"name\":\"vPoolWrapper\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"initialMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maintainanceMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IClearingHouse.RageTradePoolSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"internalType\":\"struct IClearingHouse.RageTradePool\",\"name\":\"rageTradePool\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"removeLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"gasComputationUnitsClaim\",\"type\":\"uint256\"}],\"name\":\"removeLimitOrderWithGasClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"keeperFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"rTokenTruncatedAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"liquidationFeeFraction\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tokenLiquidationPriceDeltaBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insuranceFundFeeShareBps\",\"type\":\"uint16\"}],\"internalType\":\"struct Account.LiquidationParams\",\"name\":\"_liquidationParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_removeLimitOrderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOrderNotional\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRequiredMargin\",\"type\":\"uint256\"}],\"name\":\"setPlatformParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txGasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"setTxGasPriceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedDeposits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedVTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimit\",\"type\":\"uint160\"},{\"internalType\":\"bool\",\"name\":\"isNotional\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPartialAllowed\",\"type\":\"bool\"}],\"internalType\":\"struct IClearingHouse.SwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"vTokenAmountOut\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vBaseAmountOut\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMultisig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamMultisig\",\"type\":\"address\"}],\"name\":\"transferTeamMultisig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txGasPriceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"updateProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"vToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"initialMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maintainanceMarginRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"twapDuration\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"},{\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct IClearingHouse.RageTradePoolSettings\",\"name\":\"newSettings\",\"type\":\"tuple\"}],\"name\":\"updateRageTradePoolSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accountNo\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"vTokenTruncatedAddress\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int128\",\"name\":\"liquidityDelta\",\"type\":\"int128\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceCurrent\",\"type\":\"uint160\"},{\"internalType\":\"uint16\",\"name\":\"slippageToleranceBps\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"closeTokenPosition\",\"type\":\"bool\"},{\"internalType\":\"enum IClearingHouse.LimitOrderType\",\"name\":\"limitOrderType\",\"type\":\"uint8\"}],\"internalType\":\"struct IClearingHouse.LiquidityChangeParams\",\"name\":\"liquidityChangeParams\",\"type\":\"tuple\"}],\"name\":\"updateRangeOrder\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"vTokenAmountOut\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"vBaseAmountOut\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSupportedDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"add\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSupportedVTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"vTokenAddressTruncated\",\"type\":\"uint32\"}],\"name\":\"vTokens\",\"outputs\":[{\"internalType\":\"contract IVToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wrapperAddresses\",\"type\":\"address[]\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessDenied(address)\":[{\"params\":{\"senderAddress\":\"address of msg sender\"}}],\"LowNotionalValue(uint256)\":[{\"params\":{\"notionalValue\":\"notional value of txn\"}}],\"UninitializedToken(uint32)\":[{\"params\":{\"vTokenTruncatedAddress\":\"unitialized truncated address supplied\"}}],\"UnsupportedRToken(address)\":[{\"params\":{\"rTokenAddress\":\"address of token\"}}],\"UnsupportedVToken(address)\":[{\"params\":{\"vToken\":\"address of token\"}}]},\"kind\":\"dev\",\"methods\":{\"addMargin(uint256,uint32,uint256)\":{\"params\":{\"accountNo\":\"account number\",\"amount\":\"amount of token to deposit\",\"vTokenTruncatedAddress\":\"truncated address of token to deposit\"}},\"createAccount()\":{\"returns\":{\"newAccountId\":\"- serial number of the new account created\"}},\"governance()\":{\"details\":\"Returns the address of the current governance.\"},\"liquidateLiquidityPositions(uint256)\":{\"details\":\"removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\",\"params\":{\"accountNo\":\"account number\"}},\"liquidateLiquidityPositionsWithGasClaim(uint256,uint256)\":{\"details\":\"removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\",\"params\":{\"accountNo\":\"account number\",\"gasComputationUnitsClaim\":\"estimated computation gas units, if more than actual, tx will revert\"},\"returns\":{\"keeperFee\":\": amount of fees paid to caller\"}},\"liquidateTokenPosition(uint256,uint256,uint32,uint16)\":{\"details\":\"transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\",\"params\":{\"accountNo\":\"account number\",\"liquidationBps\":\"fraction of the token position to be transferred in BPS\",\"liquidatorAccountNo\":\"liquidator account number\",\"vTokenTruncatedAddress\":\"truncated address of token to withdraw\"},\"returns\":{\"liquidatorBalanceAdjustments\":\"- balance changes in liquidator base and token balance and net token position\"}},\"liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)\":{\"details\":\"transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\",\"params\":{\"accountNo\":\"account number\",\"gasComputationUnitsClaim\":\"estimated computation gas units, if more than actual, tx will revert\",\"liquidationBps\":\"fraction of the token position to be transferred in BPS\",\"liquidatorAccountNo\":\"liquidator account number\",\"vTokenTruncatedAddress\":\"truncated address of token to withdraw\"},\"returns\":{\"liquidatorBalanceAdjustments\":\"- balance changes in liquidator base and token balance and net token position\"}},\"removeLimitOrder(uint256,uint32,int24,int24)\":{\"details\":\"checks the position of current price relative to limit order and checks limitOrderType\",\"params\":{\"accountNo\":\"account number\",\"tickLower\":\"liquidity change parameters\",\"tickUpper\":\"liquidity change parameters\",\"vTokenTruncatedAddress\":\"truncated address of token to withdraw\"}},\"removeMargin(uint256,uint32,uint256)\":{\"params\":{\"accountNo\":\"account number\",\"amount\":\"amount of token to withdraw\",\"vTokenTruncatedAddress\":\"truncated address of token to withdraw\"}},\"swapToken(uint256,uint32,(int256,uint160,bool,bool))\":{\"params\":{\"accountNo\":\"account number\",\"swapParams\":\"swap parameters\",\"vTokenTruncatedAddress\":\"truncated address of token to withdraw\"}},\"teamMultisig()\":{\"details\":\"Returns the address of the current team multisig.transferTeamMultisig\"},\"transferGovernance(address)\":{\"details\":\"Transfers governance to a new account (`newGovernance`). Can only be called by the current governance.\"},\"transferTeamMultisig(address)\":{\"details\":\"Transfers teamMultisig to a new account (`newTeamMultisig`). Can only be called by the current teamMultisig or current governance.\"},\"updateProfit(uint256,int256)\":{\"params\":{\"accountNo\":\"account number\",\"amount\":\"amount of token to withdraw\"}},\"updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))\":{\"params\":{\"accountNo\":\"account number\",\"liquidityChangeParams\":\"liquidity change parameters\",\"vTokenTruncatedAddress\":\"truncated address of token to withdraw\"}},\"withdrawProtocolFee(address[])\":{\"params\":{\"wrapperAddresses\":\"list of wrapper addresses to collect fees from\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AccessDenied(address)\":[{\"notice\":\"error to denote invalid account access\"}],\"InvalidTokenLiquidationParameters()\":[{\"notice\":\"error to denote invalid token liquidation (fraction to liquidate> 1)\"}],\"LowNotionalValue(uint256)\":[{\"notice\":\"error to denote low notional value of txn\"}],\"SlippageBeyondTolerance()\":[{\"notice\":\"error to denote slippage of txn beyond set threshold\"}],\"UninitializedToken(uint32)\":[{\"notice\":\"error to denote usage of unitialized token\"}],\"UnsupportedRToken(address)\":[{\"notice\":\"error to denote usage of unsupported token\"}],\"UnsupportedVToken(address)\":[{\"notice\":\"error to denote usage of unsupported token\"}]},\"kind\":\"user\",\"methods\":{\"__ClearingHouse_init(address,address,address,address,address)\":{\"notice\":\"PLATFORM FUNCTIONS\"},\"addCollateralSupport(address,address,uint32)\":{\"notice\":\"ADMIN FUNCTIONS\"},\"addMargin(uint256,uint32,uint256)\":{\"notice\":\"deposits 'amount' of token associated with 'vTokenTruncatedAddress'\"},\"createAccount()\":{\"notice\":\"creates a new account and adds it to the accounts map\"},\"getAccountView(uint256)\":{\"notice\":\"Account.UserInfo VIEW\"},\"liquidateLiquidityPositions(uint256)\":{\"notice\":\"keeper call for liquidation of range position\"},\"liquidateLiquidityPositionsWithGasClaim(uint256,uint256)\":{\"notice\":\"keeper call for liquidation of range position\"},\"liquidateTokenPosition(uint256,uint256,uint32,uint16)\":{\"notice\":\"keeper call for liquidation of token position\"},\"liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)\":{\"notice\":\"keeper call for liquidation of token position\"},\"protocolInfo()\":{\"notice\":\"Account.ProtocolInfo VIEW\"},\"removeLimitOrder(uint256,uint32,int24,int24)\":{\"notice\":\"keeper call to remove a limit order\"},\"removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256)\":{\"notice\":\"ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM\"},\"removeMargin(uint256,uint32,uint256)\":{\"notice\":\"withdraws 'amount' of token associated with 'vTokenTruncatedAddress'\"},\"swapToken(uint256,uint32,(int256,uint160,bool,bool))\":{\"notice\":\"swaps token associated with 'vTokenTruncatedAddress' by 'amount' (Long if amount>0 else Short)\"},\"updateProfit(uint256,int256)\":{\"notice\":\"withdraws 'amount' of base token from the profit made\"},\"updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))\":{\"notice\":\"updates range order of token associated with 'vTokenTruncatedAddress' by 'liquidityDelta' (Adds if amount>0 else Removes)also can be used to update limitOrderType\"},\"withdrawProtocolFee(address[])\":{\"notice\":\"withdraws protocol fees collected in the supplied wrappers to team multisig\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol\":\"ClearingHouseArbitrum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@134dd3v/arbos-precompiles/arbos/builtin/ArbAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\ninterface ArbAggregator {\\n    // Get the preferred aggregator for an address.\\n    // Returns (preferredAggregatorAddress, isDefault)\\n    //     isDefault is true if addr is set to prefer the default aggregator\\n    function getPreferredAggregator(address addr) external view returns (address, bool);\\n\\n    // Set the caller's preferred aggregator.\\n    // If prefAgg is zero, this sets the caller to prefer the default aggregator\\n    function setPreferredAggregator(address prefAgg) external;\\n\\n    // Get default aggregator.\\n    function getDefaultAggregator() external view returns (address);\\n\\n    // Set the preferred aggregator.\\n    // Reverts unless called by the chain owner or the current default aggregator.\\n    function setDefaultAggregator(address newDefault) external;\\n\\n    // Get the address where fees to aggregator are sent.\\n    // This will often but not always be the same as the aggregator's address.\\n    function getFeeCollector(address aggregator) external view returns (address);\\n\\n    // Set the address where fees to aggregator are sent.\\n    // This reverts unless called by the address that would be returned by getFeeCollector(aggregator),\\n    //      or by the chain owner.\\n    function setFeeCollector(address aggregator, address newFeeCollector) external;\\n\\n    // Get the tx base fee (in approximate L1 gas) for aggregator\\n    function getTxBaseFee(address aggregator) external view returns (uint);\\n\\n    // Set the tx base fee (in approximate L1 gas) for aggregator\\n    // Revert unless called by aggregator or the chain owner\\n    // Revert if feeInL1Gas is outside the chain's allowed bounds\\n    function setTxBaseFee(address aggregator, uint feeInL1Gas) external;\\n}\\n\\n\",\"keccak256\":\"0x4bd0b209faee6b070152883601cc44cdd98ab99cd0cb74681343c8f8bb5f93fc\",\"license\":\"Apache-2.0\"},\"@134dd3v/arbos-precompiles/arbos/builtin/ArbGasInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\ninterface ArbGasInfo {\\n    // return gas prices in wei, assuming the specified aggregator is used\\n    //        (\\n    //            per L2 tx,\\n    //            per L1 calldata unit, (zero byte = 4 units, nonzero byte = 16 units)\\n    //            per storage allocation,\\n    //            per ArbGas base,\\n    //            per ArbGas congestion,\\n    //            per ArbGas total\\n    //        )\\n    function getPricesInWeiWithAggregator(address aggregator) external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return gas prices in wei, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInWei() external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return prices in ArbGas (per L2 tx, per L1 calldata unit, per storage allocation),\\n    //       assuming the specified aggregator is used\\n    function getPricesInArbGasWithAggregator(address aggregator) external view returns (uint, uint, uint);\\n\\n    // return gas prices in ArbGas, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInArbGas() external view returns (uint, uint, uint);\\n\\n    // return gas accounting parameters (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\\n    function getGasAccountingParams() external view returns (uint, uint, uint);\\n\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1GasPriceEstimate() external view returns(uint);\\n\\n    // set ArbOS's estimate of the L1 gas price in wei\\n    // reverts unless called by chain owner or designated gas oracle (if any)\\n    function setL1GasPriceEstimate(uint priceInWei) external;\\n\\n    // get L1 gas fees paid by the current transaction (txBaseFeeWei, calldataFeeWei)\\n    function getCurrentTxL1GasFees() external view returns(uint);\\n}\\n\",\"keccak256\":\"0x7eb16bb7d6c6b4e3630a502683df184fe525377e3967cd15c1bffcb4528f1614\",\"license\":\"Apache-2.0\"},\"@134dd3v/arbos-precompiles/arbos/builtin/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n* @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface ArbSys {\\n    /**\\n    * @notice Get internal version number identifying an ArbOS build\\n    * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns(uint);\\n\\n    /**\\n    * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n    * @return block number as int\\n     */ \\n    function arbBlockNumber() external view returns (uint);\\n\\n    /** \\n    * @notice Send given amount of Eth to dest from sender.\\n    * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n    * @param destination recipient address on L1\\n    * @return unique identifier for this L2-to-L1 transaction.\\n    */\\n    function withdrawEth(address destination) external payable returns(uint);\\n\\n    /** \\n    * @notice Send a transaction to L1\\n    * @param destination recipient address on L1 \\n    * @param calldataForL1 (optional) calldata for L1 contract call\\n    * @return a unique identifier for this L2-to-L1 transaction.\\n    */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns(uint);\\n\\n    /** \\n    * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n    * @param account target account\\n    * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n    */\\n    function getTransactionCount(address account) external view returns(uint256);\\n\\n    /**  \\n    * @notice get the value of target L2 storage slot \\n    * This function is only callable from address 0 to prevent contracts from being able to call it\\n    * @param account target account\\n    * @param index target index of storage slot \\n    * @return stotage value for the given account at the given index\\n    */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n    * @notice check if current call is coming from l1\\n    * @return true if the caller of this was called directly from L1\\n    */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns(address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns(uint);\\n\\n    event L2ToL1Transaction(address caller, address indexed destination, uint indexed uniqueId,\\n                            uint indexed batchNumber, uint indexInBatch,\\n                            uint arbBlockNum, uint ethBlockNum, uint timestamp,\\n                            uint callvalue, bytes data);\\n}\\n\\n\",\"keccak256\":\"0xc4bde18d74abdb9575cfaa187e5488004105aa8eb86ccf9356469edb736c24b4\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x27f9465d84949f059ed37b23c82f4a9fc16c1b8d6fbd69837a0f920875e2af83\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // Cannot overflow because denominator != 0\\n        uint256 twos;\\n        assembly {\\n            twos := and(add(not(denominator), 1), denominator)\\n        }\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n            prod0 := or(prod0, mul(prod1, twos))\\n        }\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv;\\n\\n        assembly {\\n            inv := xor(mul(3, denominator), 2)\\n        }\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        assembly {\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\\n        }\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        assembly {\\n            result := mul(prod0, inv)\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b1cd11afa50448a73daa8e8088911aff2c716eb721b0d2c14627e8fa23cb793\",\"license\":\"MIT\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x + y) >= x);\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x - y) <= x);\\n        }\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require(x == 0 || (z = x * y) / x == y);\\n        }\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require((z = x + y) >= x == (y >= 0));\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require((z = x - y) <= x == (y >= 0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6c7bb12f704b6d5b4e5c39358ab4dd7e2c14d198cdc2f44b4edbc8c77d1a63c\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        unchecked {\\n            require((z = uint160(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        unchecked {\\n            require((z = int128(y)) == y);\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            require(y < 2**255);\\n            z = int256(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x022028c6075d21ecb8c86c9f1bec125193092fa038a239d5eb5beb740313f142\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0;\\n\\nimport './LowGasSafeMath.sol';\\nimport './SafeCast.sol';\\n\\nimport './FullMath.sol';\\nimport './UnsafeMath.sol';\\nimport './FixedPoint96.sol';\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        unchecked {\\n            // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n            if (amount == 0) return sqrtPX96;\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n            if (add) {\\n                uint256 product;\\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                    uint256 denominator = numerator1 + product;\\n                    if (denominator >= numerator1)\\n                        // always fits in 160 bits\\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n                }\\n\\n                return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n            } else {\\n                uint256 product;\\n                // if the product overflows, we know the denominator underflows\\n                // in addition, we must check that the denominator does not underflow\\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n                uint256 denominator = numerator1 - product;\\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        unchecked {\\n            // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n            // in both cases, avoid a mulDiv for most inputs\\n            if (add) {\\n                uint256 quotient =\\n                    (\\n                        amount <= type(uint160).max\\n                            ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                            : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                    );\\n\\n                return uint256(sqrtPX96).add(quotient).toUint160();\\n            } else {\\n                uint256 quotient =\\n                    (\\n                        amount <= type(uint160).max\\n                            ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                            : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                    );\\n\\n                require(sqrtPX96 > quotient);\\n                // always fits 160 bits\\n                return uint160(sqrtPX96 - quotient);\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        unchecked {\\n            require(sqrtPX96 > 0);\\n            require(liquidity > 0);\\n\\n            // round to make sure that we don't pass the target price\\n            return\\n                zeroForOne\\n                    ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                    : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        unchecked {\\n            require(sqrtPX96 > 0);\\n            require(liquidity > 0);\\n\\n            // round to make sure that we pass the target price\\n            return\\n                zeroForOne\\n                    ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                    : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n        }\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n            require(sqrtRatioAX96 > 0);\\n\\n            return\\n                roundUp\\n                    ? UnsafeMath.divRoundingUp(\\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                        sqrtRatioAX96\\n                    )\\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                roundUp\\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        unchecked {\\n            return\\n                liquidity < 0\\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x93fd52eb6c439be9c9ace522d9b1b5a074878257c81dd8a6cc6dc784c8a5f1c7\",\"license\":\"BUSL-1.1\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {     \\n            // second inequality must be < because the price can never reach the price at the max tick\\n            require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63b385391f044a6332a912e2264bc2932dbf9a2a47ce1a7c743c8d0deddbb065\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core-0.8-support/contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { IGovernable } from './IGovernable.sol';\\nimport { IInsuranceFund } from './IInsuranceFund.sol';\\nimport { IOracle } from './IOracle.sol';\\nimport { IVBase } from './IVBase.sol';\\nimport { IVPoolWrapper } from './IVPoolWrapper.sol';\\nimport { IVToken } from './IVToken.sol';\\nimport { Account } from '../libraries/Account.sol';\\nimport { RTokenLib } from '../libraries/RTokenLib.sol';\\n\\ninterface IClearingHouse is IGovernable {\\n    struct RageTradePool {\\n        IUniswapV3Pool vPool;\\n        IVPoolWrapper vPoolWrapper;\\n        RageTradePoolSettings settings;\\n    }\\n\\n    struct RageTradePoolSettings {\\n        uint16 initialMarginRatio;\\n        uint16 maintainanceMarginRatio;\\n        uint32 twapDuration;\\n        bool whitelisted;\\n        IOracle oracle;\\n    }\\n\\n    enum LimitOrderType {\\n        NONE,\\n        LOWER_LIMIT,\\n        UPPER_LIMIT\\n    }\\n\\n    struct LiquidityChangeParams {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int128 liquidityDelta;\\n        uint160 sqrtPriceCurrent;\\n        uint16 slippageToleranceBps;\\n        bool closeTokenPosition;\\n        LimitOrderType limitOrderType;\\n    }\\n\\n    /// @notice swaps params for specifying the swap params\\n    /// @param amount amount of tokens/base to swap\\n    /// @param sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\\n    /// @param isNotional specifies whether the amount represents token amount (false) or base amount(true)\\n    /// @param isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\\n    struct SwapParams {\\n        int256 amount;\\n        uint160 sqrtPriceLimit;\\n        bool isNotional;\\n        bool isPartialAllowed;\\n    }\\n\\n    /// @notice parameters to be used for account balance update\\n    /// @param vBaseIncrease specifies the increase in base balance\\n    /// @param vTokenIncrease specifies the increase in token balance\\n    /// @param traderPositionIncrease specifies the increase in trader position\\n    struct BalanceAdjustments {\\n        int256 vBaseIncrease;\\n        int256 vTokenIncrease;\\n        int256 traderPositionIncrease;\\n    }\\n\\n    struct DepositTokenView {\\n        address rTokenAddress;\\n        uint256 balance;\\n    }\\n\\n    struct VTokenPositionView {\\n        address vTokenAddress;\\n        int256 balance; // vTokenLong - vTokenShort\\n        int256 netTraderPosition;\\n        int256 sumAX128Ckpt;\\n        LiquidityPositionView[] liquidityPositions;\\n    }\\n\\n    struct LiquidityPositionView {\\n        LimitOrderType limitOrderType;\\n        // the tick range of the position;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // the liquidity of the position\\n        uint128 liquidity;\\n        int256 vTokenAmountIn;\\n        // funding payment checkpoints\\n        int256 sumALastX128;\\n        int256 sumBInsideLastX128;\\n        int256 sumFpInsideLastX128;\\n        // fee growth inside\\n        uint256 sumFeeInsideLastX128;\\n    }\\n\\n    struct SwapValues {\\n        int256 amountSpecified;\\n        int256 vTokenIn;\\n        int256 vBaseIn;\\n        uint256 liquidityFees;\\n        uint256 protocolFees;\\n    }\\n\\n    /// @notice error to denote invalid account access\\n    /// @param senderAddress address of msg sender\\n    error AccessDenied(address senderAddress);\\n\\n    /// @notice error to denote usage of unsupported token\\n    /// @param vToken address of token\\n    error UnsupportedVToken(IVToken vToken);\\n\\n    /// @notice error to denote usage of unsupported token\\n    /// @param rTokenAddress address of token\\n    error UnsupportedRToken(address rTokenAddress);\\n\\n    /// @notice error to denote low notional value of txn\\n    /// @param notionalValue notional value of txn\\n    error LowNotionalValue(uint256 notionalValue);\\n\\n    /// @notice error to denote invalid token liquidation (fraction to liquidate> 1)\\n    error InvalidTokenLiquidationParameters();\\n\\n    /// @notice error to denote usage of unitialized token\\n    /// @param vTokenTruncatedAddress unitialized truncated address supplied\\n    error UninitializedToken(uint32 vTokenTruncatedAddress);\\n\\n    /// @notice error to denote slippage of txn beyond set threshold\\n    error SlippageBeyondTolerance();\\n\\n    function __ClearingHouse_init(\\n        address _rageTradeFactoryAddress,\\n        IERC20 _rBase,\\n        IInsuranceFund _insuranceFund,\\n        IVBase _vBase,\\n        IOracle _nativeOracle\\n    ) external;\\n\\n    /// @notice creates a new account and adds it to the accounts map\\n    /// @return newAccountId - serial number of the new account created\\n    function createAccount() external returns (uint256 newAccountId);\\n\\n    /// @notice withdraws protocol fees collected in the supplied wrappers to team multisig\\n    /// @param wrapperAddresses list of wrapper addresses to collect fees from\\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external;\\n\\n    /// @notice deposits 'amount' of token associated with 'vTokenTruncatedAddress'\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to deposit\\n    /// @param amount amount of token to deposit\\n    function addMargin(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice withdraws 'amount' of token associated with 'vTokenTruncatedAddress'\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param amount amount of token to withdraw\\n    function removeMargin(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice withdraws 'amount' of base token from the profit made\\n    /// @param accountNo account number\\n    /// @param amount amount of token to withdraw\\n    function updateProfit(uint256 accountNo, int256 amount) external;\\n\\n    /// @notice swaps token associated with 'vTokenTruncatedAddress' by 'amount' (Long if amount>0 else Short)\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param swapParams swap parameters\\n    function swapToken(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        SwapParams memory swapParams\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut);\\n\\n    /// @notice updates range order of token associated with 'vTokenTruncatedAddress' by 'liquidityDelta' (Adds if amount>0 else Removes)\\n    /// @notice also can be used to update limitOrderType\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param liquidityChangeParams liquidity change parameters\\n    function updateRangeOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        LiquidityChangeParams calldata liquidityChangeParams\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut);\\n\\n    /// @notice keeper call to remove a limit order\\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param tickLower liquidity change parameters\\n    /// @param tickUpper liquidity change parameters\\n    function removeLimitOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external;\\n\\n    /// @notice keeper call for liquidation of range position\\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\\n    /// @param accountNo account number\\n    function liquidateLiquidityPositions(uint256 accountNo) external;\\n\\n    /// @notice keeper call for liquidation of token position\\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\\n    /// @param liquidatorAccountNo liquidator account number\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator base and token balance and net token position\\n    function liquidateTokenPosition(\\n        uint256 liquidatorAccountNo,\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint16 liquidationBps\\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\\n\\n    /// @notice keeper call to remove a limit order\\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param tickLower liquidity change parameters\\n    /// @param tickUpper liquidity change parameters\\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return keeperFee : amount of fees paid to caller\\n    function removeLimitOrderWithGasClaim(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 gasComputationUnitsClaim\\n    ) external returns (uint256 keeperFee);\\n\\n    /// @notice keeper call for liquidation of range position\\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\\n    /// @param accountNo account number\\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return keeperFee : amount of fees paid to caller\\n    function liquidateLiquidityPositionsWithGasClaim(uint256 accountNo, uint256 gasComputationUnitsClaim)\\n        external\\n        returns (int256 keeperFee);\\n\\n    /// @notice keeper call for liquidation of token position\\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\\n    /// @param liquidatorAccountNo liquidator account number\\n    /// @param accountNo account number\\n    /// @param vTokenTruncatedAddress truncated address of token to withdraw\\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator base and token balance and net token position\\n    function liquidateTokenPositionWithGasClaim(\\n        uint256 liquidatorAccountNo,\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint16 liquidationBps,\\n        uint256 gasComputationUnitsClaim\\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\\n\\n    function isVTokenAddressAvailable(uint32 truncated) external view returns (bool);\\n\\n    function registerPool(address full, RageTradePool calldata rageTradePool) external;\\n\\n    function getTwapSqrtPricesForSetDuration(IVToken vToken)\\n        external\\n        view\\n        returns (uint256 realPriceX128, uint256 virtualPriceX128);\\n\\n    /**\\n        Account.ProtocolInfo VIEW\\n     */\\n    function protocolInfo()\\n        external\\n        view\\n        returns (\\n            IVBase vBase,\\n            Account.LiquidationParams memory liquidationParams,\\n            uint256 minRequiredMargin,\\n            uint256 removeLimitOrderFee,\\n            uint256 minimumOrderNotional\\n        );\\n\\n    function pools(IVToken vToken) external view returns (RageTradePool memory);\\n\\n    function rTokens(uint32 rTokenId) external view returns (RTokenLib.RToken memory);\\n\\n    function vTokens(uint32 vTokenAddressTruncated) external view returns (IVToken);\\n\\n    /**\\n        Account.UserInfo VIEW\\n     */\\n\\n    function getAccountView(uint256 accountNo)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            int256 vBaseBalance,\\n            DepositTokenView[] memory tokenDeposits,\\n            VTokenPositionView[] memory tokenPositions\\n        );\\n\\n    function getAccountMarketValueAndRequiredMargin(uint256 accountNo, bool isInitialMargin)\\n        external\\n        view\\n        returns (int256 accountMarketValue, int256 requiredMargin);\\n\\n    function getAccountNetProfit(uint256 accountNo) external view returns (int256 accountNetProfit);\\n}\\n\",\"keccak256\":\"0x9c45459e1a229bf79bd6d60c1c3ed309b437cbbba8943338792b3f46bb373be5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IGovernable {\\n    function governance() external view returns (address);\\n\\n    function teamMultisig() external view returns (address);\\n\\n    function transferGovernance(address newGovernance) external;\\n\\n    function transferTeamMultisig(address newTeamMultisig) external;\\n}\\n\",\"keccak256\":\"0x1f30ea80d816aa283f24b2b24cce99fb1669ee45b425dede90b49867e4463d4b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInsuranceFund.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\n\\ninterface IInsuranceFund {\\n    function __InsuranceFund_init(\\n        IERC20 rBase,\\n        IClearingHouse clearingHouse,\\n        string calldata name,\\n        string calldata symbol\\n    ) external;\\n\\n    function claim(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5650168e1bc04c5f16584e12e112461e02bc333f536b88fdbf3381ef2b391ad0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\ninterface IOracle {\\n    // TODO change to X128 instead of X96\\n    function getTwapSqrtPriceX96(uint32 twapDuration) external view returns (uint160 sqrtPriceX96);\\n}\\n\",\"keccak256\":\"0x557aab09de88ac0d7036a2928b84fe8becb17d28851fe9f8e61616fc4f177b9e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVBase is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function authorize(address vPoolWrapper) external;\\n}\\n\",\"keccak256\":\"0xd0d676570a289528989eebd73897963ec70b2d82eb2d82f8b4ce52aee3a08d3b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVPoolWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { IVToken } from '../libraries/VTokenLib.sol';\\n\\nimport { IVBase } from './IVBase.sol';\\nimport { IVToken } from './IVToken.sol';\\nimport { IClearingHouse } from './IClearingHouse.sol';\\n\\ninterface IVPoolWrapper {\\n    struct WrapperValuesInside {\\n        int256 sumAX128;\\n        int256 sumBInsideX128;\\n        int256 sumFpInsideX128;\\n        uint256 sumFeeInsideX128;\\n    }\\n\\n    event Swap(int256 vTokenIn, int256 vBaseIn, uint256 liquidityFees, uint256 protocolFees);\\n\\n    struct InitializeVPoolWrapperParams {\\n        IClearingHouse clearingHouse;\\n        IVToken vToken;\\n        IVBase vBase;\\n        IUniswapV3Pool vPool;\\n        uint24 liquidityFeePips;\\n        uint24 protocolFeePips;\\n        uint24 UNISWAP_V3_DEFAULT_FEE_TIER;\\n    }\\n\\n    function __VPoolWrapper_init(InitializeVPoolWrapperParams calldata params) external;\\n\\n    function vPool() external view returns (IUniswapV3Pool);\\n\\n    function updateGlobalFundingState() external;\\n\\n    function getValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (WrapperValuesInside memory wrapperValuesInside);\\n\\n    function liquidityChange(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidity\\n    )\\n        external\\n        returns (\\n            int256 vBaseAmount,\\n            int256 vTokenAmount,\\n            WrapperValuesInside memory wrapperValuesInside\\n        );\\n\\n    function getSumAX128() external view returns (int256);\\n\\n    function getExtrapolatedSumAX128() external view returns (int256);\\n\\n    function swapToken(\\n        int256 amount,\\n        uint160 sqrtPriceLimit,\\n        bool isNotional\\n    ) external returns (int256 vTokenAmount, int256 vBaseAmount);\\n\\n    function collectAccruedProtocolFee() external returns (uint256 accruedProtocolFeeLast);\\n\\n    function uniswapFeePips() external view returns (uint24);\\n\\n    function liquidityFeePips() external view returns (uint24);\\n\\n    function protocolFeePips() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0xcf53660d156db3db0e3ceafde0aee786ee2626520f7d472c23b3a914ac9bad53\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IVToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVToken is IERC20 {\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function setVPoolWrapper(address) external;\\n}\\n\",\"keccak256\":\"0x8e1184dcb9ac0492d2f3a1aaea68f021b5f3e634c9a43a357b7290db7bf1cb41\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Account.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.10;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\n\\nimport { DepositTokenSet } from './DepositTokenSet.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { SignedMath } from './SignedMath.sol';\\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\nimport { RTokenLib } from './RTokenLib.sol';\\nimport { VTokenPosition } from './VTokenPosition.sol';\\nimport { VTokenPositionSet } from './VTokenPositionSet.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVBase } from '../interfaces/IVBase.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary Account {\\n    using Account for Account.UserInfo;\\n    using DepositTokenSet for DepositTokenSet.Info;\\n    using FullMath for uint256;\\n    using LiquidityPositionSet for LiquidityPositionSet.Info;\\n    using SafeCast for uint256;\\n    using SignedFullMath for int256;\\n    using SignedMath for int256;\\n    using VTokenLib for IVToken;\\n    using VTokenPositionSet for VTokenPositionSet.Set;\\n    using VTokenPosition for VTokenPosition.Position;\\n\\n    /// @notice account info for user\\n    /// @param owner specifies the account owner\\n    /// @param tokenPositions is set of all open token positions\\n    /// @param tokenDeposits is set of all deposits\\n    struct UserInfo {\\n        address owner;\\n        VTokenPositionSet.Set tokenPositions;\\n        DepositTokenSet.Info tokenDeposits;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    struct ProtocolInfo {\\n        // rage trade pools\\n        mapping(IVToken => IClearingHouse.RageTradePool) pools;\\n        // conversion from compressed addressed to full address\\n        mapping(uint32 => RTokenLib.RToken) rTokens;\\n        mapping(uint32 => IVToken) vTokens;\\n        // virtual base\\n        IVBase vBase;\\n        // accounting settings\\n        LiquidationParams liquidationParams;\\n        uint256 minRequiredMargin;\\n        uint256 removeLimitOrderFee;\\n        uint256 minimumOrderNotional;\\n        // reserved for adding slots in future\\n        uint256[100] _emptySlots;\\n    }\\n\\n    /// @notice parameters to be used for liquidation\\n    /// @param liquidationFeeFraction specifies the percentage of notional value liquidated to be charged as liquidation fees (scaled by 1e5)\\n    /// @param tokenLiquidationPriceDeltaBps specifies the price delta from current perp price at which the liquidator should get the position (scaled by 1e4)\\n    /// @param insuranceFundFeeShare specifies the fee share for insurance fund out of the total liquidation fee (scaled by 1e4)\\n    struct LiquidationParams {\\n        uint16 liquidationFeeFraction;\\n        uint16 tokenLiquidationPriceDeltaBps;\\n        uint16 insuranceFundFeeShareBps;\\n    }\\n\\n    /// @notice error to denote that there is not enough margin for the transaction to go through\\n    /// @param accountMarketValue shows the account market value after the transaction is executed\\n    /// @param totalRequiredMargin shows the total required margin after the transaction is executed\\n    error InvalidTransactionNotEnoughMargin(int256 accountMarketValue, int256 totalRequiredMargin);\\n\\n    /// @notice error to denote that there is not enough profit during profit withdrawal\\n    /// @param totalProfit shows the value of positions at the time of execution after removing amount specified\\n    error InvalidTransactionNotEnoughProfit(int256 totalProfit);\\n\\n    /// @notice error to denote that there is enough margin, hence the liquidation is invalid\\n    /// @param accountMarketValue shows the account market value before liquidation\\n    /// @param totalRequiredMargin shows the total required margin before liquidation\\n    error InvalidLiquidationAccountAbovewater(int256 accountMarketValue, int256 totalRequiredMargin);\\n\\n    /// @notice error to denote that there are active ranges present during token liquidation, hence the liquidation is invalid\\n    /// @param vToken shows the token address for which range is active\\n    error InvalidLiquidationActiveRangePresent(IVToken vToken);\\n\\n    /// @notice denotes new account creation\\n    /// @param ownerAddress wallet address of account owner\\n    /// @param accountNo serial number of the account\\n    event AccountCreated(address indexed ownerAddress, uint256 accountNo);\\n\\n    /// @notice denotes deposit of margin\\n    /// @param accountNo serial number of the account\\n    /// @param rTokenAddress token in which margin is deposited\\n    /// @param amount amount of tokens deposited\\n    event DepositMargin(uint256 indexed accountNo, address indexed rTokenAddress, uint256 amount);\\n\\n    /// @notice denotes withdrawal of margin\\n    /// @param accountNo serial number of the account\\n    /// @param rTokenAddress token in which margin is withdrawn\\n    /// @param amount amount of tokens withdrawn\\n    event WithdrawMargin(uint256 indexed accountNo, address indexed rTokenAddress, uint256 amount);\\n\\n    /// @notice denotes withdrawal of profit in base token\\n    /// @param accountNo serial number of the account\\n    /// @param amount amount of profit withdrawn\\n    event UpdateProfit(uint256 indexed accountNo, int256 amount);\\n\\n    /// @notice denotes token position change\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token whose position was taken\\n    /// @param tokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @param baseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    event TokenPositionChange(\\n        uint256 indexed accountNo,\\n        IVToken indexed vToken,\\n        int256 tokenAmountOut,\\n        int256 baseAmountOut\\n    );\\n\\n    /// @notice denotes token position change due to liquidity add/remove\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token whose position was taken\\n    /// @param tickLower lower tick of the range updated\\n    /// @param tickUpper upper tick of the range updated\\n    /// @param tokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    event LiquidityTokenPositionChange(\\n        uint256 indexed accountNo,\\n        IVToken indexed vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int256 tokenAmountOut\\n    );\\n\\n    /// @notice denotes liquidity add/remove\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token whose position was taken\\n    /// @param tickLower lower tick of the range updated\\n    /// @param tickUpper upper tick of the range updated\\n    /// @param liquidityDelta change in liquidity value\\n    /// @param limitOrderType the type of range position\\n    /// @param tokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @param baseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    event LiquidityChange(\\n        uint256 indexed accountNo,\\n        IVToken indexed vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int128 liquidityDelta,\\n        IClearingHouse.LimitOrderType limitOrderType,\\n        int256 tokenAmountOut,\\n        int256 baseAmountOut\\n    );\\n\\n    /// @notice denotes funding payment for a range / token position\\n    /// @dev for a token position tickLower = tickUpper = 0\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token for which funding was paid\\n    /// @param tickLower lower tick of the range for which funding was paid\\n    /// @param tickUpper upper tick of the range for which funding was paid\\n    /// @param amount amount of funding paid (negative) or received (positive)\\n    event FundingPayment(\\n        uint256 indexed accountNo,\\n        IVToken indexed vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int256 amount\\n    );\\n\\n    /// @notice denotes fee payment for a range / token position\\n    /// @dev for a token position tickLower = tickUpper = 0\\n    /// @param accountNo serial number of the account\\n    /// @param vToken address of token for which fee was paid\\n    /// @param tickLower lower tick of the range for which fee was paid\\n    /// @param tickUpper upper tick of the range for which fee was paid\\n    /// @param amount amount of fee paid (negative) or received (positive)\\n    event LiquidityFee(\\n        uint256 indexed accountNo,\\n        IVToken indexed vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int256 amount\\n    );\\n\\n    /// @notice denotes protocol fee withdrawal from a pool wrapper\\n    /// @param wrapperAddress address of token for which fee was paid\\n    /// @param feeAmount amount of protocol fee which was withdrawn\\n    event ProtocolFeeWithdrawm(address indexed wrapperAddress, uint256 feeAmount);\\n\\n    /// @notice denotes range position liquidation event\\n    /// @dev all range positions are liquidated and the current tokens inside the range are added in as token positions to the account\\n    /// @param accountNo serial number of the account\\n    /// @param keeperAddress address of keeper who performed the liquidation\\n    /// @param liquidationFee total liquidation fee charged to the account\\n    /// @param keeperFee total liquidaiton fee paid to the keeper (positive only)\\n    /// @param insuranceFundFee total liquidaiton fee paid to the insurance fund (can be negative in case the account is not enought to cover the fee)\\n    event LiquidateRanges(\\n        uint256 indexed accountNo,\\n        address indexed keeperAddress,\\n        int256 liquidationFee,\\n        int256 keeperFee,\\n        int256 insuranceFundFee\\n    );\\n\\n    /// @notice denotes token position liquidation event\\n    /// @dev the selected token position is take from the current account and moved to liquidatorAccount at a discounted prive to current pool price\\n    /// @param accountNo serial number of the account\\n    /// @param liquidatorAccountNo  account which performed the liquidation\\n    /// @param vToken address of token for whose position was liquidated\\n    /// @param liquidationBps the fraction of current position which was liquidated in bps\\n    /// @param liquidationPriceX128 price at which liquidation was performed\\n    /// @param liquidatorPriceX128 discounted price at which tokens were transferred to the liquidator account\\n    /// @param insuranceFundFee total liquidaiton fee paid to the insurance fund (can be negative in case the account is not enough to cover the fee)\\n    event LiquidateTokenPosition(\\n        uint256 indexed accountNo,\\n        uint256 indexed liquidatorAccountNo,\\n        IVToken indexed vToken,\\n        uint16 liquidationBps,\\n        uint256 liquidationPriceX128,\\n        uint256 liquidatorPriceX128,\\n        int256 insuranceFundFee\\n    );\\n\\n    /// @notice checks if 'account' is initialized\\n    /// @param account pointer to 'account' struct\\n    function isInitialized(UserInfo storage account) internal view returns (bool) {\\n        return account.owner != address(0);\\n    }\\n\\n    /// @notice updates the base balance for 'account' by 'amount'\\n    /// @param account pointer to 'account' struct\\n    /// @param amount amount of balance to update\\n    /// @param protocol platform constants\\n    function updateBaseBalance(\\n        UserInfo storage account,\\n        int256 amount,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (IClearingHouse.BalanceAdjustments memory balanceAdjustments) {\\n        balanceAdjustments = IClearingHouse.BalanceAdjustments(amount, 0, 0);\\n        account.tokenPositions.update(balanceAdjustments, IVToken(address(protocol.vBase)), protocol);\\n    }\\n\\n    /// @notice increases deposit balance of 'vToken' by 'amount'\\n    /// @param account account to deposit balance into\\n    /// @param realTokenAddress address of token to deposit\\n    /// @param amount amount of token to deposit\\n    function addMargin(\\n        UserInfo storage account,\\n        address realTokenAddress,\\n        uint256 amount\\n    ) external {\\n        // vBASE should be an immutable constant\\n        account.tokenDeposits.increaseBalance(realTokenAddress, amount);\\n    }\\n\\n    /// @notice reduces deposit balance of 'vToken' by 'amount'\\n    /// @param account account to deposit balance into\\n    /// @param realTokenAddress address of token to remove\\n    /// @param amount amount of token to remove\\n    /// @param protocol set of all constants and token addresses\\n    function removeMargin(\\n        UserInfo storage account,\\n        address realTokenAddress,\\n        uint256 amount,\\n        Account.ProtocolInfo storage protocol\\n    ) external {\\n        account.tokenDeposits.decreaseBalance(realTokenAddress, amount);\\n\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice updates 'amount' of profit generated in base token\\n    /// @param account account to remove profit from\\n    /// @param amount amount of profit(base token) to add/remove\\n    /// @param protocol set of all constants and token addresses\\n    function updateProfit(\\n        UserInfo storage account,\\n        int256 amount,\\n        Account.ProtocolInfo storage protocol\\n    ) external {\\n        account.updateBaseBalance(amount, protocol);\\n\\n        if (amount < 0) {\\n            account.checkIfProfitAvailable(protocol);\\n            account.checkIfMarginAvailable(true, protocol);\\n        }\\n    }\\n\\n    /// @notice returns market value and required margin for the account based on current market conditions\\n    /// @dev (In case requiredMargin < minRequiredMargin then requiredMargin = minRequiredMargin)\\n    /// @param account account to check\\n    /// @param isInitialMargin true to use initial margin factor and false to use maintainance margin factor for calcualtion of required margin\\n    /// @param protocol set of all constants and token addresses\\n    /// @return accountMarketValue total market value of all the positions (token ) and deposits\\n    /// @return totalRequiredMargin total margin required to keep the account above selected margin requirement (intial/maintainance)\\n    function getAccountValueAndRequiredMargin(\\n        UserInfo storage account,\\n        bool isInitialMargin,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 accountMarketValue, int256 totalRequiredMargin) {\\n        accountMarketValue = account.getAccountValue(protocol);\\n\\n        totalRequiredMargin = account.tokenPositions.getRequiredMargin(isInitialMargin, protocol.vTokens, protocol);\\n        if (!account.tokenPositions.isEmpty()) {\\n            totalRequiredMargin = totalRequiredMargin < int256(protocol.minRequiredMargin)\\n                ? int256(protocol.minRequiredMargin)\\n                : totalRequiredMargin;\\n        }\\n        return (accountMarketValue, totalRequiredMargin);\\n    }\\n\\n    /// @notice returns market value for the account positions based on current market conditions\\n    /// @param account account to check\\n    /// @param protocol set of all constants and token addresses\\n    /// @return accountPositionProfits total market value of all the positions (token ) and deposits\\n    function getAccountPositionProfits(UserInfo storage account, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256 accountPositionProfits)\\n    {\\n        accountPositionProfits = account.tokenPositions.getAccountMarketValue(protocol.vTokens, protocol);\\n    }\\n\\n    /// @notice returns market value for the account based on current market conditions\\n    /// @param account account to check\\n    /// @param protocol set of all constants and token addresses\\n    /// @return accountMarketValue total market value of all the positions (token ) and deposits\\n    function getAccountValue(UserInfo storage account, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256 accountMarketValue)\\n    {\\n        accountMarketValue = account.getAccountPositionProfits(protocol);\\n        accountMarketValue += account.tokenDeposits.getAllDepositAccountMarketValue(protocol);\\n        return (accountMarketValue);\\n    }\\n\\n    /// @notice checks if market value > required margin else revert with InvalidTransactionNotEnoughMargin\\n    /// @param account account to check\\n    /// @param isInitialMargin true to use initialMarginFactor and false to use maintainance margin factor for calcualtion of required margin\\n    /// @param protocol set of all constants and token addresses\\n    function checkIfMarginAvailable(\\n        UserInfo storage account,\\n        bool isInitialMargin,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view {\\n        (int256 accountMarketValue, int256 totalRequiredMargin) = account.getAccountValueAndRequiredMargin(\\n            isInitialMargin,\\n            protocol\\n        );\\n        if (accountMarketValue < totalRequiredMargin)\\n            revert InvalidTransactionNotEnoughMargin(accountMarketValue, totalRequiredMargin);\\n    }\\n\\n    /// @notice checks if profit is available to withdraw base token (token value of all positions > 0) else revert with InvalidTransactionNotEnoughProfit\\n    /// @param account account to check\\n    /// @param protocol set of all constants and token addresses\\n    function checkIfProfitAvailable(UserInfo storage account, Account.ProtocolInfo storage protocol) internal view {\\n        int256 totalPositionValue = account.getAccountPositionProfits(protocol);\\n        if (totalPositionValue < 0) revert InvalidTransactionNotEnoughProfit(totalPositionValue);\\n    }\\n\\n    /// @notice swaps 'vToken' of token amount equal to 'swapParams.amount'\\n    /// @notice if vTokenAmount>0 then the swap is a long or close short and if vTokenAmount<0 then swap is a short or close long\\n    /// @notice isNotional specifies whether the amount represents token amount (false) or base amount(true)\\n    /// @notice isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\\n    /// @notice sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\\n    /// @param account account to swap tokens for\\n    /// @param vToken address of the token to swap\\n    /// @param swapParams parameters for the swap (Includes - amount, sqrtPriceLimit, isNotional, isPartialAllowed)\\n    /// @param protocol set of all constants and token addresses\\n    function swapToken(\\n        UserInfo storage account,\\n        IVToken vToken,\\n        IClearingHouse.SwapParams memory swapParams,\\n        Account.ProtocolInfo storage protocol\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        // make a swap. vBaseIn and vTokenAmountOut (in and out wrt uniswap).\\n        // mints erc20 tokens in callback and send to the pool\\n        (vTokenAmountOut, vBaseAmountOut) = account.tokenPositions.swapToken(vToken, swapParams, protocol);\\n\\n        // after all the stuff, account should be above water\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice changes range liquidity 'vToken' of market value equal to 'vTokenNotional'\\n    /// @notice if 'liquidityDelta'>0 then liquidity is added and if 'liquidityChange'<0 then liquidity is removed\\n    /// @notice the liquidity change is reverted if the sqrt price at the time of execution is beyond 'slippageToleranceBps' of 'sqrtPriceCurrent' supplied\\n    /// @notice whenever liquidity change is done the internal token position is taken out. If 'closeTokenPosition' is true this is swapped out else it is added to the current token position\\n    /// @param account account to change liquidity\\n    /// @param vToken address of token to swap\\n    /// @param liquidityChangeParams parameters including lower tick, upper tick, liquidity delta, sqrtPriceCurrent, slippageToleranceBps, closeTokenPosition, limit order type\\n    /// @param protocol set of all constants and token addresses\\n    function liquidityChange(\\n        UserInfo storage account,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        Account.ProtocolInfo storage protocol\\n    ) external returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        // mint/burn tokens + fee + funding payment\\n        (vTokenAmountOut, vBaseAmountOut) = account.tokenPositions.liquidityChange(\\n            vToken,\\n            liquidityChangeParams,\\n            protocol\\n        );\\n\\n        // after all the stuff, account should be above water\\n        account.checkIfMarginAvailable(true, protocol);\\n    }\\n\\n    /// @notice computes keeper fee and insurance fund fee in case of liquidity position liquidation\\n    /// @dev keeperFee = liquidationFee*(1-insuranceFundFeeShare)+fixFee\\n    /// @dev insuranceFundFee = accountMarketValue - keeperFee (if accountMarketValue is not enough to cover the fees) else insurancFundFee = liquidationFee - keeperFee + fixFee\\n    /// @param accountMarketValue market value of account\\n    /// @param liquidationFee total liquidation fee to be charged to the account in case of an on time liquidation\\n    /// @param liquidationParams parameters including fixFee, insuranceFundFeeShareBps\\n    /// @return keeperFee map of vTokens allowed on the platform\\n    /// @return insuranceFundFee poolwrapper for token\\n    function computeLiquidationFees(\\n        int256 accountMarketValue,\\n        int256 liquidationFee,\\n        uint256 fixFee,\\n        LiquidationParams memory liquidationParams\\n    ) internal pure returns (int256 keeperFee, int256 insuranceFundFee) {\\n        int256 fixFeeInt = int256(fixFee);\\n        keeperFee = liquidationFee.mulDiv(1e4 - liquidationParams.insuranceFundFeeShareBps, 1e4) + fixFeeInt;\\n        if (accountMarketValue - fixFeeInt - liquidationFee < 0) {\\n            insuranceFundFee = accountMarketValue - keeperFee;\\n        } else {\\n            insuranceFundFee = liquidationFee - keeperFee + fixFeeInt;\\n        }\\n    }\\n\\n    /// @notice liquidates all range positions in case the account is under water\\n    /// @notice charges a liquidation fee to the account and pays partially to the insurance fund and rest to the keeper.\\n    /// @dev insurance fund covers the remaining fee if the account market value is not enough\\n    /// @param account account to liquidate\\n    /// @param protocol set of all constants and token addresses\\n    function liquidateLiquidityPositions(\\n        UserInfo storage account,\\n        uint256 fixFee,\\n        Account.ProtocolInfo storage protocol\\n    ) external returns (int256 keeperFee, int256 insuranceFundFee) {\\n        // check basis maintanace margin\\n        int256 accountMarketValue;\\n        int256 totalRequiredMargin;\\n        int256 notionalAmountClosed;\\n\\n        (accountMarketValue, totalRequiredMargin) = account.getAccountValueAndRequiredMargin(false, protocol);\\n        if (accountMarketValue > totalRequiredMargin) {\\n            revert InvalidLiquidationAccountAbovewater(accountMarketValue, totalRequiredMargin);\\n        }\\n        notionalAmountClosed = account.tokenPositions.liquidateLiquidityPositions(protocol.vTokens, protocol);\\n\\n        int256 liquidationFee = notionalAmountClosed.mulDiv(protocol.liquidationParams.liquidationFeeFraction, 1e5);\\n        (keeperFee, insuranceFundFee) = computeLiquidationFees(\\n            accountMarketValue,\\n            liquidationFee,\\n            fixFee,\\n            protocol.liquidationParams\\n        );\\n\\n        account.updateBaseBalance(-(keeperFee + insuranceFundFee), protocol);\\n    }\\n\\n    /// @notice computes the liquidation & liquidator price and insurance fund fee for token liquidation\\n    /// @param tokensToTrade amount of tokens to trade for liquidation\\n    /// @param vToken vToken being liquidated\\n    /// @param protocol set of all constants and token addresses\\n    function getLiquidationPriceX128AndFee(\\n        int256 tokensToTrade,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 liquidationPriceX128,\\n            uint256 liquidatorPriceX128,\\n            int256 insuranceFundFee\\n        )\\n    {\\n        uint16 maintainanceMarginFactor = vToken.getMarginRatio(false, protocol);\\n        uint256 priceX128 = vToken.getVirtualCurrentPriceX128(protocol);\\n        uint256 priceDeltaX128 = priceX128.mulDiv(protocol.liquidationParams.tokenLiquidationPriceDeltaBps, 1e4).mulDiv(\\n            maintainanceMarginFactor,\\n            1e5\\n        );\\n        if (tokensToTrade < 0) {\\n            liquidationPriceX128 = priceX128 - priceDeltaX128;\\n            liquidatorPriceX128 =\\n                priceX128 -\\n                priceDeltaX128.mulDiv(1e4 - protocol.liquidationParams.insuranceFundFeeShareBps, 1e4);\\n            insuranceFundFee = -tokensToTrade.mulDiv(liquidatorPriceX128 - liquidationPriceX128, FixedPoint128.Q128);\\n        } else {\\n            liquidationPriceX128 = priceX128 + priceDeltaX128;\\n            liquidatorPriceX128 =\\n                priceX128 +\\n                priceDeltaX128.mulDiv(1e4 - protocol.liquidationParams.insuranceFundFeeShareBps, 1e4);\\n            insuranceFundFee = tokensToTrade.mulDiv(liquidationPriceX128 - liquidatorPriceX128, FixedPoint128.Q128);\\n        }\\n    }\\n\\n    /// @notice exchanges token position between account (at liquidationPrice) and liquidator account (at liquidator price)\\n    /// @notice also charges fixFee from the account and pays to liquidator\\n    /// @param account is account being liquidated\\n    /// @param liquidatorAccount is account of liquidator\\n    /// @param vToken map of vTokens allowed on the platform\\n    /// @param tokensToTrade number of tokens to trade\\n    /// @param liquidationPriceX128 price at which tokens should be traded out\\n    /// @param liquidatorPriceX128 discounted price at which tokens should be given to liquidator\\n    /// @param fixFee is the fee to be given to liquidator to compensate for gas price\\n    /// @param protocol platform constants\\n    function updateLiquidationAccounts(\\n        UserInfo storage account,\\n        UserInfo storage liquidatorAccount,\\n        IVToken vToken,\\n        int256 tokensToTrade,\\n        uint256 liquidationPriceX128,\\n        uint256 liquidatorPriceX128,\\n        int256 fixFee,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (IClearingHouse.BalanceAdjustments memory liquidatorBalanceAdjustments) {\\n        vToken.vPoolWrapper(protocol).updateGlobalFundingState();\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments = IClearingHouse.BalanceAdjustments({\\n            vBaseIncrease: -tokensToTrade.mulDiv(liquidationPriceX128, FixedPoint128.Q128) - fixFee,\\n            vTokenIncrease: tokensToTrade,\\n            traderPositionIncrease: tokensToTrade\\n        });\\n\\n        account.tokenPositions.update(balanceAdjustments, vToken, protocol);\\n        emit Account.TokenPositionChange(\\n            account.tokenPositions.accountNo,\\n            vToken,\\n            balanceAdjustments.vTokenIncrease,\\n            balanceAdjustments.vBaseIncrease\\n        );\\n\\n        liquidatorBalanceAdjustments = IClearingHouse.BalanceAdjustments({\\n            vBaseIncrease: tokensToTrade.mulDiv(liquidatorPriceX128, FixedPoint128.Q128) + fixFee,\\n            vTokenIncrease: -tokensToTrade,\\n            traderPositionIncrease: -tokensToTrade\\n        });\\n\\n        liquidatorAccount.tokenPositions.update(liquidatorBalanceAdjustments, vToken, protocol);\\n        emit Account.TokenPositionChange(\\n            liquidatorAccount.tokenPositions.accountNo,\\n            vToken,\\n            liquidatorBalanceAdjustments.vTokenIncrease,\\n            liquidatorBalanceAdjustments.vBaseIncrease\\n        );\\n    }\\n\\n    /// @notice liquidates all range positions in case the account is under water\\n    /// @param account account to liquidate\\n    /// @param vToken address of token to swap\\n    /// @param protocol set of all constants and token addresses\\n    function liquidateTokenPosition(\\n        UserInfo storage account,\\n        UserInfo storage liquidatorAccount,\\n        uint16 liquidationBps,\\n        IVToken vToken,\\n        uint256 fixFee,\\n        Account.ProtocolInfo storage protocol\\n    )\\n        external\\n        returns (int256 insuranceFundFee, IClearingHouse.BalanceAdjustments memory liquidatorBalanceAdjustments)\\n    {\\n        if (account.tokenPositions.getIsTokenRangeActive(vToken, protocol))\\n            revert InvalidLiquidationActiveRangePresent(vToken);\\n\\n        {\\n            (int256 accountMarketValue, int256 totalRequiredMargin) = account.getAccountValueAndRequiredMargin(\\n                false,\\n                protocol\\n            );\\n\\n            if (accountMarketValue > totalRequiredMargin) {\\n                revert InvalidLiquidationAccountAbovewater(accountMarketValue, totalRequiredMargin);\\n            }\\n        }\\n\\n        int256 tokensToTrade;\\n        {\\n            VTokenPosition.Position storage vTokenPosition = account.tokenPositions.getTokenPosition(\\n                vToken,\\n                false,\\n                protocol\\n            );\\n            tokensToTrade = -vTokenPosition.balance.mulDiv(liquidationBps, 1e4);\\n        }\\n\\n        uint256 liquidationPriceX128;\\n        uint256 liquidatorPriceX128;\\n        {\\n            (liquidationPriceX128, liquidatorPriceX128, insuranceFundFee) = getLiquidationPriceX128AndFee(\\n                tokensToTrade,\\n                vToken,\\n                protocol\\n            );\\n\\n            liquidatorBalanceAdjustments = updateLiquidationAccounts(\\n                account,\\n                liquidatorAccount,\\n                vToken,\\n                tokensToTrade,\\n                liquidationPriceX128,\\n                liquidatorPriceX128,\\n                int256(fixFee),\\n                protocol\\n            );\\n        }\\n        {\\n            int256 accountMarketValueFinal = account.getAccountValue(protocol);\\n\\n            if (accountMarketValueFinal < 0) {\\n                insuranceFundFee = accountMarketValueFinal;\\n                account.updateBaseBalance(-accountMarketValueFinal, protocol);\\n            }\\n        }\\n\\n        liquidatorAccount.checkIfMarginAvailable(false, protocol);\\n        emit Account.LiquidateTokenPosition(\\n            account.tokenPositions.accountNo,\\n            liquidatorAccount.tokenPositions.accountNo,\\n            vToken,\\n            liquidationBps,\\n            liquidationPriceX128,\\n            liquidatorPriceX128,\\n            insuranceFundFee\\n        );\\n    }\\n\\n    /// @notice removes limit order based on the current price position (keeper call)\\n    /// @param account account to liquidate\\n    /// @param vToken address of token for the range\\n    /// @param tickLower lower tick index for the range\\n    /// @param tickUpper upper tick index for the range\\n    /// @param protocol platform constants\\n    function removeLimitOrder(\\n        UserInfo storage account,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 limitOrderFeeAndFixFee,\\n        Account.ProtocolInfo storage protocol\\n    ) external {\\n        account.tokenPositions.removeLimitOrder(vToken, tickLower, tickUpper, protocol);\\n\\n        account.updateBaseBalance(-int256(limitOrderFeeAndFixFee), protocol);\\n    }\\n\\n    function getView(UserInfo storage account, Account.ProtocolInfo storage protocol)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            int256 vBaseBalance,\\n            IClearingHouse.DepositTokenView[] memory tokenDeposits,\\n            IClearingHouse.VTokenPositionView[] memory tokenPositions\\n        )\\n    {\\n        owner = account.owner;\\n        tokenDeposits = account.tokenDeposits.getView(protocol);\\n        (vBaseBalance, tokenPositions) = account.tokenPositions.getView(protocol);\\n    }\\n}\\n\",\"keccak256\":\"0xeee6606955accf5a29fd8afd301452bd84ae68b1eb83d1008023c8b4a1b47b6f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Arbitrum.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { Calldata } from './Calldata.sol';\\n\\nimport { ArbAggregator } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbAggregator.sol';\\nimport { ArbSys } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbSys.sol';\\nimport { ArbGasInfo } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbGasInfo.sol';\\n\\nlibrary Arbitrum {\\n    ArbAggregator constant arbAggregator = ArbAggregator(0x000000000000000000000000000000000000006D);\\n    ArbSys constant arbSys = ArbSys(0x0000000000000000000000000000000000000064);\\n    ArbGasInfo constant arbGasInfo = ArbGasInfo(0x000000000000000000000000000000000000006C);\\n\\n    function getStorageGasAvailable() internal view returns (uint256) {\\n        (bool success, bytes memory data) = address(arbSys).staticcall(\\n            abi.encodeWithSelector(arbSys.getStorageGasAvailable.selector)\\n        );\\n        if (!success || data.length == 0) {\\n            return 0;\\n        }\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function getCurrentTxL1GasFees() internal view returns (uint256) {\\n        (bool success, bytes memory data) = address(arbSys).staticcall(\\n            abi.encodeWithSelector(arbGasInfo.getCurrentTxL1GasFees.selector)\\n        );\\n        if (!success || data.length == 0) {\\n            return 0;\\n        }\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function getTxGasPrice() internal view returns (uint256) {\\n        return tx.gasprice;\\n    }\\n}\\n\",\"keccak256\":\"0xff11d44464ac584d18b9faf666fff5957bb5e18d4dc83f178bfcce26842233ae\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Bisection.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @title Bisection Method\\n/// @notice https://en.wikipedia.org/wiki/Bisection_method\\nlibrary Bisection {\\n    error SolutionOutOfBounds(uint256 y_target, uint160 x_lower, uint160 x_upper);\\n\\n    /// @notice Finds the solution to the equation f(x) = y_target using the bisection method\\n    /// @param f: strictly increasing function f: uint160 -> uint256\\n    /// @param y_target: the target value of f(x)\\n    /// @param x_lower: the lower bound for x\\n    /// @param x_upper: the upper bound for x\\n    /// @return x_target: the rounded down solution to the equation f(x) = y_target\\n    function findSolution(\\n        function(uint160) pure returns (uint256) f,\\n        uint256 y_target,\\n        uint160 x_lower,\\n        uint160 x_upper\\n    ) internal pure returns (uint160) {\\n        // compute y at the bounds\\n        uint256 y_lower = f(x_lower);\\n        uint256 y_upper = f(x_upper);\\n\\n        // if y is out of the bounds then revert\\n        if (y_target < y_lower || y_target > y_upper) revert SolutionOutOfBounds(y_target, x_lower, x_upper);\\n\\n        // bisect repeatedly until the solution is within an error of 1 unit\\n        uint256 y_mid;\\n        uint160 x_mid;\\n        while (x_upper - x_lower > 1) {\\n            x_mid = x_lower + (x_upper - x_lower) / 2;\\n            y_mid = f(x_mid);\\n            if (y_mid > y_target) {\\n                x_upper = x_mid;\\n                y_upper = y_mid;\\n            } else {\\n                x_lower = x_mid;\\n                y_lower = y_mid;\\n            }\\n        }\\n\\n        // at this point, x_upper - x_lower is either 0 or 1\\n        // if it is 1 then check if x_upper is the solution, else return x_lower as the rounded down solution\\n        return x_lower != x_upper && f(x_upper) == y_target ? x_upper : x_lower;\\n    }\\n}\\n\",\"keccak256\":\"0x2c8dacdd9d1e63925b32ce642a3b358e12e81a11f75dbb135ade48a4a179f03b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Calldata.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Calldata {\\n    error CalldataLengthExceeded(uint256 length, uint256 limit);\\n\\n    function limit(uint256 limit_) internal pure {\\n        if (msg.data.length > limit_) {\\n            revert CalldataLengthExceeded(msg.data.length, limit_);\\n        }\\n    }\\n\\n    function calculateCostUnits(bytes calldata data) internal pure returns (uint256 cost) {\\n        unchecked {\\n            for (uint256 i; i < data.length; i++) {\\n                cost += data[i] == bytes1(0) ? 4 : 16;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x57e3f4da5e47fbba4cc2210feabe20223cdf6f508d3e21f65a9466fc6275e172\",\"license\":\"UNLICENSED\"},\"contracts/libraries/DepositTokenSet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { RTokenLib } from './RTokenLib.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { Uint32L8ArrayLib } from './Uint32L8Array.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary DepositTokenSet {\\n    using RTokenLib for RTokenLib.RToken;\\n    using RTokenLib for address;\\n    using Uint32L8ArrayLib for uint32[8];\\n    using SignedFullMath for int256;\\n\\n    struct Info {\\n        // fixed length array of truncate(tokenAddress)\\n        // open positions in 8 different pairs at same time.\\n        // single per pool because it's fungible, allows for having\\n        uint32[8] active;\\n        mapping(uint32 => uint256) deposits;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    // add overrides that accept vToken or truncated\\n    function increaseBalance(\\n        Info storage info,\\n        address realTokenAddress,\\n        uint256 amount\\n    ) internal {\\n        uint32 truncated = realTokenAddress.truncate();\\n\\n        // consider vbase as always active because it is base (actives are needed for margin check)\\n        info.active.include(truncated);\\n\\n        info.deposits[realTokenAddress.truncate()] += amount;\\n    }\\n\\n    function decreaseBalance(\\n        Info storage info,\\n        address realTokenAddress,\\n        uint256 amount\\n    ) internal {\\n        uint32 truncated = realTokenAddress.truncate();\\n\\n        require(info.deposits[truncated] >= amount);\\n        info.deposits[truncated] -= amount;\\n\\n        if (info.deposits[truncated] == 0) {\\n            info.active.exclude(truncated);\\n        }\\n    }\\n\\n    function getAllDepositAccountMarketValue(Info storage set, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        int256 accountMarketValue;\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n\\n            if (truncated == 0) break;\\n            RTokenLib.RToken storage token = protocol.rTokens[truncated];\\n\\n            accountMarketValue += int256(set.deposits[truncated]).mulDiv(\\n                token.getRealTwapPriceX128(),\\n                FixedPoint128.Q128\\n            );\\n        }\\n        return accountMarketValue;\\n    }\\n\\n    function getView(Info storage set, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (IClearingHouse.DepositTokenView[] memory depositTokens)\\n    {\\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\\n        depositTokens = new IClearingHouse.DepositTokenView[](numberOfTokenPositions);\\n\\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\\n            depositTokens[i].rTokenAddress = address(protocol.rTokens[set.active[i]].tokenAddress);\\n            depositTokens[i].balance = set.deposits[set.active[i]];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3540ad7824b5843882838ea70648ae0b835532047a3e6dba341223aafd25a93\",\"license\":\"UNLICENSED\"},\"contracts/libraries/FundingPayment.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\n/// @notice Funding Payment Logic used to distribute the FP bill paid by traders among the LPs in the liquidity range\\nlibrary FundingPayment {\\n    using FullMath for uint256;\\n    using SignedFullMath for int256;\\n\\n    struct Info {\\n        // FR * P * dt\\n        int256 sumAX128;\\n        // trade token amount / liqidity\\n        int256 sumBX128;\\n        // sum(a * sumB)\\n        int256 sumFpX128;\\n        // time when state was last updated\\n        uint48 timestampLast;\\n    }\\n\\n    function update(\\n        Info storage info,\\n        int256 tokenAmount,\\n        uint256 liquidity,\\n        uint48 blockTimestamp,\\n        uint256 realPriceX128,\\n        uint256 virtualPriceX128\\n    ) internal {\\n        int256 a = nextAX128(info.timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\\n        info.sumFpX128 += a.mulDivRoundingDown(info.sumBX128, int256(FixedPoint128.Q128));\\n        info.sumAX128 += a;\\n        info.sumBX128 += tokenAmount.mulDiv(int256(FixedPoint128.Q128), int256(liquidity));\\n        info.timestampLast = blockTimestamp;\\n    }\\n\\n    /// @notice Positive A value means at this duration, longs pay shorts. Negative means shorts pay longs.\\n    /// @param timestampLast start timestamp of duration\\n    /// @param blockTimestamp end timestamp of duration\\n    /// @param realPriceX128 spot price of token, used to calculate funding rate\\n    /// @param virtualPriceX128 futures price of token, used to calculate funding rate\\n    /// @return aX128 value called \\\"a\\\" (see funding payment math documentation)\\n    function nextAX128(\\n        uint48 timestampLast,\\n        uint48 blockTimestamp,\\n        uint256 realPriceX128,\\n        uint256 virtualPriceX128\\n    ) internal pure returns (int256 aX128) {\\n        return\\n            (int256(realPriceX128) - int256(virtualPriceX128)).mulDiv(virtualPriceX128, realPriceX128).mulDiv(\\n                blockTimestamp - timestampLast,\\n                1 days\\n            );\\n    }\\n\\n    function extrapolatedSumAX128(\\n        int256 sumAX128,\\n        uint48 timestampLast,\\n        uint48 blockTimestamp,\\n        uint256 realPriceX128,\\n        uint256 virtualPriceX128\\n    ) internal pure returns (int256) {\\n        return sumAX128 + nextAX128(timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\\n    }\\n\\n    /// @notice Extrapolates (updates) the value of sumFp by adding the missing component to it using sumAGlobalX128\\n    /// @param sumAX128 sumA value that is recorded from global at some point in time\\n    /// @param sumBX128 sumB value that is recorded from global at same point in time as sumA\\n    /// @param sumFpX128 sumFp value that is recorded from global at same point in time as sumA and sumB\\n    /// @param sumAGlobalX128 latest sumA value (taken from global), used to extrapolate the sumFp\\n    function extrapolatedSumFpX128(\\n        int256 sumAX128,\\n        int256 sumBX128,\\n        int256 sumFpX128,\\n        int256 sumAGlobalX128\\n    ) internal pure returns (int256) {\\n        return sumFpX128 + sumBX128.mulDiv(sumAGlobalX128 - sumAX128, int256(FixedPoint128.Q128));\\n    }\\n\\n    /// @notice Positive bill is rewarded to LPs, Negative bill is charged from LPs\\n    /// @param sumAX128 latest value of sumA (to be taken from global state)\\n    /// @param sumFpInsideX128 latest value of sumFp inside range (to be computed using global state + tick state)\\n    /// @param sumAChkptX128 value of sumA when LP updated their liquidity last time\\n    /// @param sumBInsideChkptX128 value of sumB inside range when LP updated their liquidity last time\\n    /// @param sumFpInsideChkptX128 value of sumFp inside range when LP updated their liquidity last time\\n    /// @param liquidity amount of liquidity which was constant for LP in the time duration\\n    function bill(\\n        int256 sumAX128,\\n        int256 sumFpInsideX128,\\n        int256 sumAChkptX128,\\n        int256 sumBInsideChkptX128,\\n        int256 sumFpInsideChkptX128,\\n        uint256 liquidity\\n    ) internal pure returns (int256) {\\n        return\\n            (sumFpInsideX128 -\\n                extrapolatedSumFpX128(sumAChkptX128, sumBInsideChkptX128, sumFpInsideChkptX128, sumAX128))\\n                .mulDivRoundingDown(liquidity, FixedPoint128.Q128);\\n    }\\n\\n    /// @notice Positive bill is rewarded to Traders, Negative bill is charged from Traders\\n    /// @param sumAX128 latest value of sumA (to be taken from global state)\\n    /// @param sumAChkptX128 value of sumA when trader updated their netTraderPosition\\n    /// @param netTraderPosition oken amount which should be constant for time duration since sumAChkptX128 was recorded\\n    function bill(\\n        int256 sumAX128,\\n        int256 sumAChkptX128,\\n        int256 netTraderPosition\\n    ) internal pure returns (int256) {\\n        return netTraderPosition.mulDiv((sumAX128 - sumAChkptX128), int256(FixedPoint128.Q128));\\n    }\\n}\\n\",\"keccak256\":\"0x8193b19a15a29321a828b7a1d1812f9b9480feb83fa880ed774c32255bb8b8ba\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LiquidityPosition.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { SqrtPriceMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { PriceMath } from './PriceMath.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\\nimport { FundingPayment } from './FundingPayment.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary LiquidityPosition {\\n    using PriceMath for uint160;\\n    using SignedFullMath for int256;\\n    using FullMath for uint256;\\n    using SafeCast for uint256;\\n    using LiquidityPosition for Info;\\n    using VTokenLib for IVToken;\\n    using SignedFullMath for int256;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    struct Info {\\n        //Extra boolean to check if it is limit order and uint to track limit price.\\n        IClearingHouse.LimitOrderType limitOrderType;\\n        // the tick range of the position;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // the liquidity of the position\\n        uint128 liquidity;\\n        int256 vTokenAmountIn;\\n        // funding payment checkpoints\\n        int256 sumALastX128;\\n        int256 sumBInsideLastX128;\\n        int256 sumFpInsideLastX128;\\n        // fee growth inside\\n        uint256 sumFeeInsideLastX128;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    error AlreadyInitialized();\\n    error IneligibleLimitOrderRemoval();\\n\\n    function isInitialized(Info storage info) internal view returns (bool) {\\n        return info.tickLower != 0 || info.tickUpper != 0;\\n    }\\n\\n    function checkValidLimitOrderRemoval(Info storage info, int24 currentTick) internal view {\\n        if (\\n            !((currentTick >= info.tickUpper && info.limitOrderType == IClearingHouse.LimitOrderType.UPPER_LIMIT) ||\\n                (currentTick <= info.tickLower && info.limitOrderType == IClearingHouse.LimitOrderType.LOWER_LIMIT))\\n        ) {\\n            revert IneligibleLimitOrderRemoval();\\n        }\\n    }\\n\\n    function initialize(\\n        Info storage position,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal {\\n        if (position.isInitialized()) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        position.tickLower = tickLower;\\n        position.tickUpper = tickUpper;\\n    }\\n\\n    function liquidityChange(\\n        Info storage position,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        int128 liquidity,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        (\\n            int256 basePrincipal,\\n            int256 vTokenPrincipal,\\n            IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside\\n        ) = wrapper.liquidityChange(position.tickLower, position.tickUpper, liquidity);\\n\\n        position.update(accountNo, vToken, wrapperValuesInside, balanceAdjustments);\\n\\n        balanceAdjustments.vBaseIncrease -= basePrincipal;\\n        balanceAdjustments.vTokenIncrease -= vTokenPrincipal;\\n\\n        emit Account.LiquidityChange(\\n            accountNo,\\n            vToken,\\n            position.tickLower,\\n            position.tickUpper,\\n            liquidity,\\n            position.limitOrderType,\\n            -vTokenPrincipal,\\n            -basePrincipal\\n        );\\n\\n        uint160 sqrtPriceCurrent = wrapper.vPool().sqrtPriceCurrent();\\n        int256 tokenAmountCurrent;\\n        {\\n            (tokenAmountCurrent, ) = position.tokenAmountsInRange(sqrtPriceCurrent, false);\\n            balanceAdjustments.traderPositionIncrease += (tokenAmountCurrent - position.vTokenAmountIn);\\n        }\\n\\n        if (liquidity > 0) {\\n            position.liquidity += uint128(liquidity);\\n        } else if (liquidity < 0) {\\n            position.liquidity -= uint128(liquidity * -1);\\n        }\\n\\n        position.vTokenAmountIn = tokenAmountCurrent + vTokenPrincipal;\\n    }\\n\\n    function update(\\n        Info storage position,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        int256 fundingPayment = position.unrealizedFundingPayment(\\n            wrapperValuesInside.sumAX128,\\n            wrapperValuesInside.sumFpInsideX128\\n        );\\n        balanceAdjustments.vBaseIncrease += fundingPayment;\\n\\n        int256 unrealizedLiquidityFee = position.unrealizedFees(wrapperValuesInside.sumFeeInsideX128).toInt256();\\n        balanceAdjustments.vBaseIncrease += unrealizedLiquidityFee;\\n\\n        emit Account.FundingPayment(accountNo, vToken, position.tickLower, position.tickUpper, fundingPayment);\\n        emit Account.LiquidityFee(accountNo, vToken, position.tickLower, position.tickUpper, unrealizedLiquidityFee);\\n        // updating checkpoints\\n        position.sumALastX128 = wrapperValuesInside.sumAX128;\\n        position.sumBInsideLastX128 = wrapperValuesInside.sumBInsideX128;\\n        position.sumFpInsideLastX128 = wrapperValuesInside.sumFpInsideX128;\\n        position.sumFeeInsideLastX128 = wrapperValuesInside.sumFeeInsideX128;\\n    }\\n\\n    function netPosition(Info storage position, IVPoolWrapper wrapper) internal view returns (int256) {\\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = wrapper.getValuesInside(\\n            position.tickLower,\\n            position.tickUpper\\n        );\\n        return position.netPosition(wrapperValuesInside.sumBInsideX128);\\n    }\\n\\n    function netPosition(Info storage position, int256 sumBInsideX128) internal view returns (int256) {\\n        return (sumBInsideX128 - position.sumBInsideLastX128).mulDiv(position.liquidity, FixedPoint128.Q128);\\n    }\\n\\n    // use funding payment lib\\n    function unrealizedFundingPayment(\\n        Info storage position,\\n        int256 sumAX128,\\n        int256 sumFpInsideX128\\n    ) internal view returns (int256 vBaseIncrease) {\\n        vBaseIncrease = -FundingPayment.bill(\\n            sumAX128,\\n            sumFpInsideX128,\\n            position.sumALastX128,\\n            position.sumBInsideLastX128,\\n            position.sumFpInsideLastX128,\\n            position.liquidity\\n        );\\n    }\\n\\n    function unrealizedFees(Info storage position, uint256 sumFeeInsideX128)\\n        internal\\n        view\\n        returns (uint256 vBaseIncrease)\\n    {\\n        vBaseIncrease = (sumFeeInsideX128 - position.sumFeeInsideLastX128).mulDiv(\\n            position.liquidity,\\n            FixedPoint128.Q128\\n        );\\n    }\\n\\n    function maxNetPosition(Info storage position) internal view returns (uint256) {\\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\\n\\n        return SqrtPriceMath.getAmount0Delta(sqrtPriceLowerX96, sqrtPriceUpperX96, position.liquidity, true);\\n    }\\n\\n    function baseValue(\\n        Info storage position,\\n        uint160 valuationSqrtPriceX96,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 baseValue_) {\\n        return position.baseValue(valuationSqrtPriceX96, vToken.vPoolWrapper(protocol));\\n    }\\n\\n    function tokenAmountsInRange(\\n        Info storage position,\\n        uint160 sqrtPriceCurrent,\\n        bool roundUp\\n    ) internal view returns (int256 vTokenAmount, int256 vBaseAmount) {\\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\\n\\n        // If price is outside the range, then consider it at the ends\\n        // for calculation of amounts\\n        uint160 sqrtPriceMiddleX96 = sqrtPriceCurrent;\\n        if (sqrtPriceCurrent < sqrtPriceLowerX96) {\\n            sqrtPriceMiddleX96 = sqrtPriceLowerX96;\\n        } else if (sqrtPriceCurrent > sqrtPriceUpperX96) {\\n            sqrtPriceMiddleX96 = sqrtPriceUpperX96;\\n        }\\n\\n        vTokenAmount = SqrtPriceMath\\n            .getAmount0Delta(sqrtPriceMiddleX96, sqrtPriceUpperX96, position.liquidity, roundUp)\\n            .toInt256();\\n        vBaseAmount = SqrtPriceMath\\n            .getAmount1Delta(sqrtPriceLowerX96, sqrtPriceMiddleX96, position.liquidity, roundUp)\\n            .toInt256();\\n    }\\n\\n    function baseValue(\\n        Info storage position,\\n        uint160 valuationSqrtPriceX96,\\n        IVPoolWrapper wrapper\\n    ) internal view returns (int256 baseValue_) {\\n        {\\n            (int256 vTokenAmount, int256 vBaseAmount) = position.tokenAmountsInRange(\\n                wrapper.vPool().sqrtPriceCurrent(),\\n                false\\n            );\\n            uint256 priceX128 = valuationSqrtPriceX96.toPriceX128();\\n            baseValue_ = vTokenAmount.mulDiv(priceX128, FixedPoint128.Q128) + vBaseAmount;\\n        }\\n        // adding fees\\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = wrapper.getExtrapolatedValuesInside(\\n            position.tickLower,\\n            position.tickUpper\\n        );\\n        baseValue_ += position.unrealizedFees(wrapperValuesInside.sumFeeInsideX128).toInt256();\\n        baseValue_ += position.unrealizedFundingPayment(\\n            wrapperValuesInside.sumAX128,\\n            wrapperValuesInside.sumFpInsideX128\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x38b7a8c44080201fc2f793ba9f2564ee1123c8e89af17a627307977f1dfa3f50\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LiquidityPositionSet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { Account } from './Account.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { Uint48Lib } from './Uint48.sol';\\nimport { Uint48L5ArrayLib } from './Uint48L5Array.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary LiquidityPositionSet {\\n    using LiquidityPosition for LiquidityPosition.Info;\\n    using LiquidityPositionSet for Info;\\n    using Uint48L5ArrayLib for uint48[5];\\n    using VTokenLib for IVToken;\\n\\n    struct Info {\\n        // multiple per pool because it's non-fungible, allows for 4 billion LP positions lifetime\\n        uint48[5] active;\\n        // concat(tickLow,tickHigh)\\n        mapping(uint48 => LiquidityPosition.Info) positions;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    error IllegalTicks(int24 tickLower, int24 tickUpper);\\n    error DeactivationFailed(int24 tickLower, int24 tickUpper, uint256 liquidity);\\n    error InactiveRange();\\n\\n    function isEmpty(Info storage set) internal view returns (bool) {\\n        return set.active[0] == 0;\\n    }\\n\\n    function isPositionActive(\\n        Info storage set,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (bool) {\\n        return _exists(set.active, tickLower, tickUpper);\\n    }\\n\\n    function baseValue(\\n        Info storage set,\\n        uint160 sqrtPriceCurrent,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 baseValue_) {\\n        baseValue_ = set.baseValue(sqrtPriceCurrent, vToken.vPoolWrapper(protocol));\\n    }\\n\\n    function baseValue(\\n        Info storage set,\\n        uint160 sqrtPriceCurrent,\\n        IVPoolWrapper wrapper // TODO refactor this\\n    ) internal view returns (int256 baseValue_) {\\n        for (uint256 i = 0; i < set.active.length; i++) {\\n            uint48 id = set.active[i];\\n            if (id == 0) break;\\n            baseValue_ += set.positions[id].baseValue(sqrtPriceCurrent, wrapper);\\n        }\\n    }\\n\\n    function maxNetPosition(Info storage set) internal view returns (uint256 risk) {\\n        for (uint256 i = 0; i < set.active.length; i++) {\\n            uint48 id = set.active[i];\\n            risk += set.positions[id].maxNetPosition();\\n        }\\n    }\\n\\n    function getLiquidityPosition(\\n        Info storage set,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (LiquidityPosition.Info storage position) {\\n        if (tickLower > tickUpper) {\\n            revert IllegalTicks(tickLower, tickUpper);\\n        }\\n\\n        uint48 positionId = Uint48Lib.concat(tickLower, tickUpper);\\n        position = set.positions[positionId];\\n\\n        if (!position.isInitialized()) revert InactiveRange();\\n        return position;\\n    }\\n\\n    function activate(\\n        Info storage set,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal returns (LiquidityPosition.Info storage position) {\\n        if (tickLower > tickUpper) {\\n            revert IllegalTicks(tickLower, tickUpper);\\n        }\\n\\n        uint48 positionId = _include(set.active, tickLower, tickUpper);\\n        position = set.positions[positionId];\\n\\n        if (!position.isInitialized()) {\\n            position.initialize(tickLower, tickUpper);\\n        }\\n    }\\n\\n    function deactivate(Info storage set, LiquidityPosition.Info storage position) internal {\\n        if (position.liquidity != 0) {\\n            revert DeactivationFailed(position.tickLower, position.tickUpper, position.liquidity);\\n        }\\n\\n        _exclude(set.active, position.tickLower, position.tickUpper);\\n    }\\n\\n    function _include(\\n        uint48[5] storage array,\\n        int24 val1,\\n        int24 val2\\n    ) private returns (uint48 index) {\\n        array.include(index = Uint48Lib.concat(val1, val2));\\n    }\\n\\n    function _exclude(\\n        uint48[5] storage array,\\n        int24 val1,\\n        int24 val2\\n    ) private returns (uint48 index) {\\n        array.exclude(index = Uint48Lib.concat(val1, val2));\\n    }\\n\\n    function _exists(\\n        uint48[5] storage array,\\n        int24 val1,\\n        int24 val2\\n    ) private view returns (bool) {\\n        return array.exists(Uint48Lib.concat(val1, val2));\\n    }\\n\\n    function liquidityChange(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        LiquidityPosition.Info storage position = set.activate(\\n            liquidityChangeParams.tickLower,\\n            liquidityChangeParams.tickUpper\\n        );\\n\\n        position.limitOrderType = liquidityChangeParams.limitOrderType;\\n\\n        set.liquidityChange(\\n            accountNo,\\n            vToken,\\n            position,\\n            liquidityChangeParams.liquidityDelta,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n    }\\n\\n    function liquidityChange(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        LiquidityPosition.Info storage position,\\n        int128 liquidity,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        position.liquidityChange(accountNo, vToken, liquidity, wrapper, balanceAdjustments);\\n\\n        emit Account.LiquidityTokenPositionChange(\\n            accountNo,\\n            vToken,\\n            position.tickLower,\\n            position.tickUpper,\\n            balanceAdjustments.vTokenIncrease\\n        );\\n\\n        if (position.liquidity == 0) {\\n            set.deactivate(position);\\n        }\\n    }\\n\\n    function closeLiquidityPosition(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        LiquidityPosition.Info storage position,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        set.liquidityChange(accountNo, vToken, position, -int128(position.liquidity), wrapper, balanceAdjustments);\\n    }\\n\\n    function removeLimitOrder(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        int24 currentTick,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        LiquidityPosition.Info storage position = set.getLiquidityPosition(tickLower, tickUpper);\\n        position.checkValidLimitOrderRemoval(currentTick);\\n        set.closeLiquidityPosition(accountNo, vToken, position, wrapper, balanceAdjustments);\\n    }\\n\\n    function closeAllLiquidityPositions(\\n        Info storage set,\\n        uint256 accountNo,\\n        IVToken vToken,\\n        IVPoolWrapper wrapper,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments\\n    ) internal {\\n        LiquidityPosition.Info storage position;\\n\\n        while (set.active[0] != 0) {\\n            IClearingHouse.BalanceAdjustments memory balanceAdjustmentsCurrent;\\n\\n            position = set.positions[set.active[0]];\\n\\n            set.closeLiquidityPosition(accountNo, vToken, position, wrapper, balanceAdjustmentsCurrent);\\n\\n            balanceAdjustments.vBaseIncrease += balanceAdjustmentsCurrent.vBaseIncrease;\\n            balanceAdjustments.vTokenIncrease += balanceAdjustmentsCurrent.vTokenIncrease;\\n            balanceAdjustments.traderPositionIncrease += balanceAdjustmentsCurrent.traderPositionIncrease;\\n        }\\n    }\\n\\n    function getView(Info storage set)\\n        internal\\n        view\\n        returns (IClearingHouse.LiquidityPositionView[] memory liquidityPositions)\\n    {\\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\\n        liquidityPositions = new IClearingHouse.LiquidityPositionView[](numberOfTokenPositions);\\n\\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\\n            liquidityPositions[i].limitOrderType = set.positions[set.active[i]].limitOrderType;\\n            liquidityPositions[i].tickLower = set.positions[set.active[i]].tickLower;\\n            liquidityPositions[i].tickUpper = set.positions[set.active[i]].tickUpper;\\n            liquidityPositions[i].liquidity = set.positions[set.active[i]].liquidity;\\n            liquidityPositions[i].vTokenAmountIn = set.positions[set.active[i]].vTokenAmountIn;\\n            liquidityPositions[i].sumALastX128 = set.positions[set.active[i]].sumALastX128;\\n            liquidityPositions[i].sumBInsideLastX128 = set.positions[set.active[i]].sumBInsideLastX128;\\n            liquidityPositions[i].sumFpInsideLastX128 = set.positions[set.active[i]].sumFpInsideLastX128;\\n            liquidityPositions[i].sumFeeInsideLastX128 = set.positions[set.active[i]].sumFeeInsideLastX128;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8fd454f92bc62efa4f2a226920b5751cf97b86d3b8b1a5e9eaeaecf40fdb671\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PriceMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { Bisection } from './Bisection.sol';\\n\\nlibrary PriceMath {\\n    using FullMath for uint256;\\n\\n    error IllegalSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @notice Computes the square of a sqrtPriceX96 value\\n    /// @param sqrtPriceX96: input price in Q128 format\\n    /// @return priceX128 : the square root of the input price in Q96 format\\n    function toPriceX128(uint160 sqrtPriceX96) internal pure returns (uint256 priceX128) {\\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\\n            revert IllegalSqrtPrice(sqrtPriceX96);\\n        }\\n\\n        priceX128 = uint256(sqrtPriceX96).mulDiv(sqrtPriceX96, 1 << 64);\\n    }\\n\\n    /// @notice Computes the square root of a priceX128 value\\n    /// @param priceX128: input price in Q128 format\\n    /// @return sqrtPriceX96 : the square root of the input price in Q96 format\\n    function toSqrtPriceX96(uint256 priceX128) internal pure returns (uint160 sqrtPriceX96) {\\n        // Uses bisection method to find solution to the equation toPriceX128(x) = priceX128\\n        sqrtPriceX96 = Bisection.findSolution(\\n            toPriceX128,\\n            priceX128,\\n            TickMath.MIN_SQRT_RATIO,\\n            TickMath.MAX_SQRT_RATIO - 1\\n        );\\n\\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\\n            revert IllegalSqrtPrice(sqrtPriceX96);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa09e20418e137ce32c5c30c5a0d3c09534b7c70da65bd244dd7c3e7a5102d05f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/RTokenLib.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { Create2 } from '@openzeppelin/contracts/utils/Create2.sol';\\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\\nimport { PriceMath } from './PriceMath.sol';\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { IOracle } from '../interfaces/IOracle.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nlibrary RTokenLib {\\n    using RTokenLib for RToken;\\n    using FullMath for uint256;\\n    using PriceMath for uint160;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    struct RToken {\\n        address tokenAddress;\\n        address oracleAddress;\\n        uint32 oracleTimeHorizon;\\n    }\\n\\n    function eq(RToken storage a, RToken storage b) internal view returns (bool) {\\n        return a.tokenAddress == b.tokenAddress;\\n    }\\n\\n    function eq(RToken storage a, address b) internal view returns (bool) {\\n        return a.tokenAddress == b;\\n    }\\n\\n    function truncate(address realTokenAddress) internal pure returns (uint32) {\\n        return uint32(uint160(realTokenAddress));\\n    }\\n\\n    function truncate(RToken storage token) internal view returns (uint32) {\\n        return uint32(uint160(token.tokenAddress));\\n    }\\n\\n    function realToken(RToken storage token) internal view returns (IERC20) {\\n        return IERC20(token.tokenAddress);\\n    }\\n\\n    function oracle(RToken storage token) internal view returns (IOracle) {\\n        return IOracle(token.oracleAddress);\\n    }\\n\\n    function getRealTwapSqrtPriceX96(RToken storage token) internal view returns (uint160 sqrtPriceX96) {\\n        return token.oracle().getTwapSqrtPriceX96(token.oracleTimeHorizon);\\n    }\\n\\n    function getRealTwapPriceX128(RToken storage token) internal view returns (uint256 priceX128) {\\n        return token.getRealTwapSqrtPriceX96().toPriceX128();\\n    }\\n}\\n\",\"keccak256\":\"0x2fa900c7593aa8c4c8abb3b22790af3b8c87f57276561c2fc29818db40b3046a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SignedFullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\nimport { SignedMath } from './SignedMath.sol';\\n\\nlibrary SignedFullMath {\\n    using SignedMath for int256;\\n\\n    function mulDiv(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = int256(FullMath.mulDiv(a < 0 ? uint256(-1 * a) : uint256(a), b, denominator));\\n        if (a < 0) {\\n            result = -result;\\n        }\\n    }\\n\\n    function mulDiv(\\n        int256 a,\\n        int256 b,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        bool resultPositive = true;\\n        uint256 _a;\\n        uint256 _b;\\n        uint256 _denominator;\\n\\n        (_a, resultPositive) = a.extractSign(resultPositive);\\n        (_b, resultPositive) = b.extractSign(resultPositive);\\n        (_denominator, resultPositive) = denominator.extractSign(resultPositive);\\n\\n        result = int256(FullMath.mulDiv(_a, _b, _denominator));\\n        if (!resultPositive) {\\n            result = -result;\\n        }\\n    }\\n\\n    /// @notice Rounds down towards negative infinity\\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\\n    function mulDivRoundingDown(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (result < 0 && _hasRemainder(a.absUint(), b, denominator)) {\\n            result += -1;\\n        }\\n    }\\n\\n    /// @notice Rounds down towards negative infinity\\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\\n    function mulDivRoundingDown(\\n        int256 a,\\n        int256 b,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (result < 0 && _hasRemainder(a.absUint(), b.absUint(), denominator.absUint())) {\\n            result += -1;\\n        }\\n    }\\n\\n    function _hasRemainder(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) private pure returns (bool hasRemainder) {\\n        assembly {\\n            let remainder := mulmod(a, b, denominator)\\n            if gt(remainder, 0) {\\n                hasRemainder := 1\\n            }\\n        }\\n    }\\n\\n    // function xor(bool a, bool b) private pure returns (bool) {\\n    //     return (a ? 1 : 0) ^ (b ? 1 : 0) > 0;\\n    // }\\n}\\n\",\"keccak256\":\"0x4415619078f38f182d94d5d74d77fe6770034148de989c639447dbd015003990\",\"license\":\"MIT\"},\"contracts/libraries/SignedMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nint256 constant ONE = 1;\\n\\nlibrary SignedMath {\\n    function abs(int256 value) internal pure returns (int256) {\\n        return value > 0 ? value : -value;\\n    }\\n\\n    function absUint(int256 value) internal pure returns (uint256) {\\n        return uint256(abs(value));\\n    }\\n\\n    function sign(int256 value) internal pure returns (int256) {\\n        return value > 0 ? ONE : -ONE;\\n    }\\n\\n    /// @notice Converts a signed integer into an unsigned integer and inverts positive bool if negative\\n    function extractSign(int256 a, bool positive) internal pure returns (uint256 _a, bool) {\\n        if (a < 0) {\\n            positive = !positive;\\n            _a = uint256(-a);\\n        } else {\\n            _a = uint256(a);\\n        }\\n        return (_a, positive);\\n    }\\n\\n    function extractSign(int256 a) internal pure returns (uint256 _a, bool) {\\n        return extractSign(a, true);\\n    }\\n}\\n\",\"keccak256\":\"0x86c97fc1f9599a5aec85c0ee8fa18711dd03064fe6c743772b68463a3391652e\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Uint32L8Array.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Uint32L8ArrayLib {\\n    using Uint32L8ArrayLib for uint32[8];\\n\\n    error IllegalElement(uint32 element);\\n    error NoSpaceLeftToInsert(uint32 element);\\n\\n    function include(uint32[8] storage array, uint32 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n\\n        uint256 emptyIndex = 8; // max index is 7\\n        for (uint256 i; i < 8; i++) {\\n            if (array[i] == element) {\\n                return;\\n            }\\n            if (emptyIndex == 8 && array[i] == uint32(0)) {\\n                emptyIndex = i;\\n            }\\n        }\\n\\n        if (emptyIndex == 8) {\\n            revert NoSpaceLeftToInsert(element);\\n        }\\n\\n        array[emptyIndex] = element;\\n    }\\n\\n    function exclude(uint32[8] storage array, uint32 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n\\n        uint256 elementIndex = 8;\\n        uint256 i;\\n\\n        for (; i < 8; i++) {\\n            if (array[i] == element) {\\n                elementIndex = i;\\n            }\\n            if (array[i] == 0) {\\n                i = i > 0 ? i - 1 : 0; // last non-zero element\\n                break;\\n            }\\n        }\\n\\n        if (elementIndex != 8) {\\n            if (i == elementIndex) {\\n                array[elementIndex] = 0;\\n            } else {\\n                // move last to element's place and empty lastIndex slot\\n                (array[elementIndex], array[i]) = (array[i], 0);\\n            }\\n        }\\n    }\\n\\n    function indexOf(uint32[8] storage array, uint32 element) internal view returns (uint8) {\\n        for (uint8 i; i < 8; i++) {\\n            if (array[i] == element) {\\n                return i;\\n            }\\n        }\\n        return 255;\\n    }\\n\\n    function exists(uint32[8] storage array, uint32 element) internal view returns (bool) {\\n        return array.indexOf(element) != 255;\\n    }\\n\\n    function numberOfNonZeroElements(uint32[8] storage array) internal view returns (uint256) {\\n        for (uint8 i; i < 8; i++) {\\n            if (array[i] == 0) {\\n                return i;\\n            }\\n        }\\n        return 8;\\n    }\\n}\\n\",\"keccak256\":\"0xf551ffd3c50efb6d6ca85c80f3f5109866de014c78d61c07463b8f7b52fcadac\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Uint48.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Uint48Lib {\\n    function concat(int24 val1, int24 val2) internal pure returns (uint48 concatenated) {\\n        assembly {\\n            // concatenated := add(shl(24, val1), shr(232, shl(232, val2)))\\n            concatenated := add(shl(24, val1), and(val2, 0x000000ffffff))\\n        }\\n    }\\n\\n    function unconcat(uint48 concatenated) internal pure returns (int24 val1, int24 val2) {\\n        assembly {\\n            val2 := concatenated\\n            val1 := shr(24, concatenated)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x075df15cef13d6295c32a49e1b12e4a4eceaee20b1ba6adf941b0459b5d87b4a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Uint48L5Array.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nlibrary Uint48L5ArrayLib {\\n    using Uint48L5ArrayLib for uint48[5];\\n\\n    error IllegalElement(uint48 element);\\n    error NoSpaceLeftToInsert(uint48 element);\\n\\n    function include(uint48[5] storage array, uint48 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n        uint256 emptyIndex = 5; // max index is 4\\n        for (uint256 i; i < 5; i++) {\\n            if (array[i] == element) {\\n                return;\\n            }\\n            if (emptyIndex == 5 && array[i] == uint48(0)) {\\n                emptyIndex = i;\\n            }\\n        }\\n\\n        if (emptyIndex == 5) {\\n            revert NoSpaceLeftToInsert(element);\\n        }\\n\\n        array[emptyIndex] = element;\\n    }\\n\\n    function exclude(uint48[5] storage array, uint48 element) internal {\\n        if (element == 0) {\\n            revert IllegalElement(0);\\n        }\\n\\n        uint256 elementIndex = 5;\\n        uint256 i;\\n\\n        for (; i < 5; i++) {\\n            if (array[i] == element) {\\n                elementIndex = i;\\n            }\\n            if (array[i] == 0) {\\n                i = i > 0 ? i - 1 : 0; // last non-zero element\\n                break;\\n            }\\n        }\\n\\n        if (elementIndex != 5) {\\n            if (i == elementIndex) {\\n                array[elementIndex] = 0;\\n            } else {\\n                // move last to element's place and empty lastIndex slot\\n                (array[elementIndex], array[i]) = (array[i], 0);\\n            }\\n        }\\n    }\\n\\n    function indexOf(uint48[5] storage array, uint48 element) internal view returns (uint8) {\\n        for (uint8 i; i < 5; i++) {\\n            if (array[i] == element) {\\n                return i;\\n            }\\n        }\\n        return 255;\\n    }\\n\\n    function exists(uint48[5] storage array, uint48 element) internal view returns (bool) {\\n        return array.indexOf(element) != 255;\\n    }\\n\\n    function numberOfNonZeroElements(uint48[5] storage array) internal view returns (uint256) {\\n        for (uint8 i; i < 5; i++) {\\n            if (array[i] == 0) {\\n                return i;\\n            }\\n        }\\n        return 5;\\n    }\\n}\\n\",\"keccak256\":\"0x269588257651a98a6692949e5c889c0f5ef988db1eca8ab4a63471ebfe7542be\",\"license\":\"UNLICENSED\"},\"contracts/libraries/UniswapV3PoolHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\\n\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\nimport { PriceMath } from './PriceMath.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary UniswapV3PoolHelper {\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n    using PriceMath for uint160;\\n\\n    error IllegalTwapDuration(uint32 period);\\n    error OracleConsultFailed();\\n\\n    function tickCurrent(IUniswapV3Pool v3Pool) internal view returns (int24 tick) {\\n        (, tick, , , , , ) = v3Pool.slot0();\\n    }\\n\\n    function sqrtPriceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint160 sqrtPriceX96) {\\n        int24 tick;\\n        (sqrtPriceX96, tick, , , , , ) = v3Pool.slot0();\\n        // TODO remove this logic\\n        if (sqrtPriceX96 == 0) {\\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\\n        }\\n    }\\n\\n    function priceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint256 priceX128) {\\n        uint160 sqrtPriceX96 = v3Pool.sqrtPriceCurrent();\\n        return sqrtPriceX96.toPriceX128();\\n    }\\n\\n    function twapSqrtPrice(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (uint160 sqrtPriceX96) {\\n        int24 _twapTick = pool.twapTick(twapDuration);\\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_twapTick);\\n    }\\n\\n    function twapTick(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (int24 _twapTick) {\\n        if (twapDuration == 0) {\\n            revert IllegalTwapDuration(0);\\n        }\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = twapDuration;\\n        secondAgos[1] = 0;\\n\\n        // this call will fail if period is bigger than MaxObservationPeriod\\n        try pool.observe(secondAgos) returns (int56[] memory tickCumulatives, uint160[] memory) {\\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n            int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int56(uint56(twapDuration)));\\n\\n            // Always round to negative infinity\\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(twapDuration)) != 0)) {\\n                timeWeightedAverageTick--;\\n            }\\n            return timeWeightedAverageTick;\\n        } catch {\\n            (, _twapTick, , , , , ) = pool.slot0();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35db6aff4753f006576aec26687ccb134aed57ad16149979bb77bcc34ca0dcd2\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VTokenLib.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { PriceMath } from './PriceMath.sol';\\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\\n\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary VTokenLib {\\n    using VTokenLib for IVToken;\\n    using FullMath for uint256;\\n    using PriceMath for uint160;\\n    using UniswapV3PoolHelper for IUniswapV3Pool;\\n\\n    function eq(IVToken a, IVToken b) internal pure returns (bool) {\\n        return address(a) == address(b);\\n    }\\n\\n    function eq(IVToken a, address b) internal pure returns (bool) {\\n        return address(a) == b;\\n    }\\n\\n    function truncate(IVToken vToken) internal pure returns (uint32) {\\n        return uint32(uint160(address(vToken)));\\n    }\\n\\n    function iface(IVToken vToken) internal pure returns (IVToken) {\\n        return IVToken(address(vToken));\\n    }\\n\\n    function vPool(IVToken vToken, Account.ProtocolInfo storage protocol) internal view returns (IUniswapV3Pool) {\\n        return protocol.pools[vToken].vPool;\\n    }\\n\\n    function vPoolWrapper(IVToken vToken, Account.ProtocolInfo storage protocol) internal view returns (IVPoolWrapper) {\\n        return protocol.pools[vToken].vPoolWrapper;\\n    }\\n\\n    function getVirtualTwapSqrtPriceX96(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        return protocol.pools[vToken].vPool.twapSqrtPrice(protocol.pools[vToken].settings.twapDuration);\\n    }\\n\\n    function getVirtualCurrentSqrtPriceX96(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        return protocol.pools[vToken].vPool.sqrtPriceCurrent();\\n    }\\n\\n    function getVirtualCurrentTick(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int24 tick)\\n    {\\n        return protocol.pools[vToken].vPool.tickCurrent();\\n    }\\n\\n    function getVirtualTwapTick(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int24 tick)\\n    {\\n        return protocol.pools[vToken].vPool.twapTick(protocol.pools[vToken].settings.twapDuration);\\n    }\\n\\n    function getVirtualTwapPriceX128(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint256 priceX128)\\n    {\\n        return vToken.getVirtualTwapSqrtPriceX96(protocol).toPriceX128();\\n    }\\n\\n    function getVirtualCurrentPriceX128(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint256 priceX128)\\n    {\\n        return vToken.getVirtualCurrentSqrtPriceX96(protocol).toPriceX128();\\n    }\\n\\n    function getRealTwapSqrtPriceX96(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        return protocol.pools[vToken].settings.oracle.getTwapSqrtPriceX96(protocol.pools[vToken].settings.twapDuration);\\n    }\\n\\n    function getRealTwapPriceX128(IVToken vToken, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (uint256 priceX128)\\n    {\\n        return vToken.getRealTwapSqrtPriceX96(protocol).toPriceX128();\\n    }\\n\\n    function getMarginRatio(\\n        IVToken vToken,\\n        bool isInitialMargin,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (uint16) {\\n        if (isInitialMargin) {\\n            return protocol.pools[vToken].settings.initialMarginRatio;\\n        } else {\\n            return protocol.pools[vToken].settings.maintainanceMarginRatio;\\n        }\\n    }\\n\\n    function getWhitelisted(IVToken vToken, Account.ProtocolInfo storage protocol) internal view returns (bool) {\\n        return protocol.pools[vToken].settings.whitelisted;\\n    }\\n}\\n\",\"keccak256\":\"0x8981ab215b8d831cd8ce000ebcb28531d4fdd0a5d2a48f0fe7f42f40e566b9f5\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VTokenPosition.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { Account } from './Account.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\nimport { FundingPayment } from './FundingPayment.sol';\\n\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary VTokenPosition {\\n    using VTokenLib for IVToken;\\n    using FullMath for uint256;\\n    using SignedFullMath for int256;\\n    using LiquidityPosition for LiquidityPosition.Info;\\n\\n    enum RISK_SIDE {\\n        LONG,\\n        SHORT\\n    }\\n\\n    struct Position {\\n        int256 balance; // vTokenLong - vTokenShort\\n        int256 netTraderPosition;\\n        int256 sumAX128Ckpt; // later look into cint64\\n        // this is moved from accounts to here because of the in margin available check\\n        // the loop needs to be done over liquidity positions of same token only\\n        LiquidityPositionSet.Info liquidityPositions;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    error AlreadyInitialized();\\n\\n    /// @notice returns the market value of the supplied token position\\n    /// @param position token position\\n    /// @param priceX128 price in fixed point 128\\n    /// @param wrapper pool wrapper corresponding to position\\n    function marketValue(\\n        Position storage position,\\n        uint256 priceX128,\\n        IVPoolWrapper wrapper\\n    ) internal view returns (int256 value) {\\n        value = position.balance.mulDiv(priceX128, FixedPoint128.Q128);\\n        value += unrealizedFundingPayment(position, wrapper);\\n    }\\n\\n    /// @notice returns the market value of the supplied token position\\n    /// @param position token position\\n    /// @param priceX128 price in fixed point 128\\n    /// @param vToken tokenAddress corresponding to the position\\n    /// @param protocol platform constants\\n    function marketValue(\\n        Position storage position,\\n        IVToken vToken,\\n        uint256 priceX128,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 value) {\\n        return marketValue(position, priceX128, vToken.vPoolWrapper(protocol));\\n    }\\n\\n    /// @notice returns the market value of the supplied token position\\n    /// @param position token position\\n    /// @param vToken tokenAddress corresponding to the position\\n    /// @param protocol platform constants\\n    function marketValue(\\n        Position storage position,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256) {\\n        uint256 priceX128 = vToken.getVirtualTwapPriceX128(protocol);\\n        return marketValue(position, vToken, priceX128, protocol);\\n    }\\n\\n    function riskSide(Position storage position) internal view returns (RISK_SIDE) {\\n        return position.balance > 0 ? RISK_SIDE.LONG : RISK_SIDE.SHORT;\\n    }\\n\\n    /// @notice returns the unrealized funding payment for the trader position\\n    /// @param position token position\\n    /// @param wrapper pool wrapper corresponding to position\\n    function unrealizedFundingPayment(Position storage position, IVPoolWrapper wrapper) internal view returns (int256) {\\n        int256 extrapolatedSumAX128 = wrapper.getExtrapolatedSumAX128();\\n        int256 unrealizedFpBill = -FundingPayment.bill(\\n            extrapolatedSumAX128,\\n            position.sumAX128Ckpt,\\n            position.netTraderPosition\\n        );\\n        return unrealizedFpBill;\\n    }\\n\\n    /// @notice returns the unrealized funding payment for the position\\n    /// @param position token position\\n    /// @param vToken tokenAddress corresponding to the position\\n    /// @param protocol platform constants\\n    function unrealizedFundingPayment(\\n        Position storage position,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256) {\\n        return unrealizedFundingPayment(position, vToken.vPoolWrapper(protocol));\\n    }\\n}\\n\",\"keccak256\":\"0xa3c577e5583900fe899121e0491dbf337841dd097706940b283043a81b5ff3a4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/VTokenPositionSet.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\\n\\nimport { Account } from './Account.sol';\\nimport { LiquidityPosition } from './LiquidityPosition.sol';\\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\\nimport { SignedFullMath } from './SignedFullMath.sol';\\nimport { SignedMath } from './SignedMath.sol';\\nimport { VTokenPosition } from './VTokenPosition.sol';\\nimport { Uint32L8ArrayLib } from './Uint32L8Array.sol';\\nimport { VTokenLib } from './VTokenLib.sol';\\n\\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\\nimport { IVToken } from '../interfaces/IVToken.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\nlibrary VTokenPositionSet {\\n    using Uint32L8ArrayLib for uint32[8];\\n    using VTokenLib for IVToken;\\n    using VTokenPosition for VTokenPosition.Position;\\n    using VTokenPositionSet for Set;\\n    using LiquidityPosition for LiquidityPosition.Info;\\n    using LiquidityPositionSet for LiquidityPositionSet.Info;\\n    using SafeCast for uint256;\\n    using SignedFullMath for int256;\\n    using SignedMath for int256;\\n\\n    error IncorrectUpdate();\\n    error DeactivationFailed(IVToken);\\n    error TokenInactive(IVToken vToken);\\n\\n    /// @notice stores info for VTokenPositionSet\\n    /// @param accountNo serial number of the account this set belongs to\\n    /// @param active list of all active token truncated addresses\\n    /// @param positions mapping from truncated token addresses to VTokenPosition struct for that address\\n    struct Set {\\n        // fixed length array of truncate(tokenAddress)\\n        // open positions in 8 different pairs at same time.\\n        // single per pool because it's fungible, allows for having\\n        uint256 accountNo;\\n        uint32[8] active;\\n        mapping(uint32 => VTokenPosition.Position) positions;\\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\\n    }\\n\\n    /// @notice returns true if the set does not have any token position active\\n    /// @param set VTokenPositionSet\\n    /// @return _isEmpty\\n    function isEmpty(Set storage set) internal view returns (bool _isEmpty) {\\n        _isEmpty = set.active[0] == 0;\\n    }\\n\\n    /// @notice returns true if range position is active for 'vToken'\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    /// @return isRangeActive\\n    function getIsTokenRangeActive(\\n        Set storage set,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (bool isRangeActive) {\\n        VTokenPosition.Position storage vTokenPosition = set.getTokenPosition(vToken, false, protocol);\\n        isRangeActive = !vTokenPosition.liquidityPositions.isEmpty();\\n    }\\n\\n    /// @notice returns account market value of active positions\\n    /// @param set VTokenPositionSet\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return accountMarketValue\\n    function getAccountMarketValue(\\n        Set storage set,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 accountMarketValue) {\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n            if (truncated == 0) break;\\n            IVToken vToken = vTokens[truncated];\\n            VTokenPosition.Position storage position = set.positions[truncated];\\n\\n            //Value of token position for current vToken\\n            accountMarketValue += position.marketValue(vToken, protocol);\\n\\n            uint160 sqrtPriceX96 = vToken.getVirtualTwapSqrtPriceX96(protocol);\\n            //Value of all active range position for the current vToken\\n            accountMarketValue += int256(position.liquidityPositions.baseValue(sqrtPriceX96, vToken, protocol));\\n        }\\n\\n        //Value of the base token balance\\n        accountMarketValue += set.positions[IVToken(address(protocol.vBase)).truncate()].balance;\\n    }\\n\\n    /// @notice returns the max of two int256 numbers\\n    /// @param a first number\\n    /// @param b second number\\n    /// @return c  = max of a and b\\n    function max(int256 a, int256 b) internal pure returns (int256 c) {\\n        if (a > b) c = a;\\n        else c = b;\\n    }\\n\\n    /// @notice returns notional value of the given base and token amounts\\n    /// @param vToken address of the token\\n    /// @param vTokenAmount amount of tokens\\n    /// @param vBaseAmount amount of base\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed for the given token and base amounts\\n    function getNotionalValue(\\n        IVToken vToken,\\n        int256 vTokenAmount,\\n        int256 vBaseAmount,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 notionalAmountClosed) {\\n        notionalAmountClosed =\\n            vTokenAmount.abs().mulDiv(vToken.getVirtualTwapPriceX128(protocol), FixedPoint128.Q128) +\\n            vBaseAmount.abs();\\n    }\\n\\n    /// @notice returns the long and short side risk for range positions of a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param isInitialMargin specifies to use initial margin factor (true) or maintainance margin factor (false)\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    /// @return longSideRisk - risk if the token price goes down\\n    /// @return shortSideRisk - risk if the token price goes up\\n    function getLongShortSideRisk(\\n        Set storage set,\\n        bool isInitialMargin,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 longSideRisk, int256 shortSideRisk) {\\n        VTokenPosition.Position storage position = set.positions[vToken.truncate()];\\n\\n        uint256 price = vToken.getVirtualTwapPriceX128(protocol);\\n        uint16 marginRatio = vToken.getMarginRatio(isInitialMargin, protocol);\\n\\n        int256 tokenPosition = position.balance;\\n        int256 liquidityMaxTokenPosition = int256(position.liquidityPositions.maxNetPosition());\\n\\n        longSideRisk = max(tokenPosition + liquidityMaxTokenPosition, 0).mulDiv(price, FixedPoint128.Q128).mulDiv(\\n            marginRatio,\\n            1e5\\n        );\\n\\n        shortSideRisk = max(-tokenPosition, 0).mulDiv(price, FixedPoint128.Q128).mulDiv(marginRatio, 1e5);\\n        return (longSideRisk, shortSideRisk);\\n    }\\n\\n    /// @notice returns the long and short side risk for range positions of a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param isInitialMargin specifies to use initial margin factor (true) or maintainance margin factor (false)\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return requiredMargin - required margin value based on the current active positions\\n    function getRequiredMargin(\\n        Set storage set,\\n        bool isInitialMargin,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        Account.ProtocolInfo storage protocol\\n    ) internal view returns (int256 requiredMargin) {\\n        int256 longSideRiskTotal;\\n        int256 shortSideRiskTotal;\\n        int256 longSideRisk;\\n        int256 shortSideRisk;\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            if (set.active[i] == 0) break;\\n            IVToken vToken = vTokens[set.active[i]];\\n            (longSideRisk, shortSideRisk) = set.getLongShortSideRisk(isInitialMargin, vToken, protocol);\\n\\n            if (vToken.getWhitelisted(protocol)) {\\n                longSideRiskTotal += longSideRisk;\\n                shortSideRiskTotal += shortSideRisk;\\n            } else {\\n                requiredMargin += max(longSideRisk, shortSideRisk);\\n            }\\n        }\\n\\n        requiredMargin += max(longSideRiskTotal, shortSideRiskTotal);\\n    }\\n\\n    /// @notice activates token with address 'vToken' if not already active\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    function activate(Set storage set, IVToken vToken) internal {\\n        set.active.include(vToken.truncate());\\n    }\\n\\n    /// @notice deactivates token with address 'vToken'\\n    /// @dev ensures that the balance is 0 and there are not range positions active otherwise throws an error\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    function deactivate(Set storage set, IVToken vToken) internal {\\n        uint32 truncated = vToken.truncate();\\n        if (set.positions[truncated].balance != 0 || !set.positions[truncated].liquidityPositions.isEmpty()) {\\n            revert DeactivationFailed(vToken);\\n        }\\n\\n        set.active.exclude(truncated);\\n    }\\n\\n    /// @notice updates token balance, net trader position and base balance\\n    /// @dev realizes funding payment to base balance if vToken is not for base\\n    /// @dev activates the token if not already active\\n    /// @dev deactivates the token if the balance = 0 and there are no range positions active\\n    /// @dev IMP: ensure that the global states are updated using zeroSwap or directly through some interaction with pool wrapper\\n    /// @param set VTokenPositionSet\\n    /// @param balanceAdjustments platform constants\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    function update(\\n        Set storage set,\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        uint32 truncated = vToken.truncate();\\n        if (!vToken.eq(address(protocol.vBase))) {\\n            set.realizeFundingPayment(vToken, protocol);\\n            set.active.include(truncated);\\n        }\\n        VTokenPosition.Position storage _VTokenPosition = set.positions[truncated];\\n        _VTokenPosition.balance += balanceAdjustments.vTokenIncrease;\\n        _VTokenPosition.netTraderPosition += balanceAdjustments.traderPositionIncrease;\\n\\n        VTokenPosition.Position storage _VBasePosition = set.positions[IVToken(address(protocol.vBase)).truncate()];\\n        _VBasePosition.balance += balanceAdjustments.vBaseIncrease;\\n\\n        if (_VTokenPosition.balance == 0 && _VTokenPosition.liquidityPositions.active[0] == 0) {\\n            set.deactivate(vToken);\\n        }\\n    }\\n\\n    /// @notice realizes funding payment to base balance\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param protocol platform constants\\n    function realizeFundingPayment(\\n        Set storage set,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        set.realizeFundingPayment(vToken, protocol.pools[vToken].vPoolWrapper, protocol);\\n    }\\n\\n    /// @notice realizes funding payment to base balance\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    function realizeFundingPayment(\\n        Set storage set,\\n        IVToken vToken,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        VTokenPosition.Position storage _VTokenPosition = set.positions[vToken.truncate()];\\n        int256 extrapolatedSumAX128 = wrapper.getSumAX128();\\n\\n        VTokenPosition.Position storage _VBasePosition = set.positions[IVToken(address(protocol.vBase)).truncate()];\\n        int256 fundingPayment = _VTokenPosition.unrealizedFundingPayment(wrapper);\\n        _VBasePosition.balance += fundingPayment;\\n\\n        _VTokenPosition.sumAX128Ckpt = extrapolatedSumAX128;\\n\\n        emit Account.FundingPayment(set.accountNo, vToken, 0, 0, fundingPayment);\\n    }\\n\\n    /// @notice get or create token position\\n    /// @dev activates inactive vToken if isCreateNew is true else reverts\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param createNew if 'vToken' is inactive then activates (true) else reverts with TokenInactive(false)\\n    /// @param protocol platform constants\\n    /// @return position - VTokenPosition corresponding to 'vToken'\\n    function getTokenPosition(\\n        Set storage set,\\n        IVToken vToken,\\n        bool createNew,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (VTokenPosition.Position storage position) {\\n        if (!vToken.eq(address(protocol.vBase))) {\\n            if (createNew) {\\n                set.activate(vToken);\\n            } else if (!set.active.exists(vToken.truncate())) {\\n                revert TokenInactive(vToken);\\n            }\\n        }\\n\\n        position = set.positions[vToken.truncate()];\\n    }\\n\\n    /// @notice swaps tokens (Long and Short) with input in token amount / base amount\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param swapParams parameters for swap\\n    /// @param protocol platform constants\\n    /// @return vTokenAmountOut - token amount coming out of pool\\n    /// @return vBaseAmountOut - base amount coming out of pool\\n    function swapToken(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.SwapParams memory swapParams,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        return set.swapToken(vToken, swapParams, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice swaps tokens (Long and Short) with input in token amount\\n    /// @dev activates inactive vToe\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param vTokenAmount amount of the token\\n    /// @param protocol platform constants\\n    /// @return vTokenAmountOut - token amount coming out of pool\\n    /// @return vBaseAmountOut - base amount coming out of pool\\n    function swapTokenAmount(\\n        Set storage set,\\n        IVToken vToken,\\n        int256 vTokenAmount,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        return\\n            set.swapToken(\\n                vToken,\\n                /// @dev 0 means no price limit and false means amount mentioned is token amount\\n                IClearingHouse.SwapParams(vTokenAmount, 0, false, false),\\n                vToken.vPoolWrapper(protocol),\\n                protocol\\n            );\\n    }\\n\\n    /// @notice function to remove an eligible limit order\\n    /// @dev checks whether the current price is on the correct side of the range based on the type of limit order (None, Low, High)\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param tickLower lower tick index for the range\\n    /// @param tickUpper upper tick index for the range\\n    /// @param protocol platform constants\\n    function removeLimitOrder(\\n        Set storage set,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        set.removeLimitOrder(vToken, tickLower, tickUpper, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice function for liquidity add/remove\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param liquidityChangeParams includes tickLower, tickUpper, liquidityDelta, limitOrderType\\n    /// @return vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @return vBaseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    function liquidityChange(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        return set.liquidityChange(vToken, liquidityChangeParams, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice function to liquidate liquidity positions for a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        IVToken vToken,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        return set.liquidateLiquidityPositions(vToken, vToken.vPoolWrapper(protocol), protocol);\\n    }\\n\\n    /// @notice function to liquidate all liquidity positions\\n    /// @param set VTokenPositionSet\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n            if (truncated == 0) break;\\n\\n            notionalAmountClosed += set.liquidateLiquidityPositions(vTokens[set.active[i]], protocol);\\n        }\\n    }\\n\\n    /// @notice swaps tokens (Long and Short) with input in token amount / base amount\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of the token\\n    /// @param swapParams parameters for swap\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    /// @return vTokenAmountOut - token amount coming out of pool\\n    /// @return vBaseAmountOut - base amount coming out of pool\\n    function swapToken(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.SwapParams memory swapParams,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        (vTokenAmountOut, vBaseAmountOut) = wrapper.swapToken(\\n            swapParams.amount,\\n            swapParams.sqrtPriceLimit,\\n            swapParams.isNotional\\n        );\\n\\n        // change direction basis uniswap to balance increase\\n        vTokenAmountOut = -vTokenAmountOut;\\n        vBaseAmountOut = -vBaseAmountOut;\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments = IClearingHouse.BalanceAdjustments(\\n            vBaseAmountOut,\\n            vTokenAmountOut,\\n            vTokenAmountOut\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n\\n        emit Account.TokenPositionChange(set.accountNo, vToken, vTokenAmountOut, vBaseAmountOut);\\n    }\\n\\n    /// @notice function for liquidity add/remove\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param liquidityChangeParams includes tickLower, tickUpper, liquidityDelta, limitOrderType\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @return vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\\n    /// @return vBaseAmountOut amount of base tokens that account received (positive) or paid (negative)\\n    function liquidityChange(\\n        Set storage set,\\n        IVToken vToken,\\n        IClearingHouse.LiquidityChangeParams memory liquidityChangeParams,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        VTokenPosition.Position storage vTokenPosition = set.getTokenPosition(vToken, true, protocol);\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments;\\n\\n        vTokenPosition.liquidityPositions.liquidityChange(\\n            set.accountNo,\\n            vToken,\\n            liquidityChangeParams,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n\\n        if (liquidityChangeParams.closeTokenPosition) {\\n            set.swapTokenAmount(vToken, -balanceAdjustments.traderPositionIncrease, protocol);\\n        }\\n\\n        return (balanceAdjustments.vTokenIncrease, balanceAdjustments.vBaseIncrease);\\n    }\\n\\n    /// @notice function to remove an eligible limit order\\n    /// @dev checks whether the current price is on the correct side of the range based on the type of limit order (None, Low, High)\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param tickLower lower tick index for the range\\n    /// @param tickUpper upper tick index for the range\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    function removeLimitOrder(\\n        Set storage set,\\n        IVToken vToken,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal {\\n        VTokenPosition.Position storage vTokenPosition = set.getTokenPosition(vToken, false, protocol);\\n\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments;\\n        int24 currentTick = vToken.getVirtualCurrentTick(protocol);\\n\\n        vTokenPosition.liquidityPositions.removeLimitOrder(\\n            set.accountNo,\\n            vToken,\\n            currentTick,\\n            tickLower,\\n            tickUpper,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n    }\\n\\n    /// @notice function to liquidate liquidity positions for a particular token\\n    /// @param set VTokenPositionSet\\n    /// @param vToken address of token\\n    /// @param wrapper VPoolWrapper to override the set wrapper\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        IVToken vToken,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        IClearingHouse.BalanceAdjustments memory balanceAdjustments;\\n\\n        set.getTokenPosition(vToken, false, protocol).liquidityPositions.closeAllLiquidityPositions(\\n            set.accountNo,\\n            vToken,\\n            wrapper,\\n            balanceAdjustments\\n        );\\n\\n        set.update(balanceAdjustments, vToken, protocol);\\n\\n        return getNotionalValue(vToken, balanceAdjustments.vTokenIncrease, balanceAdjustments.vBaseIncrease, protocol);\\n    }\\n\\n    /// @notice function to liquidate all liquidity positions\\n    /// @param set VTokenPositionSet\\n    /// @param vTokens mapping from truncated token address to token address for all active tokens\\n    /// @param protocol platform constants\\n    /// @return notionalAmountClosed - value of tokens coming out (in base) of all the ranges closed\\n    function liquidateLiquidityPositions(\\n        Set storage set,\\n        mapping(uint32 => IVToken) storage vTokens,\\n        IVPoolWrapper wrapper,\\n        Account.ProtocolInfo storage protocol\\n    ) internal returns (int256 notionalAmountClosed) {\\n        for (uint8 i = 0; i < set.active.length; i++) {\\n            uint32 truncated = set.active[i];\\n            if (truncated == 0) break;\\n\\n            notionalAmountClosed += set.liquidateLiquidityPositions(vTokens[set.active[i]], wrapper, protocol);\\n        }\\n    }\\n\\n    function getView(Set storage set, Account.ProtocolInfo storage protocol)\\n        internal\\n        view\\n        returns (int256 vBaseBalance, IClearingHouse.VTokenPositionView[] memory vTokenPositions)\\n    {\\n        vBaseBalance = set.positions[IVToken(address(protocol.vBase)).truncate()].balance;\\n\\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\\n        vTokenPositions = new IClearingHouse.VTokenPositionView[](numberOfTokenPositions);\\n\\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\\n            vTokenPositions[i].vTokenAddress = address(protocol.vTokens[set.active[i]]);\\n            vTokenPositions[i].balance = set.positions[set.active[i]].balance;\\n            vTokenPositions[i].netTraderPosition = set.positions[set.active[i]].netTraderPosition;\\n            vTokenPositions[i].sumAX128Ckpt = set.positions[set.active[i]].sumAX128Ckpt;\\n            vTokenPositions[i].liquidityPositions = set.positions[set.active[i]].liquidityPositions.getView();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3f20f61d31af97e9e9096cafccb51734e2c1b6c21076698c90803fda3c58ff\",\"license\":\"UNLICENSED\"},\"contracts/protocol/clearinghouse/ClearingHouse.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport { Account } from '../../libraries/Account.sol';\\nimport { LiquidityPositionSet } from '../../libraries/LiquidityPositionSet.sol';\\nimport { VTokenPositionSet } from '../../libraries/VTokenPositionSet.sol';\\nimport { SignedMath } from '../../libraries/SignedMath.sol';\\nimport { VTokenLib } from '../../libraries/VTokenLib.sol';\\nimport { RTokenLib } from '../../libraries/RTokenLib.sol';\\nimport { Calldata } from '../../libraries/Calldata.sol';\\n\\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\\nimport { IOracle } from '../../interfaces/IOracle.sol';\\nimport { IVBase } from '../../interfaces/IVBase.sol';\\nimport { IVToken } from '../../interfaces/IVToken.sol';\\n\\nimport { OptimisticGasUsedClaim } from '../../utils/OptimisticGasUsedClaim.sol';\\n\\nimport { ClearingHouseView } from './ClearingHouseView.sol';\\n\\nimport { console } from 'hardhat/console.sol';\\n\\ncontract ClearingHouse is IClearingHouse, ClearingHouseView, OptimisticGasUsedClaim {\\n    using SafeERC20 for IERC20;\\n    using Account for Account.UserInfo;\\n    using VTokenLib for IVToken;\\n    using SignedMath for int256;\\n    using RTokenLib for RTokenLib.RToken;\\n\\n    error Paused();\\n    error NotRageTradeFactory();\\n\\n    modifier onlyRageTradeFactory() {\\n        if (rageTradeFactoryAddress != msg.sender) revert NotRageTradeFactory();\\n        _;\\n    }\\n\\n    modifier notPaused() {\\n        if (paused) revert Paused();\\n        _;\\n    }\\n\\n    /**\\n        PLATFORM FUNCTIONS\\n     */\\n\\n    function __ClearingHouse_init(\\n        address _rageTradeFactoryAddress,\\n        IERC20 _rBase,\\n        IInsuranceFund _insuranceFund,\\n        IVBase _vBase,\\n        IOracle _nativeOracle\\n    ) external initializer {\\n        rageTradeFactoryAddress = _rageTradeFactoryAddress;\\n        rBase = _rBase;\\n        insuranceFund = _insuranceFund;\\n        nativeOracle = _nativeOracle;\\n\\n        protocol.vBase = _vBase;\\n\\n        __Governable_init();\\n    }\\n\\n    function registerPool(address full, RageTradePool calldata rageTradePool) external onlyRageTradeFactory {\\n        IVToken vToken = IVToken(full);\\n        uint32 truncated = vToken.truncate();\\n\\n        // pool will not be registered twice by the rage trade factory\\n        assert(protocol.vTokens[truncated].eq(address(0)));\\n\\n        protocol.vTokens[truncated] = vToken;\\n        protocol.pools[vToken] = rageTradePool;\\n    }\\n\\n    /**\\n        ADMIN FUNCTIONS\\n     */\\n\\n    function addCollateralSupport(\\n        address rTokenAddress,\\n        address oracleAddress,\\n        uint32 twapDuration\\n    ) external onlyGovernanceOrTeamMultisig {\\n        RTokenLib.RToken memory token = RTokenLib.RToken(rTokenAddress, oracleAddress, twapDuration);\\n        protocol.rTokens[uint32(uint160(token.tokenAddress))] = token;\\n    }\\n\\n    function updateSupportedVTokens(IVToken add, bool status) external onlyGovernanceOrTeamMultisig {\\n        supportedVTokens[add] = status;\\n    }\\n\\n    function updateSupportedDeposits(address add, bool status) external onlyGovernanceOrTeamMultisig {\\n        supportedDeposits[add] = status;\\n    }\\n\\n    function setPaused(bool _pause) external onlyGovernanceOrTeamMultisig {\\n        paused = _pause;\\n    }\\n\\n    // TODO: rename to setGlobalSettings\\n    function setPlatformParameters(\\n        Account.LiquidationParams calldata _liquidationParams,\\n        uint256 _removeLimitOrderFee,\\n        uint256 _minimumOrderNotional,\\n        uint256 _minRequiredMargin\\n    ) external onlyGovernanceOrTeamMultisig {\\n        protocol.liquidationParams = _liquidationParams;\\n        protocol.removeLimitOrderFee = _removeLimitOrderFee;\\n        protocol.minimumOrderNotional = _minimumOrderNotional;\\n        protocol.minRequiredMargin = _minRequiredMargin;\\n    }\\n\\n    function updateRageTradePoolSettings(IVToken vToken, RageTradePoolSettings calldata newSettings)\\n        public\\n        onlyGovernanceOrTeamMultisig\\n    {\\n        protocol.pools[vToken].settings = newSettings;\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external {\\n        uint256 totalProtocolFee;\\n        for (uint256 i = 0; i < wrapperAddresses.length; i++) {\\n            uint256 wrapperFee = IVPoolWrapper(wrapperAddresses[i]).collectAccruedProtocolFee();\\n            emit Account.ProtocolFeeWithdrawm(wrapperAddresses[i], wrapperFee);\\n            totalProtocolFee += wrapperFee;\\n        }\\n        rBase.safeTransfer(teamMultisig(), totalProtocolFee);\\n    }\\n\\n    /**\\n        USER FUNCTIONS\\n     */\\n\\n    /// @inheritdoc IClearingHouse\\n    function createAccount() external notPaused returns (uint256 newAccountId) {\\n        newAccountId = numAccounts;\\n        numAccounts = newAccountId + 1; // SSTORE\\n\\n        Account.UserInfo storage newAccount = accounts[newAccountId];\\n        newAccount.owner = msg.sender;\\n        newAccount.tokenPositions.accountNo = newAccountId;\\n\\n        emit Account.AccountCreated(msg.sender, newAccountId);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function addMargin(\\n        uint256 accountNo,\\n        uint32 rTokenTruncatedAddress,\\n        uint256 amount\\n    ) external notPaused {\\n        Account.UserInfo storage account = accounts[accountNo];\\n        if (msg.sender != account.owner) revert AccessDenied(msg.sender);\\n\\n        RTokenLib.RToken storage rToken = _getRTokenWithChecks(rTokenTruncatedAddress, true);\\n\\n        IERC20(rToken.realToken()).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        account.addMargin(rToken.tokenAddress, amount);\\n\\n        emit Account.DepositMargin(accountNo, rToken.tokenAddress, amount);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function removeMargin(\\n        uint256 accountNo,\\n        uint32 rTokenTruncatedAddress,\\n        uint256 amount\\n    ) external notPaused {\\n        Account.UserInfo storage account = accounts[accountNo];\\n        if (msg.sender != account.owner) revert AccessDenied(msg.sender);\\n\\n        RTokenLib.RToken storage rToken = _getRTokenWithChecks(rTokenTruncatedAddress, false);\\n\\n        account.removeMargin(rToken.tokenAddress, amount, protocol);\\n\\n        IERC20(rToken.realToken()).safeTransfer(msg.sender, amount);\\n\\n        emit Account.WithdrawMargin(accountNo, rToken.tokenAddress, amount);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function updateProfit(uint256 accountNo, int256 amount) external notPaused {\\n        require(amount != 0, '!amount');\\n        Account.UserInfo storage account = accounts[accountNo];\\n        if (msg.sender != account.owner) revert AccessDenied(msg.sender);\\n\\n        account.updateProfit(amount, protocol);\\n        if (amount > 0) {\\n            rBase.safeTransferFrom(msg.sender, address(this), uint256(amount));\\n        } else {\\n            rBase.safeTransfer(msg.sender, uint256(-amount));\\n        }\\n        emit Account.UpdateProfit(accountNo, amount);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function swapToken(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        SwapParams memory swapParams\\n    ) external notPaused returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        Account.UserInfo storage account = accounts[accountNo];\\n        if (msg.sender != account.owner) revert AccessDenied(msg.sender);\\n\\n        IVToken vToken = _getIVTokenWithChecks(vTokenTruncatedAddress);\\n\\n        (vTokenAmountOut, vBaseAmountOut) = account.swapToken(vToken, swapParams, protocol);\\n\\n        uint256 vBaseAmountOutAbs = uint256(vBaseAmountOut.abs());\\n        if (vBaseAmountOutAbs < protocol.minimumOrderNotional) revert LowNotionalValue(vBaseAmountOutAbs);\\n\\n        if (swapParams.sqrtPriceLimit != 0 && !swapParams.isPartialAllowed) {\\n            if (\\n                !((swapParams.isNotional && vBaseAmountOut.abs() == swapParams.amount.abs()) ||\\n                    (!swapParams.isNotional && vTokenAmountOut.abs() == swapParams.amount.abs()))\\n            ) revert SlippageBeyondTolerance();\\n        }\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function updateRangeOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        LiquidityChangeParams calldata liquidityChangeParams\\n    ) external notPaused returns (int256 vTokenAmountOut, int256 vBaseAmountOut) {\\n        Account.UserInfo storage account = accounts[accountNo];\\n        if (msg.sender != account.owner) revert AccessDenied(msg.sender);\\n\\n        IVToken vToken = _getIVTokenWithChecks(vTokenTruncatedAddress);\\n\\n        if (liquidityChangeParams.sqrtPriceCurrent != 0) {\\n            _checkSlippage(vToken, liquidityChangeParams.sqrtPriceCurrent, liquidityChangeParams.slippageToleranceBps);\\n        }\\n\\n        (vTokenAmountOut, vBaseAmountOut) = account.liquidityChange(vToken, liquidityChangeParams, protocol);\\n\\n        uint256 notionalValueAbs = uint256(\\n            VTokenPositionSet.getNotionalValue(vToken, vTokenAmountOut, vBaseAmountOut, protocol)\\n        );\\n\\n        if (notionalValueAbs < protocol.minimumOrderNotional) revert LowNotionalValue(notionalValueAbs);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function removeLimitOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external {\\n        _removeLimitOrder(accountNo, vTokenTruncatedAddress, tickLower, tickUpper, 0);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function liquidateLiquidityPositions(uint256 accountNo) external {\\n        _liquidateLiquidityPositions(accountNo, 0);\\n    }\\n\\n    /// @inheritdoc IClearingHouse\\n    function liquidateTokenPosition(\\n        uint256 liquidatorAccountNo,\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint16 liquidationBps\\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments) {\\n        return _liquidateTokenPosition(liquidatorAccountNo, accountNo, vTokenTruncatedAddress, liquidationBps, 0);\\n    }\\n\\n    /**\\n        ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM\\n     */\\n\\n    function removeLimitOrderWithGasClaim(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 gasComputationUnitsClaim\\n    ) external checkGasUsedClaim(gasComputationUnitsClaim) returns (uint256 keeperFee) {\\n        Calldata.limit(4 + 5 * 0x20);\\n        return _removeLimitOrder(accountNo, vTokenTruncatedAddress, tickLower, tickUpper, gasComputationUnitsClaim);\\n    }\\n\\n    function liquidateLiquidityPositionsWithGasClaim(uint256 accountNo, uint256 gasComputationUnitsClaim)\\n        external\\n        checkGasUsedClaim(gasComputationUnitsClaim)\\n        returns (int256 keeperFee)\\n    {\\n        Calldata.limit(4 + 2 * 0x20);\\n        return _liquidateLiquidityPositions(accountNo, gasComputationUnitsClaim);\\n    }\\n\\n    function liquidateTokenPositionWithGasClaim(\\n        uint256 liquidatorAccountNo,\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint16 liquidationBps,\\n        uint256 gasComputationUnitsClaim\\n    )\\n        external\\n        checkGasUsedClaim(gasComputationUnitsClaim)\\n        returns (BalanceAdjustments memory liquidatorBalanceAdjustments)\\n    {\\n        Calldata.limit(4 + 5 * 0x20);\\n        return\\n            _liquidateTokenPosition(\\n                liquidatorAccountNo,\\n                accountNo,\\n                vTokenTruncatedAddress,\\n                liquidationBps,\\n                gasComputationUnitsClaim\\n            );\\n    }\\n\\n    /**\\n        INTERNAL HELPERS\\n     */\\n\\n    function _checkSlippage(\\n        IVToken vToken,\\n        uint160 sqrtPriceToCheck,\\n        uint16 slippageToleranceBps\\n    ) internal view {\\n        uint160 sqrtPriceCurrent = vToken.getVirtualCurrentSqrtPriceX96(protocol);\\n        uint160 diff = sqrtPriceCurrent > sqrtPriceToCheck\\n            ? sqrtPriceCurrent - sqrtPriceToCheck\\n            : sqrtPriceToCheck - sqrtPriceCurrent;\\n        if (diff > (slippageToleranceBps * sqrtPriceToCheck) / 1e4) {\\n            revert SlippageBeyondTolerance();\\n        }\\n    }\\n\\n    function _getRTokenWithChecks(uint32 rTokenTruncatedAddress, bool checkSupported)\\n        internal\\n        view\\n        returns (RTokenLib.RToken storage rToken)\\n    {\\n        rToken = protocol.rTokens[rTokenTruncatedAddress];\\n        if (rToken.eq(address(0))) revert UninitializedToken(rTokenTruncatedAddress);\\n        if (checkSupported && !supportedDeposits[rToken.tokenAddress]) revert UnsupportedRToken(rToken.tokenAddress);\\n    }\\n\\n    function _getIVTokenWithChecks(uint32 vTokenTruncatedAddress) internal view returns (IVToken vToken) {\\n        vToken = protocol.vTokens[vTokenTruncatedAddress];\\n        if (vToken.eq(address(0))) revert UninitializedToken(vTokenTruncatedAddress);\\n        if (!supportedVTokens[vToken]) revert UnsupportedVToken(vToken);\\n    }\\n\\n    function _liquidateLiquidityPositions(uint256 accountNo, uint256 gasComputationUnitsClaim)\\n        internal\\n        notPaused\\n        returns (int256 keeperFee)\\n    {\\n        Account.UserInfo storage account = accounts[accountNo];\\n        int256 insuranceFundFee;\\n        (keeperFee, insuranceFundFee) = account.liquidateLiquidityPositions(\\n            _getFixFee(gasComputationUnitsClaim),\\n            protocol\\n        );\\n        int256 accountFee = keeperFee + insuranceFundFee;\\n\\n        rBase.safeTransfer(msg.sender, uint256(keeperFee));\\n        _transferInsuranceFundFee(insuranceFundFee);\\n\\n        emit Account.LiquidateRanges(accountNo, msg.sender, accountFee, keeperFee, insuranceFundFee);\\n    }\\n\\n    function _liquidateTokenPosition(\\n        uint256 liquidatorAccountNo,\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        uint16 liquidationBps,\\n        uint256 gasComputationUnitsClaim\\n    ) internal notPaused returns (BalanceAdjustments memory liquidatorBalanceAdjustments) {\\n        if (liquidationBps > 10000) revert InvalidTokenLiquidationParameters();\\n        Account.UserInfo storage account = accounts[accountNo];\\n\\n        IVToken vToken = _getIVTokenWithChecks(vTokenTruncatedAddress);\\n        int256 insuranceFundFee;\\n        (insuranceFundFee, liquidatorBalanceAdjustments) = account.liquidateTokenPosition(\\n            accounts[liquidatorAccountNo],\\n            liquidationBps,\\n            vToken,\\n            _getFixFee(gasComputationUnitsClaim),\\n            protocol\\n        );\\n\\n        _transferInsuranceFundFee(insuranceFundFee);\\n    }\\n\\n    function _removeLimitOrder(\\n        uint256 accountNo,\\n        uint32 vTokenTruncatedAddress,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint256 gasComputationUnitsClaim\\n    ) internal notPaused returns (uint256 keeperFee) {\\n        Account.UserInfo storage account = accounts[accountNo];\\n\\n        IVToken vToken = _getIVTokenWithChecks(vTokenTruncatedAddress);\\n        keeperFee = protocol.removeLimitOrderFee + _getFixFee(gasComputationUnitsClaim);\\n\\n        account.removeLimitOrder(vToken, tickLower, tickUpper, keeperFee, protocol);\\n\\n        rBase.safeTransfer(msg.sender, keeperFee);\\n        // emit Account.LiqudityChange(accountNo, tickLower, tickUpper, liquidityDelta, 0, 0, 0);\\n    }\\n\\n    function _transferInsuranceFundFee(int256 insuranceFundFee) internal {\\n        if (insuranceFundFee > 0) {\\n            rBase.safeTransfer(address(insuranceFund), uint256(insuranceFundFee));\\n        } else {\\n            insuranceFund.claim(uint256(-insuranceFundFee));\\n        }\\n    }\\n\\n    /// @notice Gets fix fee\\n    /// @dev Allowed to be overriden for specific chain implementations\\n    /// @return fixFee amount of fixFee in base\\n    function _getFixFee(uint256) internal view virtual returns (uint256 fixFee) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x3a86c009106f7f398014c6fb6098118cccdcbcf469f1de231bd19eec4f8a8771\",\"license\":\"UNLICENSED\"},\"contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { ArbAggregator } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbAggregator.sol';\\nimport { ArbSys } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbSys.sol';\\nimport { ArbGasInfo } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbGasInfo.sol';\\n\\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\\n\\nimport { Arbitrum } from '../../libraries/Arbitrum.sol';\\nimport { PriceMath } from '../../libraries/PriceMath.sol';\\n\\nimport { TxGasPriceLimit } from '../../utils/TxGasPriceLimit.sol';\\n\\nimport { ClearingHouse } from './ClearingHouse.sol';\\n\\ncontract ClearingHouseArbitrum is ClearingHouse, TxGasPriceLimit {\\n    using FullMath for uint256;\\n    using PriceMath for uint160;\\n\\n    modifier checkGasUsedClaim(uint256 l2GasUsedClaim) override {\\n        if (l2GasUsedClaim > 0) {\\n            // computation + storage\\n            uint256 initialL2Gas = gasleft() + Arbitrum.getStorageGasAvailable();\\n            _;\\n            uint256 l2GasUsedActual = initialL2Gas - (gasleft() + Arbitrum.getStorageGasAvailable());\\n            if (l2GasUsedClaim > l2GasUsedActual) {\\n                revert ExcessGasUsedClaim(l2GasUsedClaim, l2GasUsedActual);\\n            }\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    /// @notice Gives Fix Fee in Base denomination for the tx\\n    /// @param l2GasUnits: includes L2 computation and storage gas units\\n    function _getFixFee(uint256 l2GasUnits)\\n        internal\\n        view\\n        override\\n        checkTxGasPrice(tx.gasprice)\\n        returns (uint256 fixFee)\\n    {\\n        if (l2GasUnits == 0 || address(nativeOracle) == address(0)) return 0;\\n\\n        uint256 l1FeeInWei;\\n\\n        // if call from EOA then include L1 fee, i.e. do not refund L1 fee to calls from contract\\n        // this is due to a single contract can make multiple liquidations in single tx.\\n        // TODO is there a way to refund L1 fee once to contracts?\\n        if (msg.sender == tx.origin) {\\n            l1FeeInWei = Arbitrum.getCurrentTxL1GasFees();\\n        }\\n\\n        uint256 l2FeeInWei = l2GasUnits * tx.gasprice;\\n\\n        uint256 ethPriceInUsdc = nativeOracle.getTwapSqrtPriceX96(5 minutes).toPriceX128();\\n        return (l1FeeInWei + l2FeeInWei).mulDiv(ethPriceInUsdc, FixedPoint128.Q128);\\n    }\\n}\\n\",\"keccak256\":\"0x9e1f96ca7a80bb43c6d5948090712e2601a48d7979b2f6203d5ffce4f285f328\",\"license\":\"UNLICENSED\"},\"contracts/protocol/clearinghouse/ClearingHouseStorage.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport { Account } from '../../libraries/Account.sol';\\nimport { IVToken } from '../../libraries/VTokenLib.sol';\\n\\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\\nimport { IOracle } from '../../interfaces/IOracle.sol';\\n\\nimport { Governable } from '../../utils/Governable.sol';\\n\\nabstract contract ClearingHouseStorage is Initializable, Governable {\\n    // 2 slots are consumed from inheritance\\n    // rest slots reserved for any states from inheritance in future\\n    uint256[98] private _emptySlots1;\\n\\n    // at slot # 100\\n    Account.ProtocolInfo internal protocol;\\n\\n    mapping(IVToken => bool) public supportedVTokens;\\n    mapping(address => bool) public supportedDeposits;\\n\\n    uint256 public numAccounts;\\n    mapping(uint256 => Account.UserInfo) accounts;\\n\\n    // TODO use openzeppelin pauser\\n    bool public paused;\\n\\n    IERC20 public rBase;\\n    address public rageTradeFactoryAddress;\\n    IInsuranceFund public insuranceFund;\\n\\n    // Oracle for the chain's native currency in terms of rBase\\n    // Used to provide gas refund in rBase to the liquidators\\n    IOracle public nativeOracle;\\n\\n    // reserved for adding slots in future\\n    uint256[100] private _emptySlots2;\\n}\\n\",\"keccak256\":\"0x60d37498dd2dde8028e4fa8e6fe09a9e4ab58a327edcf62597fb9dcc2496be7e\",\"license\":\"UNLICENSED\"},\"contracts/protocol/clearinghouse/ClearingHouseView.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\\nimport { IVBase } from '../../interfaces/IVBase.sol';\\nimport { IVToken } from '../../interfaces/IVToken.sol';\\n\\nimport { Account } from '../../libraries/Account.sol';\\nimport { VTokenLib } from '../../libraries/VTokenLib.sol';\\nimport { RTokenLib } from '../../libraries/RTokenLib.sol';\\n\\nimport { ClearingHouseStorage } from './ClearingHouseStorage.sol';\\n\\nimport { Extsload } from '../../utils/Extsload.sol';\\n\\nabstract contract ClearingHouseView is IClearingHouse, ClearingHouseStorage, Extsload {\\n    using Account for Account.UserInfo;\\n    using VTokenLib for IVToken;\\n\\n    function getTwapSqrtPricesForSetDuration(IVToken vToken)\\n        external\\n        view\\n        returns (uint256 realPriceX128, uint256 virtualPriceX128)\\n    {\\n        realPriceX128 = vToken.getRealTwapPriceX128(protocol);\\n        virtualPriceX128 = vToken.getVirtualTwapPriceX128(protocol);\\n    }\\n\\n    function isVTokenAddressAvailable(uint32 truncated) external view returns (bool) {\\n        return protocol.vTokens[truncated].eq(address(0));\\n    }\\n\\n    /**\\n        Account.ProtocolInfo VIEW\\n     */\\n    function protocolInfo()\\n        public\\n        view\\n        returns (\\n            IVBase vBase,\\n            Account.LiquidationParams memory liquidationParams,\\n            uint256 minRequiredMargin,\\n            uint256 removeLimitOrderFee,\\n            uint256 minimumOrderNotional\\n        )\\n    {\\n        vBase = protocol.vBase;\\n        liquidationParams = protocol.liquidationParams;\\n        minRequiredMargin = protocol.minRequiredMargin;\\n        removeLimitOrderFee = protocol.removeLimitOrderFee;\\n        minimumOrderNotional = protocol.minimumOrderNotional;\\n    }\\n\\n    function pools(IVToken vToken) public view returns (RageTradePool memory) {\\n        return protocol.pools[vToken];\\n    }\\n\\n    function rTokens(uint32 rTokenId) public view returns (RTokenLib.RToken memory) {\\n        return protocol.rTokens[rTokenId];\\n    }\\n\\n    function vTokens(uint32 vTokenAddressTruncated) public view returns (IVToken) {\\n        return protocol.vTokens[vTokenAddressTruncated];\\n    }\\n\\n    /**\\n        Account.UserInfo VIEW\\n     */\\n\\n    function getAccountView(uint256 accountNo)\\n        public\\n        view\\n        returns (\\n            address owner,\\n            int256 vBaseBalance,\\n            DepositTokenView[] memory tokenDeposits,\\n            VTokenPositionView[] memory tokenPositions\\n        )\\n    {\\n        return accounts[accountNo].getView(protocol);\\n    }\\n\\n    // isInitialMargin true is initial margin, false is maintainance margin\\n    function getAccountMarketValueAndRequiredMargin(uint256 accountNo, bool isInitialMargin)\\n        public\\n        view\\n        returns (int256 accountMarketValue, int256 requiredMargin)\\n    {\\n        (accountMarketValue, requiredMargin) = accounts[accountNo].getAccountValueAndRequiredMargin(\\n            isInitialMargin,\\n            protocol\\n        );\\n    }\\n\\n    function getAccountNetProfit(uint256 accountNo) public view returns (int256 accountNetProfit) {\\n        accountNetProfit = accounts[accountNo].getAccountPositionProfits(protocol);\\n    }\\n}\\n\",\"keccak256\":\"0xe02333c0584688108add5339c53325ea90f592574882e115da68f9df6a2d0c53\",\"license\":\"UNLICENSED\"},\"contracts/utils/Extsload.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\n/// @notice Allows the contract to make it's state public\\nabstract contract Extsload {\\n    function extsload(bytes32 slot) external view returns (bytes32 val) {\\n        assembly {\\n            val := sload(slot)\\n        }\\n    }\\n\\n    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory) {\\n        assembly {\\n            let end := add(0x20, add(slots, mul(mload(slots), 0x20)))\\n            for {\\n                let pointer := add(slots, 32)\\n            } lt(pointer, end) {\\n\\n            } {\\n                let value := sload(mload(pointer))\\n                mstore(pointer, value)\\n                pointer := add(pointer, 0x20)\\n            }\\n        }\\n\\n        return slots;\\n    }\\n}\\n\",\"keccak256\":\"0x92bf73a704be2f0652117c60a1e91205ac57cddd17e8a13df1b8202a0611e2c9\",\"license\":\"UNLICENSED\"},\"contracts/utils/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport { Context } from '@openzeppelin/contracts/utils/Context.sol';\\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport { IGovernable } from '../interfaces/IGovernable.sol';\\n\\n/**\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyGovernance` and `onlyGovernanceOrTeamMultisig`, which can be applied to your functions\\n * to restrict their use to the caller.\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address private _governance;\\n    address private _teamMultisig;\\n\\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\\n    event TeamMultisigTransferred(address indexed previousTeamMultisig, address indexed newTeamMultisig);\\n\\n    error Unauthorised();\\n    error ZeroAddress();\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governance and team multisig.\\n     */\\n    constructor() {\\n        __Governable_init();\\n    }\\n\\n    /**\\n     * @dev Useful to proxy contracts for initializing\\n     */\\n    function __Governable_init() internal {\\n        address msgSender = _msgSender();\\n\\n        __Governable_init(msgSender, msgSender);\\n    }\\n\\n    /**\\n     * @dev Useful to proxy contracts for initializing with custom addresses\\n     */\\n    function __Governable_init(address initialGovernance, address initialTeamMultisig) internal initializer {\\n        _governance = initialGovernance;\\n        emit GovernanceTransferred(address(0), initialGovernance);\\n\\n        _teamMultisig = initialTeamMultisig;\\n        emit TeamMultisigTransferred(address(0), initialTeamMultisig);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current governance.\\n     */\\n    function governance() public view virtual returns (address) {\\n        return _governance;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current team multisig.transferTeamMultisig\\n     */\\n    function teamMultisig() public view virtual returns (address) {\\n        return _teamMultisig;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governance.\\n     */\\n    modifier onlyGovernance() {\\n        if (governance() != _msgSender()) revert Unauthorised();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governance or team multisig.\\n     */\\n    modifier onlyGovernanceOrTeamMultisig() {\\n        if (teamMultisig() != _msgSender() && governance() != _msgSender()) revert Unauthorised();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governance to a new account (`newGovernance`).\\n     * Can only be called by the current governance.\\n     */\\n    function transferGovernance(address newGovernance) external virtual onlyGovernance {\\n        if (newGovernance == address(0)) revert ZeroAddress();\\n        emit GovernanceTransferred(_governance, newGovernance);\\n        _governance = newGovernance;\\n    }\\n\\n    /**\\n     * @dev Transfers teamMultisig to a new account (`newTeamMultisig`).\\n     * Can only be called by the current teamMultisig or current governance.\\n     */\\n    function transferTeamMultisig(address newTeamMultisig) external virtual onlyGovernanceOrTeamMultisig {\\n        if (newTeamMultisig == address(0)) revert ZeroAddress();\\n        emit TeamMultisigTransferred(_teamMultisig, newTeamMultisig);\\n        _teamMultisig = newTeamMultisig;\\n    }\\n}\\n\",\"keccak256\":\"0x674f5ef2c3452dbd7b53200a713f123223536002971f65207f47e543dd90983a\",\"license\":\"MIT\"},\"contracts/utils/OptimisticGasUsedClaim.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nabstract contract OptimisticGasUsedClaim {\\n    error ExcessGasUsedClaim(uint256 gasUsedClaim, uint256 gasUsedActual);\\n\\n    modifier checkGasUsedClaim(uint256 gasUsedClaim) virtual {\\n        if (gasUsedClaim > 0) {\\n            uint256 initialGas = gasleft();\\n            _;\\n            uint256 gasUsedActual = gasleft() - initialGas;\\n            if (gasUsedClaim > gasUsedActual) {\\n                revert ExcessGasUsedClaim(gasUsedClaim, gasUsedActual);\\n            }\\n        } else {\\n            _;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d4a52819a5bb09c5a0012c24fcc8fbf025a973e9e2fd2ad13cf8f25c9987a3c\",\"license\":\"UNLICENSED\"},\"contracts/utils/TxGasPriceLimit.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.9;\\n\\nimport { Governable } from './Governable.sol';\\n\\nabstract contract TxGasPriceLimit is Governable {\\n    uint256 public txGasPriceLimit;\\n\\n    error ExcessTxGasPrice(uint256 txGasPrice, uint256 limit);\\n\\n    modifier checkTxGasPrice(uint256 txGasPrice) {\\n        if (txGasPrice > txGasPriceLimit) {\\n            revert ExcessTxGasPrice(txGasPrice, txGasPriceLimit);\\n        }\\n        _;\\n    }\\n\\n    function setTxGasPriceLimit(uint256 _txGasPriceLimit) external onlyGovernanceOrTeamMultisig {\\n        txGasPriceLimit = _txGasPriceLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xe03633f0242fbc2cca8f893025b71e019d9e2a7cc9160c493ffa474ddd590b0a\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061028a5760003560e01c806384088b651161015c578063d257be2b116100ce578063e3d41c1811610087578063e3d41c1814610739578063e67ed1df1461074c578063eb7c987d1461075f578063ee6cd5ee1461080a578063fcd0a5061461081d578063fe6f083a1461083057600080fd5b8063d257be2b146106bc578063d38bfff4146106cf578063dac42a96146106e2578063dbc0c085146106f5578063dbd035ff14610706578063e1f167131461072657600080fd5b80639cd1be58116101205780639cd1be58146105e05780639dca362f146105f3578063a26f7ca7146105fb578063a4063dbc1461060e578063a5cf768814610691578063b7902303146106a957600080fd5b806384088b65146104d65780638ce25a931461050b57806393420cf41461051457806394c8c71d146105ba57806398f5c527146105cd57600080fd5b80633fc42d80116102005780635c975abb116101b95780635c975abb1461045a57806364f368011461046757806373cceb9d1461047a5780637cc2f4f51461049d5780637ec6ba31146104b05780637f64d663146104c357600080fd5b80633fc42d80146103a857806342be9fca146103db57806343233d2e146103ee578063569634d31461041d5780635aa6e675146104305780635c318ad91461044757600080fd5b80632a66e9ca116102525780632a66e9ca146103215780632afaea371461033457806332a72d981461034757806336fadead1461036f57806339359029146103825780633d56a35e1461039557600080fd5b8063127fec131461028f57806316c38b3c146102bf5780631a1feae1146102d45780631e2eaeaf146102ec57806321df4c0e146102fe575b600080fd5b60d7546102a2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6102d26102cd366004614020565b610843565b005b6102de61013c5481565b6040519081526020016102b6565b6102de6102fa36600461403d565b5490565b61031161030c36600461403d565b6108a1565b6040516102b69493929190614078565b6102d261032f36600461422c565b610945565b6102d2610342366004614275565b610a08565b61035a61035536600461436b565b610b69565b604080519283526020830191909152016102b6565b6102d261037d366004614419565b610d62565b6102d2610390366004614275565b610dd8565b60d5546102a2906001600160a01b031681565b6103cb6103b6366004614452565b60d16020526000908152604090205460ff1681565b60405190151581526020016102b6565b6102de6103e936600461446f565b610f2e565b6102a26103fc366004614491565b63ffffffff166000908152606660205260409020546001600160a01b031690565b6102d261042b36600461403d565b610fd5565b6000546201000090046001600160a01b03166102a2565b6102d26104553660046144ae565b610fe4565b60d4546103cb9060ff1681565b6102d2610475366004614419565b61104d565b6103cb610488366004614452565b60d06020526000908152604090205460ff1681565b6102d26104ab3660046144ff565b6110c3565b6102d26104be36600461403d565b6110d8565b6102d26104d1366004614452565b611129565b6104e96104e436600461456d565b6111f7565b60408051825181526020808401519082015291810151908201526060016102b6565b6102de60d25481565b604080516060808201835260008083526020808401829052928401526067548351808301855260685461ffff80821683526201000082048116838701908152600160201b9092048116838801908152606954606a54606b548a516001600160a01b03909816885295518416988701989098529251821697850197909752955190951692820192909252608081019390935260a083019190915260c082015260e0016102b6565b6104e96105c83660046145ac565b611232565b6102d26105db3660046145fe565b611304565b6102d26105ee36600461446f565b6113df565b6102de611574565b6102d261060936600461466f565b611616565b61062161061c366004614452565b61168e565b6040805182516001600160a01b03908116825260208085015182168184015293830151805161ffff90811684860152948101519094166060808401919091529284015163ffffffff1660808084019190915292840151151560a083015291909201511660c082015260e0016102b6565b60d4546102a29061010090046001600160a01b031681565b60d6546102a2906001600160a01b031681565b61035a6106ca366004614452565b61176a565b6102d26106dd366004614452565b61179e565b6103cb6106f0366004614491565b611860565b6001546001600160a01b03166102a2565b6107196107143660046146d3565b611895565b6040516102b6919061475d565b6102d26107343660046147a1565b6118c3565b6102de61074736600461403d565b611a19565b61035a61075a366004614815565b611a32565b6107d461076d366004614491565b60408051606080820183526000808352602080840182905292840181905263ffffffff9485168152606583528390208351918201845280546001600160a01b03908116835260019091015490811692820192909252600160a01b9091049092169082015290565b6040805182516001600160a01b039081168252602080850151909116908201529181015163ffffffff16908201526060016102b6565b61035a61081836600461483a565b611a59565b6102d261082b36600461487a565b611bcb565b6102de61083e3660046148c5565b611c9c565b6001546001600160a01b0316331480159061087057506000546001600160a01b0362010000909104163314155b1561088e57604051636bd1573560e11b815260040160405180910390fd5b60d4805460ff1916911515919091179055565b600081815260d3602052604080822090516330977c6d60e21b81526004810191909152606460248201528190606090819073__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__9063c25df1b490604401600060405180830381865af415801561090e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109369190810190614b1e565b93509350935093509193509193565b60d5546001600160a01b03163314610970576040516385734f3160e01b815260040160405180910390fd5b8160006001600160a01b03821663ffffffff8082166000908152606660205260408120549293506109ab926001600160a01b031691611cea16565b6109b7576109b7614c24565b63ffffffff8116600090815260666020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558352606490915290208390610a008282614d63565b505050505050565b60d45460ff1615610a2c576040516313d0ff5960e31b815260040160405180910390fd5b600083815260d36020526040902080546001600160a01b03163314610a6b57604051630504a20d60e01b81523360048201526024015b60405180910390fd5b6000610a78846001611cfb565b9050610aa2333085610a9185546001600160a01b031690565b6001600160a01b0316929190611d97565b8054604051631b2d4e8960e01b8152600481018490526001600160a01b0390911660248201526044810184905273__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__90631b2d4e899060640160006040518083038186803b158015610b0657600080fd5b505af4158015610b1a573d6000803e3d6000fd5b505082546040518681526001600160a01b0390911692508791507fdce3cf2323481f6a4ecd26864872ec536609f1ad0788710e5786c65b8e51ee75906020015b60405180910390a35050505050565b60d454600090819060ff1615610b92576040516313d0ff5960e31b815260040160405180910390fd5b600085815260d36020526040902080546001600160a01b03163314610bcc57604051630504a20d60e01b8152336004820152602401610a62565b6000610bd786611e02565b6040805163edd75e2160e01b8152600481018590526001600160a01b0380841660248301528851604483015260208901511660648083019190915291880151151560848201526060880151151560a482015260c481019190915290915073__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__9063edd75e219060e4016040805180830381865af4158015610c6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c939190614e51565b90945092506000610ca384611e9e565b606b54909150811015610ccc576040516312b6b5cd60e11b815260048101829052602401610a62565b60208601516001600160a01b031615801590610cea57508560600151155b15610d575785604001518015610d1157508551610d0690611e9e565b610d0f85611e9e565b145b80610d3a57508560400151158015610d3a57508551610d2f90611e9e565b610d3886611e9e565b145b610d57576040516307a1db0760e01b815260040160405180910390fd5b505050935093915050565b6001546001600160a01b03163314801590610d8f57506000546001600160a01b0362010000909104163314155b15610dad57604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b0391909116600090815260d060205260409020805460ff1916911515919091179055565b60d45460ff1615610dfc576040516313d0ff5960e31b815260040160405180910390fd5b600083815260d36020526040902080546001600160a01b03163314610e3657604051630504a20d60e01b8152336004820152602401610a62565b6000610e43846000611cfb565b8054604051634de2913360e11b8152600481018590526001600160a01b0390911660248201526044810185905260648082015290915073__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__90639bc522669060840160006040518083038186803b158015610eb057600080fd5b505af4158015610ec4573d6000803e3d6000fd5b50505050610eee3384610ede84546001600160a01b031690565b6001600160a01b03169190611eb9565b80546040518481526001600160a01b039091169086907fbe29a6b389df4dde99b5e61c229ee4fcb393f7f54c362aa57d8c92200183094690602001610b5a565b6000818015610fb7576000610f41611ee9565b5a610f4c9190614e8b565b9050610f586044611fa1565b610f628585611fce565b92506000610f6e611ee9565b5a610f799190614e8b565b610f839083614ea3565b905080831115610fb057604051634010928f60e01b81526004810184905260248101829052604401610a62565b5050610fce565b610fc16044611fa1565b610fcb8484611fce565b91505b5092915050565b610fe0816000611fce565b5050565b6001546001600160a01b0316331480159061101157506000546001600160a01b0362010000909104163314155b1561102f57604051636bd1573560e11b815260040160405180910390fd5b83606861103c8282614eba565b5050606a92909255606b5560695550565b6001546001600160a01b0316331480159061107a57506000546001600160a01b0362010000909104163314155b1561109857604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b0391909116600090815260d160205260409020805460ff1916911515919091179055565b6110d184848484600061211a565b5050505050565b6001546001600160a01b0316331480159061110557506000546001600160a01b0362010000909104163314155b1561112357604051636bd1573560e11b815260040160405180910390fd5b61013c55565b6001546001600160a01b0316331480159061115657506000546001600160a01b0362010000909104163314155b1561117457604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b03811661119b5760405163d92e233d60e01b815260040160405180910390fd5b6001546040516001600160a01b038084169216907f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb290600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b61121b60405180606001604052806000815260200160008152602001600081525090565b611229858585856000612230565b95945050505050565b61125660405180606001604052806000815260200160008152602001600081525090565b8180156112e0576000611267611ee9565b5a6112729190614e8b565b905061127e60a4611fa1565b61128b8888888888612230565b92506000611297611ee9565b5a6112a29190614e8b565b6112ac9083614ea3565b9050808311156112d957604051634010928f60e01b81526004810184905260248101829052604401610a62565b50506112fa565b6112ea60a4611fa1565b6112f78787878787612230565b91505b5095945050505050565b600054610100900460ff168061131d575060005460ff16155b6113395760405162461bcd60e51b8152600401610a6290614f28565b600054610100900460ff1615801561135b576000805461ffff19166101011790555b60d580546001600160a01b03199081166001600160a01b038981169190911790925560d48054610100600160a81b0319166101008985160217905560d68054821687841617905560d780548216858416179055606780549091169185169190911790556113c661239f565b8015610a00576000805461ff0019169055505050505050565b60d45460ff1615611403576040516313d0ff5960e31b815260040160405180910390fd5b8061143a5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610a62565b600082815260d36020526040902080546001600160a01b0316331461147457604051630504a20d60e01b8152336004820152602401610a62565b60405163f632b1e360e01b8152600481018290526024810183905260646044820181905273__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__9163f632b1e3910160006040518083038186803b1580156114cd57600080fd5b505af41580156114e1573d6000803e3d6000fd5b5050505060008213156115105760d45461150b9061010090046001600160a01b0316333085611d97565b611535565b6115353361151d84614f76565b60d45461010090046001600160a01b03169190611eb9565b827fb4604a31ce2914796ae6383c67cee47a3cb969b59a7dba0d06edcab53ff96a848360405161156791815260200190565b60405180910390a2505050565b60d45460009060ff161561159b576040516313d0ff5960e31b815260040160405180910390fd5b5060d2546115aa816001614e8b565b60d255600081815260d360205260409081902080546001600160a01b0319163390811782556001820184905591519091907f7325fb14450d3e5eb288c620b4ff1d6b43a41b33b4a4f143ae88cd4c12f99ea39061160a9085815260200190565b60405180910390a25090565b6001546001600160a01b0316331480159061164357506000546001600160a01b0362010000909104163314155b1561166157604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b038216600090815260646020526040902081906002016116888282614cab565b50505050565b6116d3604080516060808201835260008083526020808401829052845160a0810186528281529081018290528085018290529182018190526080820152909182015290565b506001600160a01b039081166000908152606460209081526040918290208251606080820185528254861682526001830154861682850152845160a08101865260029093015461ffff8082168552620100008204169484019490945263ffffffff600160201b8504168386015260ff600160401b850416151590830152600160481b90920490931660808401529081019190915290565b6000806117816001600160a01b03841660646123aa565b91506117976001600160a01b03841660646123d7565b9050915091565b6000546001600160a01b03620100009091041633146117d057604051636bd1573560e11b815260040160405180910390fd5b6001600160a01b0381166117f75760405163d92e233d60e01b815260040160405180910390fd5b600080546040516001600160a01b03808516936201000090930416917f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce8091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b63ffffffff808216600090815260666020526040812054909161188f916001600160a01b0316908390611cea16565b92915050565b606060208251028201602001602083015b818110156118bb5780515481526020016118a6565b509192915050565b6000805b828110156119e65760008484838181106118e3576118e3614f93565b90506020020160208101906118f89190614452565b6001600160a01b0316635e622abc6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190614fa9565b905084848381811061196f5761196f614f93565b90506020020160208101906119849190614452565b6001600160a01b03167f4b5237f428d31406cf0f93a4ab5fd11482f2fe9a1420271368d67e83496346c4826040516119be91815260200190565b60405180910390a26119d08184614e8b565b92505080806119de90614fc2565b9150506118c7565b50611a146119fc6001546001600160a01b031690565b60d45461010090046001600160a01b03169083611eb9565b505050565b600081815260d36020526040812061188f9060646123ef565b600082815260d3602052604081208190611a4e90846064612402565b909590945092505050565b60d454600090819060ff1615611a82576040516313d0ff5960e31b815260040160405180910390fd5b600085815260d36020526040902080546001600160a01b03163314611abc57604051630504a20d60e01b8152336004820152602401610a62565b6000611ac786611e02565b9050611ad96080860160608701614452565b6001600160a01b031615611b1057611b1081611afb6080880160608901614452565b611b0b60a0890160808a01614fdd565b612458565b6040516349e373d360e01b815273__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__906349e373d390611b4e90859085908a90606490600401615005565b6040805180830381865af4158015611b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8e9190614e51565b90945092506000611ba282868660646124f3565b606b54909150811015610d57576040516312b6b5cd60e11b815260048101829052602401610a62565b6001546001600160a01b03163314801590611bf857506000546001600160a01b0362010000909104163314155b15611c1657604051636bd1573560e11b815260040160405180910390fd5b604080516060810182526001600160a01b038086168252938416602080830191825263ffffffff9485168385019081529685166000908152606590915292909220905181549085166001600160a01b0319909116178155905160019190910180549451909216600160a01b026001600160c01b0319909416921691909117919091179055565b6000818015611cd3576000611caf611ee9565b5a611cba9190614e8b565b9050611cc660a4611fa1565b61128b888888888861211a565b611cdd60a4611fa1565b6112f7878787878761211a565b6001600160a01b0390811691161490565b63ffffffff808316600090815260656020526040812091611d1e91839161253316565b15611d445760405163b087c8c360e01b815263ffffffff84166004820152602401610a62565b818015611d6b575080546001600160a01b0316600090815260d1602052604090205460ff16155b1561188f57805460405163340e1b9160e21b81526001600160a01b039091166004820152602401610a62565b6040516001600160a01b03808516602483015283166044820152606481018290526116889085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612546565b63ffffffff8082166000908152606660205260408120546001600160a01b031691611e2f918391611cea16565b15611e555760405163b087c8c360e01b815263ffffffff83166004820152602401610a62565b6001600160a01b038116600090815260d0602052604090205460ff16611e9957604051631079472960e21b81526001600160a01b0382166004820152602401610a62565b919050565b6000808213611eb557611eb082614f76565b61188f565b5090565b6040516001600160a01b038316602482015260448101829052611a1490849063a9059cbb60e01b90606401611dcb565b60408051600481526024810182526020810180516001600160e01b031663a94597ff60e01b179052905160009182918291606491611f279190615103565b600060405180830381855afa9150503d8060008114611f62576040519150601f19603f3d011682016040523d82523d6000602084013e611f67565b606091505b5091509150811580611f7857508051155b15611f865760009250505090565b80806020019051810190611f9a9190614fa9565b9250505090565b36811015611fcb57604051634219202560e01b815236600482015260248101829052604401610a62565b50565b60d45460009060ff1615611ff5576040516313d0ff5960e31b815260040160405180910390fd5b600083815260d3602052604081209073__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__6379452b238361202887612618565b6040516001600160e01b031960e085901b16815260048101929092526024820152606460448201819052016040805180830381865af415801561206f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120939190614e51565b909350905060006120a4828561511f565b60d4549091506120c39061010090046001600160a01b03163386611eb9565b6120cc82612731565b6040805182815260208101869052908101839052339087907f914a6aef8c0c1a591157ee7d71dfbd71d1d7df090d3ec047f8eac01fc21b2f439060600160405180910390a350505092915050565b60d45460009060ff1615612141576040516313d0ff5960e31b815260040160405180910390fd5b600086815260d3602052604081209061215987611e02565b905061216484612618565b606a546121719190614e8b565b6040516343c74e9360e01b8152600481018490526001600160a01b0383166024820152600288810b604483015287900b6064808301919091526084820183905260a482015290935073__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__906343c74e939060c40160006040518083038186803b1580156121f057600080fd5b505af4158015612204573d6000803e3d6000fd5b505060d454612225925061010090046001600160a01b031690503385611eb9565b505095945050505050565b61225460405180606001604052806000815260200160008152602001600081525090565b60d45460ff1615612278576040516313d0ff5960e31b815260040160405180910390fd5b6127108361ffff16111561229f576040516348d69f3560e01b815260040160405180910390fd5b600085815260d360205260408120906122b786611e02565b600089815260d3602052604081209192509073__$86182d6e9eac51236f2aa8dd2a3ddeab6c$__9063487e8af190859089866122f28b612618565b60646040518763ffffffff1660e01b815260040161234596959493929190958652602086019490945261ffff9290921660408501526001600160a01b03166060840152608083015260a082015260c00190565b608060405180830381865af4158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190615160565b9450905061239381612731565b50505095945050505050565b33611fcb81806127c2565b60006123d06123c26001600160a01b038516846128ca565b6001600160a01b031661295c565b9392505050565b60006123d06123c26001600160a01b038516846129d8565b60006123d0600184016002840184612a16565b60008061240f8584612b2c565b915061242360018601856002860186612b51565b600286015490915063ffffffff16156124505782600501548112612447578061244d565b82600501545b90505b935093915050565b600061246e6001600160a01b0385166064612ca6565b90506000836001600160a01b0316826001600160a01b03161161249a5761249582856151d8565b6124a4565b6124a484836151d8565b90506127106124b78561ffff8616615200565b6124c19190615245565b6001600160a01b0316816001600160a01b031611156110d1576040516307a1db0760e01b815260040160405180910390fd5b60006124fe83611e9e565b6125296125146001600160a01b038816856123d7565b600160801b61252288611e9e565b9190612ccc565b611229919061511f565b90546001600160a01b0391821691161490565b600061259b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d069092919063ffffffff16565b805190915015611a1457808060200190518101906125b9919061526b565b611a145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a62565b60003a61013c5481111561264e5761013c54604051638dfe587d60e01b8152610a62918391600401918252602082015260400190565b821580612664575060d7546001600160a01b0316155b15612672576000915061272b565b60003332141561268757612684612d15565b90505b60006126933a86615288565b60d754604051630e56d76760e31b815261012c6004820152919250600091612709916001600160a01b0316906372b6bb3890602401602060405180830381865afa1580156126e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c291906152a7565b905061272581600160801b61271e8587614e8b565b9190612d53565b94505050505b50919050565b600081131561275c5760d65460d454611fcb916001600160a01b036101009092048216911683611eb9565b60d6546001600160a01b031663379607f561277683614f76565b6040518263ffffffff1660e01b815260040161279491815260200190565b600060405180830381600087803b1580156127ae57600080fd5b505af11580156110d1573d6000803e3d6000fd5b600054610100900460ff16806127db575060005460ff16155b6127f75760405162461bcd60e51b8152600401610a6290614f28565b600054610100900460ff16158015612819576000805461ffff19166101011790555b6000805462010000600160b01b031916620100006001600160a01b0386169081029190911782556040519091907f5f56bee8cffbe9a78652a74a60705edede02af10b0bbb888ca44b79a0d42ce80908290a3600180546001600160a01b0319166001600160a01b0384169081179091556040516000907f39355f2f5c8206286978f443aa8126bbd29fa09c53c04569502647f3a59c8cb2908290a38015611a14576000805461ff0019169055505050565b6001600160a01b03828116600090815260208390526040808220600201549051630e56d76760e31b8152600160201b820463ffffffff1660048201529192600160481b90910416906372b6bb3890602401602060405180830381865afa158015612938573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d091906152a7565b60006401000276a36001600160a01b0383161080612997575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b156129c057604051635d236c4560e01b81526001600160a01b0383166004820152602401610a62565b61188f6001600160a01b03831680600160401b612d53565b6001600160a01b0380831660009081526020839052604081206002810154905491926123d092169063ffffffff600160201b909104811690612e0116565b6000805b60088160ff161015612afd576000856001018260ff1660088110612a4057612a40614f93565b60088104919091015460079091166004026101000a900463ffffffff16905080612a6a5750612afd565b63ffffffff8082166000908152602087815260408083205460028b019092529091206001600160a01b0390911691612aa890829084908990612e2216565b612ab2908661511f565b94506000612ac96001600160a01b038416886129d8565b9050612ada6003830182858a612e46565b612ae4908761511f565b9550505050508080612af5906152c4565b915050612a1a565b50600382015463ffffffff166000908152600285016020526040902054612b24908261511f565b949350505050565b6000612b3883836123ef565b9050612b476068840183612e73565b6123d0908261511f565b600080808080805b60088160ff161015612c8457896001018160ff1660088110612b7d57612b7d614f93565b60088104919091015460079091166004026101000a900463ffffffff16612ba357612c84565b60008860008c6001018460ff1660088110612bc057612bc0614f93565b60088104919091015460079091166004026101000a900463ffffffff90811682526020820192909252604001600020546001600160a01b03169150612c0d908c908c9084908c90612f3916565b6001600160a01b038316600090815260208b905260409020600201549195509350600160401b900460ff1615612c5a57612c47848761511f565b9550612c53838661511f565b9450612c71565b612c648484612ff4565b612c6e908861511f565b96505b5080612c7c816152c4565b915050612b59565b50612c8f8484612ff4565b612c99908661511f565b9998505050505050505050565b6001600160a01b0380831660009081526020839052604081205490916123d09116613005565b6000612cf260008512612cdf5784612ceb565b612ceb856000196152e4565b8484612d53565b905060008412156123d057612b2481614f76565b6060612b24848460008561308f565b60408051600481526024810182526020810180516001600160e01b031663637bef0760e11b179052905160009182918291606491611f279190615103565b600080806000198587098587029250828110838203039150508060001415612d8d5760008411612d8257600080fd5b5082900490506123d0565b808411612d9957600080fd5b600084868809851960019081018716968790046003810260029081188083028203028083028203028083028203028083028203028083028203029182029003026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080612e176001600160a01b038516846131b7565b9050610fcb816133d3565b600080612e386001600160a01b038516846123d7565b905061122985858386613705565b6001600160a01b038281166000908152602083905260408120600101549091611229918791879116613732565b60008060005b60088160ff161015612f315760008560ff831660088110612e9c57612e9c614f93565b60088104919091015460079091166004026101000a900463ffffffff16905080612ec65750612f31565b63ffffffff811660009081526001860160205260409020612f10612ee9826137ce565b63ffffffff808516600090815260018b0160205260409020549190600160801b90612ccc16565b612f1a908561511f565b935050508080612f29906152c4565b915050612e79565b509392505050565b63ffffffff8083166000908152600286016020526040812090918291908290612f6f906001600160a01b0388169087906123d716565b90506000612f876001600160a01b03881689886137dc565b83549091506000612f9a60038601613836565b9050612fc361ffff8416620186a061252287600160801b82612fbc888a61511f565b6000612ff4565b9650612fe461ffff8416620186a061252287600160801b82612fbc89614f76565b9550505050505094509492505050565b60008183131561272b57508161188f565b600080826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015613046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306a9190615369565b509496509294505050506001600160a01b0383161515905061272b576123d0816133d3565b6060824710156130f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a62565b843b61313e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a62565b600080866001600160a01b0316858760405161315a9190615103565b60006040518083038185875af1925050503d8060008114613197576040519150601f19603f3d011682016040523d82523d6000602084013e61319c565b606091505b50915091506131ac8282866138b1565b979650505050505050565b600063ffffffff82166131e0576040516351a4d88160e01b815260006004820152602401610a62565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061321557613215614f93565b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061324457613244614f93565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526001600160a01b0385169063883bdbfd9061328590849060040161540b565b600060405180830381865afa9250505080156132c357506040513d6000823e601f3d908101601f191682016040526132c091908101906154ad565b60015b61333857836001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015613305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133299190615369565b50939650610fce945050505050565b60008260008151811061334d5761334d614f93565b60200260200101518360018151811061336857613368614f93565b602002602001015161337a9190615578565b9050600061338e63ffffffff8816836155c8565b905060008260060b1280156133b457506133ae63ffffffff881683615606565b60060b15155b156133c757806133c381615628565b9150505b945061188f9350505050565b60008060008360020b126133ea578260020b6133f2565b8260020b6000035b9050620d89e881111561342b5760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610a62565b60006001821661343f57600160801b613451565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613485576ffff97272373d413259a46990580e213a0260801c5b60048216156134a4576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156134c3576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156134e2576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615613501576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615613520576fff2ea16466c96a3843ec78b326b528610260801c5b608082161561353f576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561355f576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561357f576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561359f576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156135bf576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156135df576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156135ff576fa9f746462d870fdf8a65dc1f90e061e50260801c5b61400082161561361f576f70d869a156d2a1b890bb3df62baf32f70260801c5b61800082161561363f576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615613660576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615613680576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561369f576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156136bc576b048a170391f7dc42444e8fa20260801c5b60008460020b13156136dd5780600019816136d9576136d961522f565b0490505b600160201b8106156136f05760016136f3565b60005b60ff16602082901c0192505050919050565b6001600160a01b0383811660009081526020839052604081206001015490916112299187918691166138ea565b6000805b6005811015612f3157600085826005811061375357613753614f93565b600591828204019190066006029054906101000a900465ffffffffffff1690508065ffffffffffff166000141561378a5750612f31565b65ffffffffffff8116600090815260018701602052604090206137ae908686613914565b6137b8908461511f565b92505080806137c690614fc2565b915050613736565b600061188f6123c283613aa3565b6000821561380a57506001600160a01b03831660009081526020829052604090206002015461ffff166123d0565b506001600160a01b03831660009081526020829052604090206002015462010000900461ffff166123d0565b6000805b600581101561272b57600083826005811061385757613857614f93565b600580820492909201549190066006026101000a900465ffffffffffff166000818152600186016020526040902090915061389190613b35565b61389b9084614e8b565b92505080806138a990614fc2565b91505061383a565b606083156138c05750816123d0565b8251156138d05782518084602001fd5b8160405162461bcd60e51b8152600401610a62919061564c565b82546000906138fe9084600160801b612ccc565b905061390a8483613b8c565b612b24908261511f565b600080600061399861398f856001600160a01b0316636719578c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561395d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398191906152a7565b6001600160a01b0316613005565b87906000613c11565b9150915060006139b0866001600160a01b031661295c565b9050816139c28483600160801b612ccc565b6139cc919061511f565b875460405163154cd3c960e11b81526101008204600290810b6004830152600160201b90920490910b6024820152909450600093506001600160a01b0386169250632a99a7929150604401608060405180830381865afa158015613a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a58919061567f565b9050613a79613a74826060015187613cda90919063ffffffff16565b613d0a565b613a83908361511f565b81516040830151919350613a9991879190613d1c565b611229908361511f565b6000613ab982600101546001600160a01b031690565b6001830154604051630e56d76760e31b8152600160a01b90910463ffffffff1660048201526001600160a01b0391909116906372b6bb3890602401602060405180830381865afa158015613b11573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188f91906152a7565b80546000908190613b4d90610100900460020b6133d3565b8354909150600090613b6890600160201b900460020b6133d3565b8454909150612b249083908390600160381b90046001600160801b03166001613d56565b600080826001600160a01b031663a3a1e7e96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf19190614fa9565b90506000613c088286600201548760010154613e0b565b61122990614f76565b825460009081908190613c2b90610100900460020b6133d3565b8654909150600090613c4690600160201b900460020b6133d3565b9050856001600160a01b038084169082161015613c64575081613c81565b816001600160a01b0316876001600160a01b03161115613c815750805b8754613ca590613a749083908590600160381b90046001600160801b03168a613d56565b9450613ccd613a7484838b60000160079054906101000a90046001600160801b03168a613e26565b9350505050935093915050565b815460058301546000916123d091600160381b9091046001600160801b031690600160801b9061271e9086614ea3565b6000600160ff1b8210611eb557600080fd5b6002830154600384015460048501548554600093613d4d9387938793600160381b90046001600160801b0316613e96565b612b2490614f76565b6000836001600160a01b0316856001600160a01b03161115613d76579293925b6fffffffffffffffffffffffffffffffff60601b606084901b166001600160a01b038686038116908716613da957600080fd5b83613ddf57866001600160a01b0316613dcc8383896001600160a01b0316612d53565b81613dd957613dd961522f565b046131ac565b6131ac613df68383896001600160a01b0316613ebe565b886001600160a01b0316808204910615150190565b6000612b24613e1a84866156e4565b8390600160801b613efe565b6000836001600160a01b0316856001600160a01b03161115613e46579293925b81613e7357613e6e836001600160801b03168686036001600160a01b0316600160601b612d53565b611229565b611229836001600160801b03168686036001600160a01b0316600160601b613ebe565b60006131ac82600160801b613ead8888888d613f58565b613eb7908a6156e4565b9190613f7d565b6000613ecb848484612d53565b905060008280613edd57613edd61522f565b84860911156123d0576000198110613ef457600080fd5b6001019392505050565b60006001818080613f0f8885613fbb565b94509250613f1d8785613fbb565b94509150613f2b8685613fbb565b94509050613f3a838383612d53565b945083613f4d57613f4a85614f76565b94505b505050509392505050565b6000613f73613f6786846156e4565b8590600160801b613efe565b611229908461511f565b6000613f8a848484612ccc565b9050600081128015613faa5750613faa613fa385613fe5565b8484613ff0565b156123d057612b246000198261511f565b6000806000841215613fda57911591613fd384614f76565b9150613fde565b8391505b5092909150565b600061188f82611e9e565b6000818385098015612f3157506001949350505050565b8015158114611fcb57600080fd5b8035611e9981614007565b60006020828403121561403257600080fd5b81356123d081614007565b60006020828403121561404f57600080fd5b5035919050565b6003811061407457634e487b7160e01b600052602160045260246000fd5b9052565b6000608080830160018060a01b038089168552602088818701526040848188015283895180865260a089019150838b01955060005b818110156140d45786518051871684528501518584015295840195918301916001016140ad565b5050878103606089015288518082528382019550600581901b82018401848b0160005b838110156141f157848303601f19018952815180518916845287810151888501528681015187850152606080820151908501528a015160a08b850181905281519085018190529088019060009060c08601905b808310156141dc57835161415f838251614056565b8b8101518060020b8d850152508a81015160020b8b840152606081015161419160608501826001600160801b03169052565b508e8101518f84015260a081015160a084015260c081015160c084015260e081015160e084015261010080820151818501525050610120820191508a8401935060018301925061414a565b509a89019a94505050908601906001016140f7565b50909e9d5050505050505050505050505050565b6001600160a01b0381168114611fcb57600080fd5b600060e0828403121561272b57600080fd5b600080610100838503121561424057600080fd5b823561424b81614205565b915061425a846020850161421a565b90509250929050565b63ffffffff81168114611fcb57600080fd5b60008060006060848603121561428a57600080fd5b83359250602084013561429c81614263565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156142e5576142e56142ad565b60405290565b60405161012081016001600160401b03811182821017156142e5576142e56142ad565b604080519081016001600160401b03811182821017156142e5576142e56142ad565b604051601f8201601f191681016001600160401b0381118282101715614358576143586142ad565b604052919050565b8035611e9981614205565b600080600083850360c081121561438157600080fd5b84359350602085013561439381614263565b92506080603f19820112156143a757600080fd5b50604051608081018181106001600160401b03821117156143ca576143ca6142ad565b6040908152850135815260608501356143e281614205565b602082015260808501356143f581614007565b604082015260a085013561440881614007565b606082015292959194509192509050565b6000806040838503121561442c57600080fd5b823561443781614205565b9150602083013561444781614007565b809150509250929050565b60006020828403121561446457600080fd5b81356123d081614205565b6000806040838503121561448257600080fd5b50508035926020909101359150565b6000602082840312156144a357600080fd5b81356123d081614263565b60008060008084860360c08112156144c557600080fd5b60608112156144d357600080fd5b509395606087013595506080870135945060a08701359350915050565b8060020b8114611fcb57600080fd5b6000806000806080858703121561451557600080fd5b84359350602085013561452781614263565b92506040850135614537816144f0565b91506060850135614547816144f0565b939692955090935050565b61ffff81168114611fcb57600080fd5b8035611e9981614552565b6000806000806080858703121561458357600080fd5b8435935060208501359250604085013561459c81614263565b9150606085013561454781614552565b600080600080600060a086880312156145c457600080fd5b853594506020860135935060408601356145dd81614263565b925060608601356145ed81614552565b949793965091946080013592915050565b600080600080600060a0868803121561461657600080fd5b853561462181614205565b9450602086013561463181614205565b9350604086013561464181614205565b9250606086013561465181614205565b9150608086013561466181614205565b809150509295509295909350565b60008082840360c081121561468357600080fd5b833561468e81614205565b925060a0601f19820112156146a257600080fd5b506020830190509250929050565b60006001600160401b038211156146c9576146c96142ad565b5060051b60200190565b600060208083850312156146e657600080fd5b82356001600160401b038111156146fc57600080fd5b8301601f8101851361470d57600080fd5b803561472061471b826146b0565b614330565b81815260059190911b8201830190838101908783111561473f57600080fd5b928401925b828410156131ac57833582529284019290840190614744565b6020808252825182820181905260009190848201906040850190845b8181101561479557835183529284019291840191600101614779565b50909695505050505050565b600080602083850312156147b457600080fd5b82356001600160401b03808211156147cb57600080fd5b818501915085601f8301126147df57600080fd5b8135818111156147ee57600080fd5b8660208260051b850101111561480357600080fd5b60209290920196919550909350505050565b6000806040838503121561482857600080fd5b82359150602083013561444781614007565b6000806000610120848603121561485057600080fd5b83359250602084013561486281614263565b9150614871856040860161421a565b90509250925092565b60008060006060848603121561488f57600080fd5b833561489a81614205565b925060208401356148aa81614205565b915060408401356148ba81614263565b809150509250925092565b600080600080600060a086880312156148dd57600080fd5b8535945060208601356148ef81614263565b935060408601356148ff816144f0565b925060608601356145ed816144f0565b60038110611fcb57600080fd5b8051611e998161490f565b8051611e99816144f0565b80516001600160801b0381168114611e9957600080fd5b600082601f83011261495a57600080fd5b8151602061496a61471b836146b0565b82815260059290921b8401810191818101908684111561498957600080fd5b8286015b84811015614b135780516001600160401b03808211156149ac57600080fd5b9088019060a0828b03601f190112156149c457600080fd5b6149cc6142c3565b868301516149d981614205565b80825250604083015187820152606083015160408201526080830151606082015260a083015182811115614a0c57600080fd5b8084019350508a603f840112614a2157600080fd5b868301519150614a3361471b836146b0565b82815261012092830284016040019288820191908d851115614a5457600080fd5b6040860195505b84861015614afd5780868f031215614a7257600080fd5b614a7a6142eb565b614a838761491c565b8152614a908b8801614927565b8b820152614aa060408801614927565b6040820152614ab160608801614932565b60608201526080870151608082015260a087015160a082015260c087015160c082015260e087015160e08201526101008701516101008201528084525089830192508086019550614a5b565b506080830152508552505091830191830161498d565b509695505050505050565b60008060008060808587031215614b3457600080fd5b8451614b3f81614205565b8094505060208086015193506040808701516001600160401b0380821115614b6657600080fd5b818901915089601f830112614b7a57600080fd5b8151614b8861471b826146b0565b81815260069190911b8301850190858101908c831115614ba757600080fd5b938601935b82851015614bf05785858e031215614bc45760008081fd5b614bcc61430e565b8551614bd781614205565b8152858801518882015282529385019390860190614bac565b60608c01519098509550505080841115614c0957600080fd5b505050614c1887828801614949565b91505092959194509250565b634e487b7160e01b600052600160045260246000fd5b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000813561188f81614205565b80547fffffff0000000000000000000000000000000000000000ffffffffffffffffff1660489290921b6901000000000000000000600160e81b0316919091179055565b8135614cb681614552565b815461ffff191661ffff8216178255506020820135614cd481614552565b815463ffff00001916601082901b63ffff000016178255506040820135614cfa81614263565b815467ffffffff000000008260201b1691508167ffffffff000000001982161783556060840135614d2a81614007565b68ffffffffff00000000199190911690911790151560401b60ff60401b161781556080820135614d5981614205565b611a148183614c67565b8135614d6e81614205565b614d788183614c3a565b506020820135614d8781614205565b614d948160018401614c3a565b50600281016040830135614da781614552565b815461ffff191661ffff8216178255506060830135614dc581614552565b815463ffff00001916601082901b63ffff000016178255506080830135614deb81614263565b815467ffffffff000000008260201b1691508167ffffffff0000000019821617835560a0850135614e1b81614007565b68ffffffffff00000000199190911690911790151560401b60ff60401b16178155611a14614e4b60c08501614c5a565b82614c67565b60008060408385031215614e6457600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b60008219821115614e9e57614e9e614e75565b500190565b600082821015614eb557614eb5614e75565b500390565b8135614ec581614552565b815461ffff191661ffff8216178255506020820135614ee381614552565b815463ffff00001916601082901b63ffff000016178255506040820135614f0981614552565b815465ffff00000000191660209190911b65ffff000000001617905550565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000600160ff1b821415614f8c57614f8c614e75565b5060000390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614fbb57600080fd5b5051919050565b6000600019821415614fd657614fd6614e75565b5060010190565b600060208284031215614fef57600080fd5b81356123d081614552565b8035611e998161490f565b8481526001600160a01b038416602082015261014081018335615027816144f0565b60020b6040830152602084013561503d816144f0565b60020b60608301526040840135600f81900b811461505a57600080fd5b6150696080840182600f0b9052565b5061507660608501614360565b6001600160a01b031660a083015261509060808501614562565b61ffff1660c08301526150a560a08501614015565b151560e08301526150b860c08501614ffa565b6150c6610100840182614056565b508261012083015295945050505050565b60005b838110156150f25781810151838201526020016150da565b838111156116885750506000910152565b600082516151158184602087016150d7565b9190910192915050565b600080821280156001600160ff1b038490038513161561514157615141614e75565b600160ff1b839003841281161561515a5761515a614e75565b50500190565b600080828403608081121561517457600080fd5b835192506060601f198201121561518a57600080fd5b50604051606081018181106001600160401b03821117156151ad576151ad6142ad565b8060405250602084015181526040840151602082015260608401516040820152809150509250929050565b60006001600160a01b03838116908316818110156151f8576151f8614e75565b039392505050565b60006001600160a01b038281168482168115158284048211161561522657615226614e75565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160a01b038381168061525f5761525f61522f565b92169190910492915050565b60006020828403121561527d57600080fd5b81516123d081614007565b60008160001904831182151516156152a2576152a2614e75565b500290565b6000602082840312156152b957600080fd5b81516123d081614205565b600060ff821660ff8114156152db576152db614e75565b60010192915050565b60006001600160ff1b038184138284138082168684048611161561530a5761530a614e75565b600160ff1b600087128281168783058912161561532957615329614e75565b6000871292508782058712848416161561534557615345614e75565b8785058712818416161561535b5761535b614e75565b505050929093029392505050565b600080600080600080600060e0888a03121561538457600080fd5b875161538f81614205565b60208901519097506153a0816144f0565b60408901519096506153b181614552565b60608901519095506153c281614552565b60808901519094506153d381614552565b60a089015190935060ff811681146153ea57600080fd5b60c08901519092506153fb81614007565b8091505092959891949750929550565b6020808252825182820181905260009190848201906040850190845b8181101561479557835163ffffffff1683529284019291840191600101615427565b600082601f83011261545a57600080fd5b8151602061546a61471b836146b0565b82815260059290921b8401810191818101908684111561548957600080fd5b8286015b84811015614b135780516154a081614205565b835291830191830161548d565b600080604083850312156154c057600080fd5b82516001600160401b03808211156154d757600080fd5b818501915085601f8301126154eb57600080fd5b815160206154fb61471b836146b0565b82815260059290921b8401810191818101908984111561551a57600080fd5b948201945b838610156155485785518060060b81146155395760008081fd5b8252948201949082019061551f565b9188015191965090935050508082111561556157600080fd5b5061556e85828601615449565b9150509250929050565b60008160060b8360060b6000811281667fffffffffffff19018312811516156155a3576155a3614e75565b81667fffffffffffff0183138116156155be576155be614e75565b5090039392505050565b60008160060b8360060b806155df576155df61522f565b667fffffffffffff198214600019821416156155fd576155fd614e75565b90059392505050565b60008260060b806156195761561961522f565b808360060b0791505092915050565b60008160020b627fffff1981141561564257615642614e75565b6000190192915050565b602081526000825180602084015261566b8160408501602087016150d7565b601f01601f19169190910160400192915050565b60006080828403121561569157600080fd5b604051608081018181106001600160401b03821117156156b3576156b36142ad565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b60008083128015600160ff1b85018412161561570257615702614e75565b6001600160ff1b038401831381161561571d5761571d614e75565b5050039056fea164736f6c634300080a000a",
  "libraries": {
    "Account": "0xab05b9A355B46bA8c12E0444956a775c10373273"
  },
  "devdoc": {
    "errors": {
      "AccessDenied(address)": [
        {
          "params": {
            "senderAddress": "address of msg sender"
          }
        }
      ],
      "LowNotionalValue(uint256)": [
        {
          "params": {
            "notionalValue": "notional value of txn"
          }
        }
      ],
      "UninitializedToken(uint32)": [
        {
          "params": {
            "vTokenTruncatedAddress": "unitialized truncated address supplied"
          }
        }
      ],
      "UnsupportedRToken(address)": [
        {
          "params": {
            "rTokenAddress": "address of token"
          }
        }
      ],
      "UnsupportedVToken(address)": [
        {
          "params": {
            "vToken": "address of token"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addMargin(uint256,uint32,uint256)": {
        "params": {
          "accountNo": "account number",
          "amount": "amount of token to deposit",
          "vTokenTruncatedAddress": "truncated address of token to deposit"
        }
      },
      "createAccount()": {
        "returns": {
          "newAccountId": "- serial number of the new account created"
        }
      },
      "governance()": {
        "details": "Returns the address of the current governance."
      },
      "liquidateLiquidityPositions(uint256)": {
        "details": "removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee",
        "params": {
          "accountNo": "account number"
        }
      },
      "liquidateLiquidityPositionsWithGasClaim(uint256,uint256)": {
        "details": "removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee",
        "params": {
          "accountNo": "account number",
          "gasComputationUnitsClaim": "estimated computation gas units, if more than actual, tx will revert"
        },
        "returns": {
          "keeperFee": ": amount of fees paid to caller"
        }
      },
      "liquidateTokenPosition(uint256,uint256,uint32,uint16)": {
        "details": "transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee",
        "params": {
          "accountNo": "account number",
          "liquidationBps": "fraction of the token position to be transferred in BPS",
          "liquidatorAccountNo": "liquidator account number",
          "vTokenTruncatedAddress": "truncated address of token to withdraw"
        },
        "returns": {
          "liquidatorBalanceAdjustments": "- balance changes in liquidator base and token balance and net token position"
        }
      },
      "liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)": {
        "details": "transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee",
        "params": {
          "accountNo": "account number",
          "gasComputationUnitsClaim": "estimated computation gas units, if more than actual, tx will revert",
          "liquidationBps": "fraction of the token position to be transferred in BPS",
          "liquidatorAccountNo": "liquidator account number",
          "vTokenTruncatedAddress": "truncated address of token to withdraw"
        },
        "returns": {
          "liquidatorBalanceAdjustments": "- balance changes in liquidator base and token balance and net token position"
        }
      },
      "removeLimitOrder(uint256,uint32,int24,int24)": {
        "details": "checks the position of current price relative to limit order and checks limitOrderType",
        "params": {
          "accountNo": "account number",
          "tickLower": "liquidity change parameters",
          "tickUpper": "liquidity change parameters",
          "vTokenTruncatedAddress": "truncated address of token to withdraw"
        }
      },
      "removeMargin(uint256,uint32,uint256)": {
        "params": {
          "accountNo": "account number",
          "amount": "amount of token to withdraw",
          "vTokenTruncatedAddress": "truncated address of token to withdraw"
        }
      },
      "swapToken(uint256,uint32,(int256,uint160,bool,bool))": {
        "params": {
          "accountNo": "account number",
          "swapParams": "swap parameters",
          "vTokenTruncatedAddress": "truncated address of token to withdraw"
        }
      },
      "teamMultisig()": {
        "details": "Returns the address of the current team multisig.transferTeamMultisig"
      },
      "transferGovernance(address)": {
        "details": "Transfers governance to a new account (`newGovernance`). Can only be called by the current governance."
      },
      "transferTeamMultisig(address)": {
        "details": "Transfers teamMultisig to a new account (`newTeamMultisig`). Can only be called by the current teamMultisig or current governance."
      },
      "updateProfit(uint256,int256)": {
        "params": {
          "accountNo": "account number",
          "amount": "amount of token to withdraw"
        }
      },
      "updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))": {
        "params": {
          "accountNo": "account number",
          "liquidityChangeParams": "liquidity change parameters",
          "vTokenTruncatedAddress": "truncated address of token to withdraw"
        }
      },
      "withdrawProtocolFee(address[])": {
        "params": {
          "wrapperAddresses": "list of wrapper addresses to collect fees from"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AccessDenied(address)": [
        {
          "notice": "error to denote invalid account access"
        }
      ],
      "InvalidTokenLiquidationParameters()": [
        {
          "notice": "error to denote invalid token liquidation (fraction to liquidate> 1)"
        }
      ],
      "LowNotionalValue(uint256)": [
        {
          "notice": "error to denote low notional value of txn"
        }
      ],
      "SlippageBeyondTolerance()": [
        {
          "notice": "error to denote slippage of txn beyond set threshold"
        }
      ],
      "UninitializedToken(uint32)": [
        {
          "notice": "error to denote usage of unitialized token"
        }
      ],
      "UnsupportedRToken(address)": [
        {
          "notice": "error to denote usage of unsupported token"
        }
      ],
      "UnsupportedVToken(address)": [
        {
          "notice": "error to denote usage of unsupported token"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "__ClearingHouse_init(address,address,address,address,address)": {
        "notice": "PLATFORM FUNCTIONS"
      },
      "addCollateralSupport(address,address,uint32)": {
        "notice": "ADMIN FUNCTIONS"
      },
      "addMargin(uint256,uint32,uint256)": {
        "notice": "deposits 'amount' of token associated with 'vTokenTruncatedAddress'"
      },
      "createAccount()": {
        "notice": "creates a new account and adds it to the accounts map"
      },
      "getAccountView(uint256)": {
        "notice": "Account.UserInfo VIEW"
      },
      "liquidateLiquidityPositions(uint256)": {
        "notice": "keeper call for liquidation of range position"
      },
      "liquidateLiquidityPositionsWithGasClaim(uint256,uint256)": {
        "notice": "keeper call for liquidation of range position"
      },
      "liquidateTokenPosition(uint256,uint256,uint32,uint16)": {
        "notice": "keeper call for liquidation of token position"
      },
      "liquidateTokenPositionWithGasClaim(uint256,uint256,uint32,uint16,uint256)": {
        "notice": "keeper call for liquidation of token position"
      },
      "protocolInfo()": {
        "notice": "Account.ProtocolInfo VIEW"
      },
      "removeLimitOrder(uint256,uint32,int24,int24)": {
        "notice": "keeper call to remove a limit order"
      },
      "removeLimitOrderWithGasClaim(uint256,uint32,int24,int24,uint256)": {
        "notice": "ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM"
      },
      "removeMargin(uint256,uint32,uint256)": {
        "notice": "withdraws 'amount' of token associated with 'vTokenTruncatedAddress'"
      },
      "swapToken(uint256,uint32,(int256,uint160,bool,bool))": {
        "notice": "swaps token associated with 'vTokenTruncatedAddress' by 'amount' (Long if amount>0 else Short)"
      },
      "updateProfit(uint256,int256)": {
        "notice": "withdraws 'amount' of base token from the profit made"
      },
      "updateRangeOrder(uint256,uint32,(int24,int24,int128,uint160,uint16,bool,uint8))": {
        "notice": "updates range order of token associated with 'vTokenTruncatedAddress' by 'liquidityDelta' (Adds if amount>0 else Removes)also can be used to update limitOrderType"
      },
      "withdrawProtocolFee(address[])": {
        "notice": "withdraws protocol fees collected in the supplied wrappers to team multisig"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 252,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 255,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 26745,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "_governance",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26747,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "_teamMultisig",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 19565,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "_emptySlots1",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)98_storage"
      },
      {
        "astId": 19568,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "protocol",
        "offset": 0,
        "slot": "100",
        "type": "t_struct(ProtocolInfo)8369_storage"
      },
      {
        "astId": 19573,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "supportedVTokens",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_contract(IVToken)8253,t_bool)"
      },
      {
        "astId": 19577,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "supportedDeposits",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19579,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "numAccounts",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 19584,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "accounts",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_uint256,t_struct(UserInfo)8336_storage)"
      },
      {
        "astId": 19586,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "paused",
        "offset": 0,
        "slot": "212",
        "type": "t_bool"
      },
      {
        "astId": 19589,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "rBase",
        "offset": 1,
        "slot": "212",
        "type": "t_contract(IERC20)3180"
      },
      {
        "astId": 19591,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "rageTradeFactoryAddress",
        "offset": 0,
        "slot": "213",
        "type": "t_address"
      },
      {
        "astId": 19594,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "insuranceFund",
        "offset": 0,
        "slot": "214",
        "type": "t_contract(IInsuranceFund)8050"
      },
      {
        "astId": 19597,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "nativeOracle",
        "offset": 0,
        "slot": "215",
        "type": "t_contract(IOracle)8060"
      },
      {
        "astId": 19601,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "_emptySlots2",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)100_storage"
      },
      {
        "astId": 27310,
        "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
        "label": "txGasPriceLimit",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)100_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[100]",
        "numberOfBytes": "3200"
      },
      "t_array(t_uint256)98_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[98]",
        "numberOfBytes": "3136"
      },
      "t_array(t_uint32)8_storage": {
        "base": "t_uint32",
        "encoding": "inplace",
        "label": "uint32[8]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint48)5_storage": {
        "base": "t_uint48",
        "encoding": "inplace",
        "label": "uint48[5]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3180": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInsuranceFund)8050": {
        "encoding": "inplace",
        "label": "contract IInsuranceFund",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)8060": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV3Pool)5097": {
        "encoding": "inplace",
        "label": "contract IUniswapV3Pool",
        "numberOfBytes": "20"
      },
      "t_contract(IVBase)8084": {
        "encoding": "inplace",
        "label": "contract IVBase",
        "numberOfBytes": "20"
      },
      "t_contract(IVPoolWrapper)8229": {
        "encoding": "inplace",
        "label": "contract IVPoolWrapper",
        "numberOfBytes": "20"
      },
      "t_contract(IVToken)8253": {
        "encoding": "inplace",
        "label": "contract IVToken",
        "numberOfBytes": "20"
      },
      "t_enum(LimitOrderType)7622": {
        "encoding": "inplace",
        "label": "enum IClearingHouse.LimitOrderType",
        "numberOfBytes": "1"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IVToken)8253,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IVToken)8253",
        "label": "mapping(contract IVToken => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IVToken)8253,t_struct(RageTradePool)7606_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IVToken)8253",
        "label": "mapping(contract IVToken => struct IClearingHouse.RageTradePool)",
        "numberOfBytes": "32",
        "value": "t_struct(RageTradePool)7606_storage"
      },
      "t_mapping(t_uint256,t_struct(UserInfo)8336_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Account.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)8336_storage"
      },
      "t_mapping(t_uint32,t_contract(IVToken)8253)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => contract IVToken)",
        "numberOfBytes": "32",
        "value": "t_contract(IVToken)8253"
      },
      "t_mapping(t_uint32,t_struct(Position)15685_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct VTokenPosition.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)15685_storage"
      },
      "t_mapping(t_uint32,t_struct(RToken)12301_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct RTokenLib.RToken)",
        "numberOfBytes": "32",
        "value": "t_struct(RToken)12301_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint48,t_struct(Info)10619_storage)": {
        "encoding": "mapping",
        "key": "t_uint48",
        "label": "mapping(uint48 => struct LiquidityPosition.Info)",
        "numberOfBytes": "32",
        "value": "t_struct(Info)10619_storage"
      },
      "t_struct(Info)10619_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityPosition.Info",
        "members": [
          {
            "astId": 10598,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "limitOrderType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(LimitOrderType)7622"
          },
          {
            "astId": 10600,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "tickLower",
            "offset": 1,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 10602,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "tickUpper",
            "offset": 4,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 10604,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "liquidity",
            "offset": 7,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 10606,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "vTokenAmountIn",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 10608,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "sumALastX128",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 10610,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "sumBInsideLastX128",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 10612,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "sumFpInsideLastX128",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 10614,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "sumFeeInsideLastX128",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10618,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "3392"
      },
      "t_struct(Info)11340_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityPositionSet.Info",
        "members": [
          {
            "astId": 11330,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint48)5_storage"
          },
          {
            "astId": 11335,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint48,t_struct(Info)10619_storage)"
          },
          {
            "astId": 11339,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "3264"
      },
      "t_struct(Info)9949_storage": {
        "encoding": "inplace",
        "label": "struct DepositTokenSet.Info",
        "members": [
          {
            "astId": 9940,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "active",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint32)8_storage"
          },
          {
            "astId": 9944,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "deposits",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint32,t_uint256)"
          },
          {
            "astId": 9948,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "3264"
      },
      "t_struct(LiquidationParams)8376_storage": {
        "encoding": "inplace",
        "label": "struct Account.LiquidationParams",
        "members": [
          {
            "astId": 8371,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "liquidationFeeFraction",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8373,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "tokenLiquidationPriceDeltaBps",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8375,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "insuranceFundFeeShareBps",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Position)15685_storage": {
        "encoding": "inplace",
        "label": "struct VTokenPosition.Position",
        "members": [
          {
            "astId": 15673,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 15675,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "netTraderPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 15677,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "sumAX128Ckpt",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 15680,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "liquidityPositions",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Info)11340_storage"
          },
          {
            "astId": 15684,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "105",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "6560"
      },
      "t_struct(ProtocolInfo)8369_storage": {
        "encoding": "inplace",
        "label": "struct Account.ProtocolInfo",
        "members": [
          {
            "astId": 8342,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "pools",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_contract(IVToken)8253,t_struct(RageTradePool)7606_storage)"
          },
          {
            "astId": 8347,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "rTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint32,t_struct(RToken)12301_storage)"
          },
          {
            "astId": 8352,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "vTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint32,t_contract(IVToken)8253)"
          },
          {
            "astId": 8355,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "vBase",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IVBase)8084"
          },
          {
            "astId": 8358,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "liquidationParams",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(LiquidationParams)8376_storage"
          },
          {
            "astId": 8360,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "minRequiredMargin",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8362,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "removeLimitOrderFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8364,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "minimumOrderNotional",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8368,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "3456"
      },
      "t_struct(RToken)12301_storage": {
        "encoding": "inplace",
        "label": "struct RTokenLib.RToken",
        "members": [
          {
            "astId": 12296,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12298,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "oracleAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12300,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "oracleTimeHorizon",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RageTradePool)7606_storage": {
        "encoding": "inplace",
        "label": "struct IClearingHouse.RageTradePool",
        "members": [
          {
            "astId": 7599,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "vPool",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IUniswapV3Pool)5097"
          },
          {
            "astId": 7602,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "vPoolWrapper",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IVPoolWrapper)8229"
          },
          {
            "astId": 7605,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "settings",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(RageTradePoolSettings)7618_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RageTradePoolSettings)7618_storage": {
        "encoding": "inplace",
        "label": "struct IClearingHouse.RageTradePoolSettings",
        "members": [
          {
            "astId": 7608,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "initialMarginRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7610,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "maintainanceMarginRatio",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 7612,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "twapDuration",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7614,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "whitelisted",
            "offset": 8,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7617,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "oracle",
            "offset": 9,
            "slot": "0",
            "type": "t_contract(IOracle)8060"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)15946_storage": {
        "encoding": "inplace",
        "label": "struct VTokenPositionSet.Set",
        "members": [
          {
            "astId": 15932,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "accountNo",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15936,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "active",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint32)8_storage"
          },
          {
            "astId": 15941,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "positions",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint32,t_struct(Position)15685_storage)"
          },
          {
            "astId": 15945,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "3296"
      },
      "t_struct(UserInfo)8336_storage": {
        "encoding": "inplace",
        "label": "struct Account.UserInfo",
        "members": [
          {
            "astId": 8325,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8328,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "tokenPositions",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Set)15946_storage"
          },
          {
            "astId": 8331,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "tokenDeposits",
            "offset": 0,
            "slot": "104",
            "type": "t_struct(Info)9949_storage"
          },
          {
            "astId": 8335,
            "contract": "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol:ClearingHouseArbitrum",
            "label": "_emptySlots",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_uint256)100_storage"
          }
        ],
        "numberOfBytes": "9792"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}