{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/clearinghouse/IClearingHouseActions.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseActions is IClearingHouseStructures {\n    /// @notice creates a new account and adds it to the accounts map\n    /// @return newAccountId - serial number of the new account created\n    function createAccount() external returns (uint256 newAccountId);\n\n    /// @notice deposits 'amount' of token associated with 'poolId'\n    /// @param accountId account id\n    /// @param poolId truncated address of token to deposit\n    /// @param amount amount of token to deposit\n    function addMargin(\n        uint256 accountId,\n        uint32 poolId,\n        uint256 amount\n    ) external;\n\n    /// @notice creates a new account and deposits 'amount' of token associated with 'poolId'\n    /// @param poolId truncated address of token to deposit\n    /// @param amount amount of token to deposit\n    /// @return newAccountId - serial number of the new account created\n    function createAccountAndAddMargin(uint32 poolId, uint256 amount) external returns (uint256 newAccountId);\n\n    /// @notice withdraws 'amount' of token associated with 'poolId'\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param amount amount of token to withdraw\n    function removeMargin(\n        uint256 accountId,\n        uint32 poolId,\n        uint256 amount\n    ) external;\n\n    /// @notice withdraws 'amount' of settlement token from the profit made\n    /// @param accountId account id\n    /// @param amount amount of token to withdraw\n    function updateProfit(uint256 accountId, int256 amount) external;\n\n    /// @notice swaps token associated with 'poolId' by 'amount' (Long if amount>0 else Short)\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param swapParams swap parameters\n    function swapToken(\n        uint256 accountId,\n        uint32 poolId,\n        SwapParams memory swapParams\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\n\n    /// @notice updates range order of token associated with 'poolId' by 'liquidityDelta' (Adds if amount>0 else Removes)\n    /// @notice also can be used to update limitOrderType\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param liquidityChangeParams liquidity change parameters\n    function updateRangeOrder(\n        uint256 accountId,\n        uint32 poolId,\n        LiquidityChangeParams calldata liquidityChangeParams\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut);\n\n    /// @notice keeper call to remove a limit order\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param tickLower liquidity change parameters\n    /// @param tickUpper liquidity change parameters\n    function removeLimitOrder(\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper\n    ) external;\n\n    /// @notice keeper call for liquidation of range position\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\n    /// @param accountId account id\n    function liquidateLiquidityPositions(uint256 accountId) external;\n\n    /// @notice keeper call for liquidation of token position\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\n    /// @param liquidatorAccountId liquidator account id\n    /// @param targetAccountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator vQuote and token balance and net token position\n    function liquidateTokenPosition(\n        uint256 liquidatorAccountId,\n        uint256 targetAccountId,\n        uint32 poolId,\n        uint16 liquidationBps\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\n\n    /// @notice keeper call to remove a limit order\n    /// @dev checks the position of current price relative to limit order and checks limitOrderType\n    /// @param accountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param tickLower liquidity change parameters\n    /// @param tickUpper liquidity change parameters\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\n    /// @return keeperFee : amount of fees paid to caller\n    function removeLimitOrderWithGasClaim(\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 gasComputationUnitsClaim\n    ) external returns (uint256 keeperFee);\n\n    /// @notice keeper call for liquidation of range position\n    /// @dev removes all the active range positions and gives liquidator a percent of notional amount closed + fixedFee\n    /// @param accountId account id\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\n    /// @return keeperFee : amount of fees paid to caller\n    function liquidateLiquidityPositionsWithGasClaim(uint256 accountId, uint256 gasComputationUnitsClaim)\n        external\n        returns (int256 keeperFee);\n\n    /// @notice keeper call for liquidation of token position\n    /// @dev transfers the fraction of token position at a discount to current price to liquidators account and gives liquidator some fixedFee\n    /// @param liquidatorAccountId liquidator account id\n    /// @param targetAccountId account id\n    /// @param poolId truncated address of token to withdraw\n    /// @param liquidationBps fraction of the token position to be transferred in BPS\n    /// @param gasComputationUnitsClaim estimated computation gas units, if more than actual, tx will revert\n    /// @return liquidatorBalanceAdjustments - balance changes in liquidator vQuote and token balance and net token position\n    function liquidateTokenPositionWithGasClaim(\n        uint256 liquidatorAccountId,\n        uint256 targetAccountId,\n        uint32 poolId,\n        uint16 liquidationBps,\n        uint256 gasComputationUnitsClaim\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments);\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseStructures.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IOracle } from '../IOracle.sol';\nimport { IVToken } from '../IVToken.sol';\nimport { IVPoolWrapper } from '../IVPoolWrapper.sol';\n\nimport { IClearingHouseEnums } from './IClearingHouseEnums.sol';\n\ninterface IClearingHouseStructures is IClearingHouseEnums {\n    struct Collateral {\n        IERC20 token;\n        CollateralSettings settings; // mutable by governance\n    }\n\n    struct CollateralSettings {\n        IOracle oracle;\n        uint32 twapDuration;\n        bool isAllowedForDeposit;\n    }\n\n    struct Pool {\n        IVToken vToken;\n        IUniswapV3Pool vPool;\n        IVPoolWrapper vPoolWrapper;\n        PoolSettings settings; // mutable by governance\n    }\n\n    struct PoolSettings {\n        uint16 initialMarginRatio;\n        uint16 maintainanceMarginRatio;\n        uint32 twapDuration;\n        bool isAllowedForTrade;\n        bool isCrossMargined;\n        IOracle oracle;\n    }\n\n    struct LiquidityChangeParams {\n        int24 tickLower;\n        int24 tickUpper;\n        int128 liquidityDelta;\n        uint160 sqrtPriceCurrent;\n        uint16 slippageToleranceBps;\n        bool closeTokenPosition;\n        LimitOrderType limitOrderType;\n    }\n\n    /// @notice swaps params for specifying the swap params\n    /// @param amount amount of tokens/vQuote to swap\n    /// @param sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\n    /// @param isNotional specifies whether the amount represents token amount (false) or vQuote amount(true)\n    /// @param isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\n    struct SwapParams {\n        int256 amount;\n        uint160 sqrtPriceLimit;\n        bool isNotional;\n        bool isPartialAllowed;\n    }\n\n    /// @notice parameters to be used for account balance update\n    /// @param vQuoteIncrease specifies the increase in vQuote balance\n    /// @param vTokenIncrease specifies the increase in token balance\n    /// @param traderPositionIncrease specifies the increase in trader position\n    struct BalanceAdjustments {\n        int256 vQuoteIncrease;\n        int256 vTokenIncrease;\n        int256 traderPositionIncrease;\n    }\n\n    /// @notice parameters to be used for liquidation\n    /// @param liquidationFeeFraction specifies the percentage of notional value liquidated to be charged as liquidation fees (scaled by 1e5)\n    /// @param tokenLiquidationPriceDeltaBps specifies the price delta from current perp price at which the liquidator should get the position (scaled by 1e4)\n    /// @param insuranceFundFeeShare specifies the fee share for insurance fund out of the total liquidation fee (scaled by 1e4)\n    /// @param maxRangeLiquidationFees specifies the the maximum range liquidation fees (in settlement token amount decimals)\n\n    struct LiquidationParams {\n        uint16 liquidationFeeFraction;\n        uint16 tokenLiquidationPriceDeltaBps;\n        uint16 insuranceFundFeeShareBps;\n        uint128 maxRangeLiquidationFees;\n    }\n\n    struct CollateralDepositView {\n        IERC20 collateral;\n        uint256 balance;\n    }\n\n    struct VTokenPositionView {\n        IVToken vToken;\n        int256 balance; // vTokenLong - vTokenShort\n        int256 netTraderPosition;\n        int256 sumAX128Chkpt;\n        LiquidityPositionView[] liquidityPositions;\n    }\n\n    struct LiquidityPositionView {\n        LimitOrderType limitOrderType;\n        // the tick range of the position;\n        int24 tickLower;\n        int24 tickUpper;\n        // the liquidity of the position\n        uint128 liquidity;\n        int256 vTokenAmountIn;\n        // funding payment checkpoints\n        int256 sumALastX128;\n        int256 sumBInsideLastX128;\n        int256 sumFpInsideLastX128;\n        // fee growth inside\n        uint256 sumFeeInsideLastX128;\n    }\n\n    struct MulticallOperation {\n        MulticallOperationType operationType;\n        bytes data;\n    }\n\n    struct SwapValues {\n        int256 amountSpecified;\n        int256 vTokenIn;\n        int256 vQuoteIn;\n        uint256 liquidityFees;\n        uint256 protocolFees;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\ninterface IOracle {\n    function getTwapPriceX128(uint32 twapDuration) external view returns (uint256 priceX128);\n}\n"
    },
    "contracts/interfaces/IVToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVToken is IERC20 {\n    function mint(address account, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function setVPoolWrapper(address) external;\n}\n"
    },
    "contracts/interfaces/IVPoolWrapper.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IVQuote } from './IVQuote.sol';\nimport { IVToken } from './IVToken.sol';\nimport { IClearingHouse } from './IClearingHouse.sol';\n\ninterface IVPoolWrapper {\n    struct WrapperValuesInside {\n        int256 sumAX128;\n        int256 sumBInsideX128;\n        int256 sumFpInsideX128;\n        uint256 sumFeeInsideX128;\n    }\n\n    event Swap(int256 vTokenIn, int256 vQuoteIn, uint256 liquidityFees, uint256 protocolFees);\n\n    event Mint(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\n\n    event Burn(int24 tickLower, int24 tickUpper, uint128 liquidity, uint256 vTokenPrincipal, uint256 vQuotePrincipal);\n\n    event AccruedProtocolFeeCollected(uint256 amount);\n\n    event LiquidityFeeUpdated(uint24 liquidityFeePips);\n\n    event ProtocolFeeUpdated(uint24 protocolFeePips);\n\n    struct InitializeVPoolWrapperParams {\n        IClearingHouse clearingHouse;\n        IVToken vToken;\n        IVQuote vQuote;\n        IUniswapV3Pool vPool;\n        uint24 liquidityFeePips;\n        uint24 protocolFeePips;\n        uint24 UNISWAP_V3_DEFAULT_FEE_TIER;\n    }\n\n    function __initialize_VPoolWrapper(InitializeVPoolWrapperParams memory params) external;\n\n    function vPool() external view returns (IUniswapV3Pool);\n\n    function updateGlobalFundingState() external;\n\n    function getValuesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside);\n\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside);\n\n    function swap(\n        bool swapVTokenForVQuote, // zeroForOne\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) external returns (int256 vTokenAmount, int256 vQuoteAmount);\n\n    function mint(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        returns (\n            uint256 vTokenPrincipal,\n            uint256 vQuotePrincipal,\n            WrapperValuesInside memory wrapperValuesInside\n        );\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        returns (\n            uint256 vTokenPrincipal,\n            uint256 vQuotePrincipal,\n            WrapperValuesInside memory wrapperValuesInside\n        );\n\n    function getSumAX128() external view returns (int256);\n\n    function getExtrapolatedSumAX128() external view returns (int256);\n\n    function collectAccruedProtocolFee() external returns (uint256 accruedProtocolFeeLast);\n\n    function uniswapFeePips() external view returns (uint24);\n\n    function liquidityFeePips() external view returns (uint24);\n\n    function protocolFeePips() external view returns (uint24);\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseEnums.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\ninterface IClearingHouseEnums {\n    enum LimitOrderType {\n        NONE,\n        LOWER_LIMIT,\n        UPPER_LIMIT\n    }\n\n    enum MulticallOperationType {\n        ADD_MARGIN,\n        REMOVE_MARGIN,\n        UPDATE_PROFIT,\n        SWAP_TOKEN,\n        UPDATE_RANGE_ORDER,\n        REMOVE_LIMIT_ORDER,\n        LIQUIDATE_LIQUIDITY_POSITIONS,\n        LIQUIDATE_TOKEN_POSITION\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/interfaces/IVQuote.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IVQuote is IERC20 {\n    function mint(address account, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function authorize(address vPoolWrapper) external;\n}\n"
    },
    "contracts/interfaces/IClearingHouse.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IGovernable } from './IGovernable.sol';\n\nimport { IClearingHouseActions } from './clearinghouse/IClearingHouseActions.sol';\nimport { IClearingHouseCustomErrors } from './clearinghouse/IClearingHouseCustomErrors.sol';\nimport { IClearingHouseEnums } from './clearinghouse/IClearingHouseEnums.sol';\nimport { IClearingHouseEvents } from './clearinghouse/IClearingHouseEvents.sol';\nimport { IClearingHouseOwnerActions } from './clearinghouse/IClearingHouseOwnerActions.sol';\nimport { IClearingHouseStructures } from './clearinghouse/IClearingHouseStructures.sol';\nimport { IClearingHouseSystemActions } from './clearinghouse/IClearingHouseSystemActions.sol';\nimport { IClearingHouseView } from './clearinghouse/IClearingHouseView.sol';\n\ninterface IClearingHouse is\n    IGovernable,\n    IClearingHouseEnums,\n    IClearingHouseStructures,\n    IClearingHouseActions,\n    IClearingHouseCustomErrors,\n    IClearingHouseEvents,\n    IClearingHouseOwnerActions,\n    IClearingHouseSystemActions,\n    IClearingHouseView\n{}\n"
    },
    "contracts/interfaces/IGovernable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\ninterface IGovernable {\n    function governance() external view returns (address);\n\n    function teamMultisig() external view returns (address);\n\n    function transferGovernance(address newGovernance) external;\n\n    function transferTeamMultisig(address newTeamMultisig) external;\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseCustomErrors.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseCustomErrors is IClearingHouseStructures {\n    /// @notice error to denote invalid account access\n    /// @param senderAddress address of msg sender\n    error AccessDenied(address senderAddress);\n\n    /// @notice error to denote usage of uninitialized token\n    /// @param collateralId address of token\n    error CollateralDoesNotExist(uint32 collateralId);\n\n    /// @notice error to denote usage of unsupported collateral token\n    /// @param collateralId address of token\n    error CollateralNotAllowedForUse(uint32 collateralId);\n\n    /// @notice error to denote usage of uninitialized pool\n    /// @param poolId unitialized truncated address supplied\n    error PoolDoesNotExist(uint32 poolId);\n\n    /// @notice error to denote usage of unsupported pool\n    /// @param poolId address of token\n    error PoolNotAllowedForTrade(uint32 poolId);\n\n    /// @notice error to denote low notional value of txn\n    /// @param notionalValue notional value of txn\n    error LowNotionalValue(uint256 notionalValue);\n\n    /// @notice error to denote incorrect address is supplied while updating collateral settings\n    /// @param incorrectAddress incorrect address of collateral token\n    /// @param correctAddress correct address of collateral token\n    error IncorrectCollateralAddress(IERC20 incorrectAddress, IERC20 correctAddress);\n\n    /// @notice error to denote invalid address supplied as a collateral token\n    /// @param invalidAddress invalid address of collateral token\n    error InvalidCollateralAddress(address invalidAddress);\n\n    /// @notice error to denote invalid token liquidation (fraction to liquidate> 1)\n    error InvalidTokenLiquidationParameters();\n\n    /// @notice this is errored when the enum (uint8) value is out of bounds\n    /// @param multicallOperationType is the value that is out of bounds\n    error InvalidMulticallOperationType(MulticallOperationType multicallOperationType);\n\n    /// @notice error to denote slippage of txn beyond set threshold\n    error SlippageBeyondTolerance();\n\n    /// @notice error to denote that keeper fee is negative or zero\n    error KeeperFeeNotPositive(int256 keeperFee);\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseEvents.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseEvents is IClearingHouseStructures {\n    /// @notice denotes new account creation\n    /// @param ownerAddress wallet address of account owner\n    /// @param accountId serial number of the account\n    event AccountCreated(address indexed ownerAddress, uint256 accountId);\n\n    /// @notice denotes deposit of margin\n    /// @param accountId serial number of the account\n    /// @param collateralId token in which margin is deposited\n    /// @param amount amount of tokens deposited\n    event MarginAdded(uint256 indexed accountId, uint32 indexed collateralId, uint256 amount);\n\n    /// @notice denotes withdrawal of margin\n    /// @param accountId serial number of the account\n    /// @param collateralId token in which margin is withdrawn\n    /// @param amount amount of tokens withdrawn\n    event MarginRemoved(uint256 indexed accountId, uint32 indexed collateralId, uint256 amount);\n\n    /// @notice new collateral supported as margin\n    /// @param cTokenInfo collateral token info\n    event CollateralSettingsUpdated(IERC20 cToken, CollateralSettings cTokenInfo);\n\n    /// @notice maintainance margin ratio of a pool changed\n    /// @param poolId id of the rage trade pool\n    /// @param settings new settings\n    event PoolSettingsUpdated(uint32 poolId, PoolSettings settings);\n\n    /// @notice protocol settings changed\n    /// @param liquidationParams liquidation params\n    /// @param removeLimitOrderFee fee for remove limit order\n    /// @param minimumOrderNotional minimum order notional\n    /// @param minRequiredMargin minimum required margin\n    event ProtocolSettingsUpdated(\n        LiquidationParams liquidationParams,\n        uint256 removeLimitOrderFee,\n        uint256 minimumOrderNotional,\n        uint256 minRequiredMargin\n    );\n\n    event PausedUpdated(bool paused);\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseOwnerActions.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseOwnerActions is IClearingHouseStructures {\n    /// @notice updates the collataral settings\n    /// @param cToken collateral token\n    /// @param collateralSettings settings\n    function updateCollateralSettings(IERC20 cToken, CollateralSettings memory collateralSettings) external;\n\n    /// @notice updates the rage trade pool settings\n    /// @param poolId rage trade pool id\n    /// @param newSettings updated rage trade pool settings\n    function updatePoolSettings(uint32 poolId, PoolSettings calldata newSettings) external;\n\n    /// @notice updates the protocol settings\n    /// @param liquidationParams liquidation params\n    /// @param removeLimitOrderFee fee for remove limit order\n    /// @param minimumOrderNotional minimum order notional\n    /// @param minRequiredMargin minimum required margin\n    function updateProtocolSettings(\n        LiquidationParams calldata liquidationParams,\n        uint256 removeLimitOrderFee,\n        uint256 minimumOrderNotional,\n        uint256 minRequiredMargin\n    ) external;\n\n    /// @notice withdraws protocol fees collected in the supplied wrappers to team multisig\n    /// @param wrapperAddresses list of wrapper addresses to collect fees from\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external;\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseSystemActions.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IInsuranceFund } from '../IInsuranceFund.sol';\nimport { IOracle } from '../IOracle.sol';\nimport { IVQuote } from '../IVQuote.sol';\nimport { IVToken } from '../IVToken.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseSystemActions is IClearingHouseStructures {\n    /// @notice initializes clearing house contract\n    /// @param rageTradeFactoryAddress rage trade factory address\n    /// @param defaultCollateralToken address of default collateral token\n    /// @param defaultCollateralTokenOracle address of default collateral token oracle\n    /// @param insuranceFund address of insurance fund\n    /// @param vQuote address of vQuote\n    /// @param nativeOracle address of native oracle\n    function __initialize_ClearingHouse(\n        address rageTradeFactoryAddress,\n        IERC20 defaultCollateralToken,\n        IOracle defaultCollateralTokenOracle,\n        IInsuranceFund insuranceFund,\n        IVQuote vQuote,\n        IOracle nativeOracle\n    ) external;\n\n    function registerPool(Pool calldata poolInfo) external;\n}\n"
    },
    "contracts/interfaces/clearinghouse/IClearingHouseView.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IVToken } from '../IVToken.sol';\nimport { IVQuote } from '../IVQuote.sol';\n\nimport { IClearingHouseStructures } from './IClearingHouseStructures.sol';\n\ninterface IClearingHouseView is IClearingHouseStructures {\n    function isPoolIdAvailable(uint32 truncated) external view returns (bool);\n\n    function getTwapPrices(IVToken vToken) external view returns (uint256 realPriceX128, uint256 virtualPriceX128);\n\n    /**\n        Protocol.Info VIEW\n     */\n    function protocolInfo()\n        external\n        view\n        returns (\n            IVQuote vQuote,\n            LiquidationParams memory liquidationParams,\n            uint256 minRequiredMargin,\n            uint256 removeLimitOrderFee,\n            uint256 minimumOrderNotional\n        );\n\n    function getPoolInfo(uint32 poolId) external view returns (Pool memory);\n\n    function getCollateralInfo(uint32 collateralId) external view returns (Collateral memory);\n\n    /**\n        Account.UserInfo VIEW\n     */\n\n    function getAccountInfo(uint256 accountId)\n        external\n        view\n        returns (\n            address owner,\n            int256 vQuoteBalance,\n            CollateralDepositView[] memory collateralDeposits,\n            VTokenPositionView[] memory tokenPositions\n        );\n\n    function getAccountMarketValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\n        external\n        view\n        returns (int256 accountMarketValue, int256 requiredMargin);\n\n    function getAccountNetProfit(uint256 accountId) external view returns (int256 accountNetProfit);\n\n    function getNetTokenPosition(uint256 accountId, uint32 vTokenTruncatedAddess)\n        external\n        view\n        returns (int256 netPosition);\n}\n"
    },
    "contracts/interfaces/IInsuranceFund.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\n\ninterface IInsuranceFund {\n    function __initialize_InsuranceFund(\n        IERC20 settlementToken,\n        IClearingHouse clearingHouse,\n        string calldata name,\n        string calldata symbol\n    ) external;\n\n    function claim(uint256 amount) external;\n}\n"
    },
    "contracts/protocol/clearinghouse/ClearingHouse.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport { PausableUpgradeable } from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { Account } from '../../libraries/Account.sol';\nimport { AddressHelper } from '../../libraries/AddressHelper.sol';\nimport { Calldata } from '../../libraries/Calldata.sol';\nimport { Protocol } from '../../libraries/Protocol.sol';\nimport { SignedMath } from '../../libraries/SignedMath.sol';\n\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\nimport { IOracle } from '../../interfaces/IOracle.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\n\nimport { IClearingHouseActions } from '../../interfaces/clearinghouse/IClearingHouseActions.sol';\nimport { IClearingHouseStructures } from '../../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IClearingHouseEnums } from '../../interfaces/clearinghouse/IClearingHouseEnums.sol';\nimport { IClearingHouseOwnerActions } from '../../interfaces/clearinghouse/IClearingHouseOwnerActions.sol';\nimport { IClearingHouseSystemActions } from '../../interfaces/clearinghouse/IClearingHouseSystemActions.sol';\n\nimport { Governable } from '../../utils/Governable.sol';\nimport { Multicall } from '../../utils/Multicall.sol';\nimport { OptimisticGasUsedClaim } from '../../utils/OptimisticGasUsedClaim.sol';\n\nimport { ClearingHouseView } from './ClearingHouseView.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract ClearingHouse is\n    IClearingHouse,\n    Multicall,\n    OptimisticGasUsedClaim,\n    ClearingHouseView, // contains storage\n    Initializable, // contains storage\n    PausableUpgradeable, // contains storage\n    Governable // contains storage\n{\n    using Account for Account.Info;\n    using AddressHelper for address;\n    using AddressHelper for IERC20;\n    using AddressHelper for IVToken;\n    using Protocol for Protocol.Info;\n    using SafeERC20 for IERC20;\n    using SignedMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    error NotRageTradeFactory();\n    error ZeroAmount();\n\n    modifier onlyRageTradeFactory() {\n        if (rageTradeFactoryAddress != msg.sender) revert NotRageTradeFactory();\n        _;\n    }\n\n    /**\n        SYSTEM FUNCTIONS\n     */\n\n    function __initialize_ClearingHouse(\n        address _rageTradeFactoryAddress,\n        IERC20 _defaultCollateralToken,\n        IOracle _defaultCollateralTokenOracle,\n        IInsuranceFund _insuranceFund,\n        IVQuote _vQuote,\n        IOracle _nativeOracle\n    ) external initializer {\n        rageTradeFactoryAddress = _rageTradeFactoryAddress;\n        protocol.settlementToken = _defaultCollateralToken;\n        insuranceFund = _insuranceFund;\n        nativeOracle = _nativeOracle;\n\n        protocol.vQuote = _vQuote;\n\n        _updateCollateralSettings(\n            _defaultCollateralToken,\n            CollateralSettings({ oracle: _defaultCollateralTokenOracle, twapDuration: 60, isAllowedForDeposit: true })\n        );\n\n        __Governable_init();\n        __Pausable_init_unchained();\n    }\n\n    function registerPool(Pool calldata poolInfo) external onlyRageTradeFactory {\n        uint32 poolId = poolInfo.vToken.truncate();\n\n        // pool will not be registered twice by the rage trade factory\n        assert(protocol.pools[poolId].vToken.isZero());\n\n        protocol.pools[poolId] = poolInfo;\n        emit PoolSettingsUpdated(poolId, poolInfo.settings);\n    }\n\n    /**\n        ADMIN FUNCTIONS\n     */\n\n    function updateCollateralSettings(IERC20 cToken, CollateralSettings memory collateralSettings)\n        external\n        onlyGovernanceOrTeamMultisig\n    {\n        _updateCollateralSettings(cToken, collateralSettings);\n    }\n\n    function updatePoolSettings(uint32 poolId, PoolSettings calldata newSettings) public onlyGovernanceOrTeamMultisig {\n        protocol.pools[poolId].settings = newSettings;\n        emit PoolSettingsUpdated(poolId, newSettings);\n    }\n\n    function updateProtocolSettings(\n        LiquidationParams calldata _liquidationParams,\n        uint256 _removeLimitOrderFee,\n        uint256 _minimumOrderNotional,\n        uint256 _minRequiredMargin\n    ) external onlyGovernanceOrTeamMultisig {\n        protocol.liquidationParams = _liquidationParams;\n        protocol.removeLimitOrderFee = _removeLimitOrderFee;\n        protocol.minimumOrderNotional = _minimumOrderNotional;\n        protocol.minRequiredMargin = _minRequiredMargin;\n        emit ProtocolSettingsUpdated(\n            _liquidationParams,\n            _removeLimitOrderFee,\n            _minimumOrderNotional,\n            _minRequiredMargin\n        );\n    }\n\n    function pause() external onlyGovernanceOrTeamMultisig {\n        _pause();\n    }\n\n    function unpause() external onlyGovernanceOrTeamMultisig {\n        _unpause();\n    }\n\n    /// @inheritdoc IClearingHouseOwnerActions\n    function withdrawProtocolFee(address[] calldata wrapperAddresses) external {\n        uint256 totalProtocolFee;\n        for (uint256 i = 0; i < wrapperAddresses.length; i++) {\n            uint256 wrapperFee = IVPoolWrapper(wrapperAddresses[i]).collectAccruedProtocolFee();\n            emit Account.ProtocolFeesWithdrawn(wrapperAddresses[i], wrapperFee);\n            totalProtocolFee += wrapperFee;\n        }\n        protocol.settlementToken.safeTransfer(teamMultisig(), totalProtocolFee);\n    }\n\n    /**\n        USER FUNCTIONS\n     */\n\n    /// @inheritdoc IClearingHouseActions\n    function createAccount() public whenNotPaused returns (uint256 newAccountId) {\n        newAccountId = numAccounts;\n        numAccounts = newAccountId + 1; // SSTORE\n\n        Account.Info storage newAccount = accounts[newAccountId];\n        newAccount.owner = msg.sender;\n        newAccount.id = uint96(newAccountId);\n\n        emit AccountCreated(msg.sender, newAccountId);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function addMargin(\n        uint256 accountId,\n        uint32 collateralId,\n        uint256 amount\n    ) public whenNotPaused {\n        Account.Info storage account = _getAccountAndCheckOwner(accountId);\n        _addMargin(accountId, account, collateralId, amount);\n    }\n\n    function _getAccountAndCheckOwner(uint256 accountId) internal view returns (Account.Info storage account) {\n        account = accounts[accountId];\n        if (msg.sender != account.owner) revert AccessDenied(msg.sender);\n    }\n\n    // done\n    function _addMargin(\n        uint256 accountId,\n        Account.Info storage account,\n        uint32 collateralId,\n        uint256 amount\n    ) internal whenNotPaused {\n        Collateral storage collateral = _checkCollateralIdAndGetInfo({ collateralId: collateralId, isWithdraw: false });\n\n        collateral.token.safeTransferFrom(msg.sender, address(this), amount);\n\n        account.addMargin(collateralId, amount);\n\n        emit MarginAdded(accountId, collateralId, amount);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function createAccountAndAddMargin(uint32 poolId, uint256 amount) external returns (uint256 newAccountId) {\n        newAccountId = createAccount();\n        addMargin(newAccountId, poolId, amount);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function removeMargin(\n        uint256 accountId,\n        uint32 collateralId,\n        uint256 amount\n    ) external whenNotPaused {\n        Account.Info storage account = _getAccountAndCheckOwner(accountId);\n        _removeMargin(accountId, account, collateralId, amount, true);\n    }\n\n    function _removeMargin(\n        uint256 accountId,\n        Account.Info storage account,\n        uint32 collateralId,\n        uint256 amount,\n        bool checkMargin\n    ) internal whenNotPaused {\n        Collateral storage collateral = _checkCollateralIdAndGetInfo({ collateralId: collateralId, isWithdraw: true });\n\n        account.removeMargin(collateralId, amount, protocol, checkMargin);\n\n        collateral.token.safeTransfer(msg.sender, amount);\n\n        emit MarginRemoved(accountId, collateralId, amount);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function updateProfit(uint256 accountId, int256 amount) external whenNotPaused {\n        Account.Info storage account = _getAccountAndCheckOwner(accountId);\n\n        _updateProfit(account, amount, true);\n    }\n\n    function _updateProfit(\n        Account.Info storage account,\n        int256 amount,\n        bool checkMargin\n    ) internal whenNotPaused {\n        if (amount == 0) revert ZeroAmount();\n\n        account.updateProfit(amount, protocol, checkMargin);\n        if (amount > 0) {\n            protocol.settlementToken.safeTransferFrom(msg.sender, address(this), uint256(amount));\n        } else {\n            protocol.settlementToken.safeTransfer(msg.sender, uint256(-amount));\n        }\n        emit Account.ProfitUpdated(account.id, amount);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function swapToken(\n        uint256 accountId,\n        uint32 poolId,\n        SwapParams memory swapParams\n    ) external whenNotPaused returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        Account.Info storage account = _getAccountAndCheckOwner(accountId);\n        return _swapToken(account, poolId, swapParams, true);\n    }\n\n    function _swapToken(\n        Account.Info storage account,\n        uint32 poolId,\n        SwapParams memory swapParams,\n        bool checkMargin\n    ) internal whenNotPaused returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        _checkPoolId(poolId);\n\n        (vTokenAmountOut, vQuoteAmountOut) = account.swapToken(poolId, swapParams, protocol, checkMargin);\n\n        uint256 vQuoteAmountOutAbs = uint256(vQuoteAmountOut.abs());\n        if (vQuoteAmountOutAbs < protocol.minimumOrderNotional) revert LowNotionalValue(vQuoteAmountOutAbs);\n\n        if (swapParams.sqrtPriceLimit != 0 && !swapParams.isPartialAllowed) {\n            if (\n                !((swapParams.isNotional && vQuoteAmountOut.abs() == swapParams.amount.abs()) ||\n                    (!swapParams.isNotional && vTokenAmountOut.abs() == swapParams.amount.abs()))\n            ) revert SlippageBeyondTolerance();\n        }\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function updateRangeOrder(\n        uint256 accountId,\n        uint32 poolId,\n        LiquidityChangeParams calldata liquidityChangeParams\n    ) external whenNotPaused returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        Account.Info storage account = _getAccountAndCheckOwner(accountId);\n\n        return _updateRangeOrder(account, poolId, liquidityChangeParams, true);\n    }\n\n    function _updateRangeOrder(\n        Account.Info storage account,\n        uint32 poolId,\n        LiquidityChangeParams memory liquidityChangeParams,\n        bool checkMargin\n    ) internal whenNotPaused returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        _checkPoolId(poolId);\n\n        if (liquidityChangeParams.sqrtPriceCurrent != 0) {\n            _checkSlippage(poolId, liquidityChangeParams.sqrtPriceCurrent, liquidityChangeParams.slippageToleranceBps);\n        }\n\n        uint256 notionalValueAbs;\n        (vTokenAmountOut, vQuoteAmountOut, notionalValueAbs) = account.liquidityChange(\n            poolId,\n            liquidityChangeParams,\n            protocol,\n            checkMargin\n        );\n\n        if (notionalValueAbs < protocol.minimumOrderNotional) revert LowNotionalValue(notionalValueAbs);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function removeLimitOrder(\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper\n    ) external {\n        _removeLimitOrder(accountId, poolId, tickLower, tickUpper, 0);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function liquidateLiquidityPositions(uint256 accountId) external {\n        _liquidateLiquidityPositions(accountId, 0);\n    }\n\n    /// @inheritdoc IClearingHouseActions\n    function liquidateTokenPosition(\n        uint256 liquidatorAccountId,\n        uint256 targetAccountId,\n        uint32 poolId,\n        uint16 liquidationBps\n    ) external returns (BalanceAdjustments memory liquidatorBalanceAdjustments) {\n        return\n            _liquidateTokenPosition(\n                accounts[liquidatorAccountId],\n                accounts[targetAccountId],\n                poolId,\n                liquidationBps,\n                0\n            );\n    }\n\n    /**\n        MULTICALL\n     */\n\n    function multicallWithSingleMarginCheck(uint256 accountId, MulticallOperation[] calldata operations)\n        external\n        returns (bytes[] memory results)\n    {\n        results = new bytes[](operations.length);\n\n        Account.Info storage account = _getAccountAndCheckOwner(accountId);\n\n        bool checkProfit = false;\n\n        for (uint256 i = 0; i < operations.length; i++) {\n            if (operations[i].operationType == MulticallOperationType.ADD_MARGIN) {\n                // ADD_MARGIN\n                (uint32 collateralId, uint256 amount) = abi.decode(operations[i].data, (uint32, uint256));\n                _addMargin(accountId, account, collateralId, amount);\n            } else if (operations[i].operationType == MulticallOperationType.REMOVE_MARGIN) {\n                // REMOVE_MARGIN\n                (uint32 collateralId, uint256 amount) = abi.decode(operations[i].data, (uint32, uint256));\n                _removeMargin(accountId, account, collateralId, amount, false);\n            } else if (operations[i].operationType == MulticallOperationType.UPDATE_PROFIT) {\n                // UPDATE_PROFIT\n                int256 amount = abi.decode(operations[i].data, (int256));\n                _updateProfit(account, amount, false);\n                checkProfit = true;\n            } else if (operations[i].operationType == MulticallOperationType.SWAP_TOKEN) {\n                // SWAP_TOKEN\n                (uint32 poolId, SwapParams memory sp) = abi.decode(operations[i].data, (uint32, SwapParams));\n                (int256 vTokenAmountOut, int256 vQuoteAmountOut) = _swapToken(account, poolId, sp, false);\n                results[i] = abi.encode(vTokenAmountOut, vQuoteAmountOut);\n            } else if (operations[i].operationType == MulticallOperationType.UPDATE_RANGE_ORDER) {\n                // UPDATE_RANGE_ORDER\n                (uint32 poolId, LiquidityChangeParams memory lcp) = abi.decode(\n                    operations[i].data,\n                    (uint32, LiquidityChangeParams)\n                );\n                (int256 vTokenAmountOut, int256 vQuoteAmountOut) = _updateRangeOrder(account, poolId, lcp, false);\n                results[i] = abi.encode(vTokenAmountOut, vQuoteAmountOut);\n            } else if (operations[i].operationType == MulticallOperationType.REMOVE_LIMIT_ORDER) {\n                // REMOVE_LIMIT_ORDER\n                (uint32 poolId, int24 tickLower, int24 tickUpper, uint256 limitOrderFeeAndFixFee) = abi.decode(\n                    operations[i].data,\n                    (uint32, int24, int24, uint256)\n                );\n                _removeLimitOrder(accountId, poolId, tickLower, tickUpper, limitOrderFeeAndFixFee);\n            } else if (operations[i].operationType == MulticallOperationType.LIQUIDATE_LIQUIDITY_POSITIONS) {\n                // LIQUIDATE_LIQUIDITY_POSITIONS\n                _liquidateLiquidityPositions(accountId, 0);\n            } else if (operations[i].operationType == MulticallOperationType.LIQUIDATE_TOKEN_POSITION) {\n                // LIQUIDATE_TOKEN_POSITION\n                (uint256 targetAccountId, uint32 poolId, uint16 liquidationBps) = abi.decode(\n                    operations[i].data,\n                    (uint256, uint32, uint16)\n                );\n                results[i] = abi.encode(\n                    _liquidateTokenPosition(accounts[accountId], accounts[targetAccountId], poolId, liquidationBps, 0)\n                );\n            } else {\n                revert InvalidMulticallOperationType(operations[i].operationType);\n            }\n        }\n\n        // after all the operations are done, check the margin requirements\n        if (checkProfit) account.checkIfProfitAvailable(protocol);\n        account.checkIfMarginAvailable(true, protocol);\n\n        return results;\n    }\n\n    /**\n        ALTERNATE LIQUIDATION METHODS FOR FIX FEE CLAIM\n     */\n\n    function removeLimitOrderWithGasClaim(\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 gasComputationUnitsClaim\n    ) external checkGasUsedClaim(gasComputationUnitsClaim) returns (uint256 keeperFee) {\n        Calldata.limit(4 + 5 * 0x20);\n        return _removeLimitOrder(accountId, poolId, tickLower, tickUpper, gasComputationUnitsClaim);\n    }\n\n    function liquidateLiquidityPositionsWithGasClaim(uint256 accountId, uint256 gasComputationUnitsClaim)\n        external\n        checkGasUsedClaim(gasComputationUnitsClaim)\n        returns (int256 keeperFee)\n    {\n        Calldata.limit(4 + 2 * 0x20);\n        return _liquidateLiquidityPositions(accountId, gasComputationUnitsClaim);\n    }\n\n    function liquidateTokenPositionWithGasClaim(\n        uint256 liquidatorAccountId,\n        uint256 targetAccountId,\n        uint32 poolId,\n        uint16 liquidationBps,\n        uint256 gasComputationUnitsClaim\n    )\n        external\n        checkGasUsedClaim(gasComputationUnitsClaim)\n        returns (BalanceAdjustments memory liquidatorBalanceAdjustments)\n    {\n        Calldata.limit(4 + 5 * 0x20);\n        /// @dev liquidator account gets benefit, hence ownership is not required\n        return\n            _liquidateTokenPosition(\n                accounts[liquidatorAccountId],\n                accounts[targetAccountId],\n                poolId,\n                liquidationBps,\n                gasComputationUnitsClaim\n            );\n    }\n\n    /**\n        INTERNAL HELPERS\n     */\n\n    function _checkSlippage(\n        uint32 poolId,\n        uint160 sqrtPriceToCheck,\n        uint16 slippageToleranceBps\n    ) internal view {\n        uint160 sqrtPriceCurrent = protocol.getVirtualCurrentSqrtPriceX96(poolId);\n        uint160 diff = sqrtPriceCurrent > sqrtPriceToCheck\n            ? sqrtPriceCurrent - sqrtPriceToCheck\n            : sqrtPriceToCheck - sqrtPriceCurrent;\n        if (diff > (slippageToleranceBps * sqrtPriceToCheck) / 1e4) {\n            revert SlippageBeyondTolerance();\n        }\n    }\n\n    function _checkCollateralIdAndGetInfo(uint32 collateralId, bool isWithdraw)\n        internal\n        view\n        returns (Collateral storage collateral)\n    {\n        collateral = protocol.collaterals[collateralId];\n        if (collateral.token.isZero()) revert CollateralDoesNotExist(collateralId);\n        // do not check if it is a withdraw operation, so that users can withdraw even if collateral is banned\n        if (!isWithdraw && !collateral.settings.isAllowedForDeposit) revert CollateralNotAllowedForUse(collateralId);\n    }\n\n    function _checkPoolId(uint32 poolId) internal view {\n        Pool storage pool = protocol.pools[poolId];\n        if (pool.vToken.isZero()) revert PoolDoesNotExist(poolId);\n        if (!pool.settings.isAllowedForTrade) revert PoolNotAllowedForTrade(poolId);\n    }\n\n    function _liquidateLiquidityPositions(uint256 accountId, uint256 gasComputationUnitsClaim)\n        internal\n        whenNotPaused\n        returns (int256 keeperFee)\n    {\n        Account.Info storage account = accounts[accountId];\n        int256 insuranceFundFee;\n        (keeperFee, insuranceFundFee) = account.liquidateLiquidityPositions(\n            _getFixFee(gasComputationUnitsClaim),\n            protocol\n        );\n        int256 accountFee = keeperFee + insuranceFundFee;\n\n        if (keeperFee <= 0) revert KeeperFeeNotPositive(keeperFee);\n        protocol.settlementToken.safeTransfer(msg.sender, uint256(keeperFee));\n        _transferInsuranceFundFee(insuranceFundFee);\n\n        emit Account.LiquidityPositionsLiquidated(accountId, msg.sender, accountFee, keeperFee, insuranceFundFee);\n    }\n\n    // TODO move this to Account library. is it possible?\n    function _liquidateTokenPosition(\n        Account.Info storage liquidatorAccount,\n        Account.Info storage targetAccount,\n        uint32 poolId,\n        uint16 liquidationBps,\n        uint256 gasComputationUnitsClaim\n    ) internal whenNotPaused returns (BalanceAdjustments memory liquidatorBalanceAdjustments) {\n        if (liquidationBps > 10000) revert InvalidTokenLiquidationParameters();\n\n        _checkPoolId(poolId);\n        int256 insuranceFundFee;\n        (insuranceFundFee, liquidatorBalanceAdjustments) = targetAccount.liquidateTokenPosition(\n            liquidatorAccount,\n            liquidationBps,\n            poolId,\n            _getFixFee(gasComputationUnitsClaim),\n            protocol,\n            true\n        );\n\n        _transferInsuranceFundFee(insuranceFundFee);\n    }\n\n    function _removeLimitOrder(\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 gasComputationUnitsClaim\n    ) internal whenNotPaused returns (uint256 keeperFee) {\n        Account.Info storage account = accounts[accountId];\n\n        _checkPoolId(poolId);\n        keeperFee = protocol.removeLimitOrderFee + _getFixFee(gasComputationUnitsClaim);\n\n        account.removeLimitOrder(poolId, tickLower, tickUpper, keeperFee, protocol);\n\n        protocol.settlementToken.safeTransfer(msg.sender, keeperFee);\n    }\n\n    function _transferInsuranceFundFee(int256 insuranceFundFee) internal {\n        if (insuranceFundFee > 0) {\n            protocol.settlementToken.safeTransfer(address(insuranceFund), uint256(insuranceFundFee));\n        } else {\n            insuranceFund.claim(uint256(-insuranceFundFee));\n        }\n    }\n\n    function _updateCollateralSettings(IERC20 collateralToken, CollateralSettings memory collateralSettings) internal {\n        uint32 collateralId = collateralToken.truncate();\n\n        // doesn't allow zero address as a collateral token\n        if (collateralToken.isZero()) revert InvalidCollateralAddress(address(0));\n\n        // doesn't allow owner to change the cToken address when updating settings, once it's truncated previously\n        if (\n            !protocol.collaterals[collateralId].token.isZero() &&\n            !protocol.collaterals[collateralId].token.eq(collateralToken)\n        ) {\n            revert IncorrectCollateralAddress(collateralToken, protocol.collaterals[collateralId].token);\n        }\n\n        protocol.collaterals[collateralId] = Collateral(collateralToken, collateralSettings);\n\n        emit CollateralSettingsUpdated(collateralToken, collateralSettings);\n    }\n\n    /// @notice Gets fix fee\n    /// @dev Allowed to be overriden for specific chain implementations\n    /// @return fixFee amount of fixFee in notional units\n    function _getFixFee(uint256) internal view virtual returns (uint256 fixFee) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n    /// @notice Cast a uint256 to a uint160, revert on overflow\n    /// @param y The uint256 to be downcasted\n    /// @return z The downcasted integer, now type uint160\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\n        unchecked {\n            require((z = uint160(y)) == y);\n        }\n    }\n\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\n    /// @param y The int256 to be downcasted\n    /// @return z The downcasted integer, now type int128\n    function toInt128(int256 y) internal pure returns (int128 z) {\n        unchecked {\n            require((z = int128(y)) == y);\n        }\n    }\n\n    /// @notice Cast a uint256 to a int256, revert on overflow\n    /// @param y The uint256 to be casted\n    /// @return z The casted integer, now type int256\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        unchecked {\n            require(y < 2**255);\n            z = int256(y);\n        }\n    }\n}\n"
    },
    "contracts/libraries/Account.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.10;\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { AddressHelper } from './AddressHelper.sol';\nimport { CollateralDeposit } from './CollateralDeposit.sol';\nimport { SignedFullMath } from './SignedFullMath.sol';\nimport { SignedMath } from './SignedMath.sol';\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\nimport { LiquidityPosition } from './LiquidityPosition.sol';\nimport { Protocol } from './Protocol.sol';\nimport { VTokenPosition } from './VTokenPosition.sol';\nimport { VTokenPositionSet } from './VTokenPositionSet.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IClearingHouseEnums } from '../interfaces/clearinghouse/IClearingHouseEnums.sol';\nimport { IVQuote } from '../interfaces/IVQuote.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Cross margined account functions\n/// @dev This library is deployed and used as an external library by ClearingHouse contract.\nlibrary Account {\n    using AddressHelper for address;\n    using FullMath for uint256;\n    using SafeCast for uint256;\n    using SignedFullMath for int256;\n    using SignedMath for int256;\n\n    using Account for Account.Info;\n    using CollateralDeposit for CollateralDeposit.Set;\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using Protocol for Protocol.Info;\n    using VTokenPosition for VTokenPosition.Info;\n    using VTokenPositionSet for VTokenPosition.Set;\n\n    /// @notice account info for user\n    /// @param owner specifies the account owner\n    /// @param tokenPositions is set of all open token positions\n    /// @param collateralDeposits is set of all deposits\n    struct Info {\n        uint96 id;\n        address owner;\n        VTokenPosition.Set tokenPositions;\n        CollateralDeposit.Set collateralDeposits;\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\n    }\n\n    /// @notice error to denote that there is not enough margin for the transaction to go through\n    /// @param accountMarketValue shows the account market value after the transaction is executed\n    /// @param totalRequiredMargin shows the total required margin after the transaction is executed\n    error InvalidTransactionNotEnoughMargin(int256 accountMarketValue, int256 totalRequiredMargin);\n\n    /// @notice error to denote that there is not enough profit during profit withdrawal\n    /// @param totalProfit shows the value of positions at the time of execution after removing amount specified\n    error InvalidTransactionNotEnoughProfit(int256 totalProfit);\n\n    /// @notice error to denote that there is enough margin, hence the liquidation is invalid\n    /// @param accountMarketValue shows the account market value before liquidation\n    /// @param totalRequiredMargin shows the total required margin before liquidation\n    error InvalidLiquidationAccountAbovewater(int256 accountMarketValue, int256 totalRequiredMargin);\n\n    /// @notice error to denote that there are active ranges present during token liquidation, hence the liquidation is invalid\n    /// @param poolId shows the poolId for which range is active\n    error InvalidLiquidationActiveRangePresent(uint32 poolId);\n\n    /// @notice denotes withdrawal of profit in settlement token\n    /// @param accountId serial number of the account\n    /// @param amount amount of profit withdrawn\n    event ProfitUpdated(uint256 indexed accountId, int256 amount);\n\n    /// @notice denotes token position change\n    /// @param accountId serial number of the account\n    /// @param poolId truncated address of vtoken whose position was taken\n    /// @param vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\n    /// @param vQuoteAmountOut amount of vQuote tokens that account received (positive) or paid (negative)\n    event TokenPositionChanged(\n        uint256 indexed accountId,\n        uint32 indexed poolId,\n        int256 vTokenAmountOut,\n        int256 vQuoteAmountOut\n    );\n\n    /// @notice denotes token position change due to liquidity add/remove\n    /// @param accountId serial number of the account\n    /// @param poolId address of token whose position was taken\n    /// @param tickLower lower tick of the range updated\n    /// @param tickUpper upper tick of the range updated\n    /// @param vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\n    event TokenPositionChangedDueToLiquidityChanged(\n        uint256 indexed accountId,\n        uint32 indexed poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        int256 vTokenAmountOut\n    );\n\n    /// @notice denotes liquidity add/remove\n    /// @param accountId serial number of the account\n    /// @param poolId address of token whose position was taken\n    /// @param tickLower lower tick of the range updated\n    /// @param tickUpper upper tick of the range updated\n    /// @param liquidityDelta change in liquidity value\n    /// @param limitOrderType the type of range position\n    /// @param vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\n    /// @param vQuoteAmountOut amount of vQuote tokens that account received (positive) or paid (negative)\n    event LiquidityChanged(\n        uint256 indexed accountId,\n        uint32 indexed poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        int128 liquidityDelta,\n        IClearingHouseEnums.LimitOrderType limitOrderType,\n        int256 vTokenAmountOut,\n        int256 vQuoteAmountOut\n    );\n\n    /// @notice denotes funding payment for a range / token position\n    /// @dev for a token position tickLower = tickUpper = 0\n    /// @param accountId serial number of the account\n    /// @param poolId address of token for which funding was paid\n    /// @param tickLower lower tick of the range for which funding was paid\n    /// @param tickUpper upper tick of the range for which funding was paid\n    /// @param amount amount of funding paid (negative) or received (positive)\n    event FundingPaymentRealized(\n        uint256 indexed accountId,\n        uint32 indexed poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        int256 amount\n    );\n\n    /// @notice denotes fee payment for a range / token position\n    /// @dev for a token position tickLower = tickUpper = 0\n    /// @param accountId serial number of the account\n    /// @param poolId address of token for which fee was paid\n    /// @param tickLower lower tick of the range for which fee was paid\n    /// @param tickUpper upper tick of the range for which fee was paid\n    /// @param amount amount of fee paid (negative) or received (positive)\n    event LiquidityPositionEarningsRealized(\n        uint256 indexed accountId,\n        uint32 indexed poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        int256 amount\n    );\n\n    /// @notice denotes protocol fee withdrawal from a pool wrapper\n    /// @param wrapperAddress address of token for which fee was paid\n    /// @param feeAmount amount of protocol fee which was withdrawn\n    event ProtocolFeesWithdrawn(address indexed wrapperAddress, uint256 feeAmount);\n\n    /// @notice denotes range position liquidation event\n    /// @dev all range positions are liquidated and the current tokens inside the range are added in as token positions to the account\n    /// @param accountId serial number of the account\n    /// @param keeperAddress address of keeper who performed the liquidation\n    /// @param liquidationFee total liquidation fee charged to the account\n    /// @param keeperFee total liquidaiton fee paid to the keeper (positive only)\n    /// @param insuranceFundFee total liquidaiton fee paid to the insurance fund (can be negative in case the account is not enought to cover the fee)\n    event LiquidityPositionsLiquidated(\n        uint256 indexed accountId,\n        address indexed keeperAddress,\n        int256 liquidationFee,\n        int256 keeperFee,\n        int256 insuranceFundFee\n    );\n\n    /// @notice denotes token position liquidation event\n    /// @dev the selected token position is take from the current account and moved to liquidatorAccount at a discounted prive to current pool price\n    /// @param accountId serial number of the account\n    /// @param liquidatorAccountId  account which performed the liquidation\n    /// @param poolId id of the rage trade pool for whose position was liquidated\n    /// @param liquidationBps the fraction of current position which was liquidated in bps\n    /// @param liquidationPriceX128 price at which liquidation was performed\n    /// @param liquidatorPriceX128 discounted price at which tokens were transferred to the liquidator account\n    /// @param insuranceFundFee total liquidaiton fee paid to the insurance fund (can be negative in case the account is not enough to cover the fee)\n    event TokenPositionLiquidated(\n        uint256 indexed accountId,\n        uint256 indexed liquidatorAccountId,\n        uint32 indexed poolId,\n        uint16 liquidationBps,\n        uint256 liquidationPriceX128,\n        uint256 liquidatorPriceX128,\n        uint256 fixFee,\n        int256 insuranceFundFee\n    );\n\n    /// @notice checks if 'account' is initialized\n    /// @param account pointer to 'account' struct\n    function _isInitialized(Account.Info storage account) internal view returns (bool) {\n        return !account.owner.isZero();\n    }\n\n    /// @notice updates the vQuote balance for 'account' by 'amount'\n    /// @param account pointer to 'account' struct\n    /// @param amount amount of balance to update\n    /// @param protocol platform constants\n    function _updateVQuoteBalance(\n        Account.Info storage account,\n        int256 amount,\n        Protocol.Info storage protocol\n    ) internal returns (IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments) {\n        balanceAdjustments = IClearingHouseStructures.BalanceAdjustments(amount, 0, 0);\n        account.tokenPositions.vQuoteBalance += balanceAdjustments.vQuoteIncrease;\n    }\n\n    /// @notice increases deposit balance of 'vToken' by 'amount'\n    /// @param account account to deposit balance into\n    /// @param collateralId collateral id of the token\n    /// @param amount amount of token to deposit\n    function addMargin(\n        Account.Info storage account,\n        uint32 collateralId,\n        uint256 amount\n    ) external {\n        // vQuote should be an immutable constant\n        account.collateralDeposits.increaseBalance(collateralId, amount);\n    }\n\n    /// @notice reduces deposit balance of 'vToken' by 'amount'\n    /// @param account account to deposit balance into\n    /// @param collateralId collateral id of the token\n    /// @param amount amount of token to remove\n    /// @param protocol set of all constants and token addresses\n    function removeMargin(\n        Account.Info storage account,\n        uint32 collateralId,\n        uint256 amount,\n        Protocol.Info storage protocol,\n        bool checkMargin\n    ) external {\n        account.collateralDeposits.decreaseBalance(collateralId, amount);\n\n        if (checkMargin) account._checkIfMarginAvailable(true, protocol);\n    }\n\n    /// @notice updates 'amount' of profit generated in settlement token\n    /// @param account account to remove profit from\n    /// @param amount amount of profit(settlement token) to add/remove\n    /// @param protocol set of all constants and token addresses\n    function updateProfit(\n        Account.Info storage account,\n        int256 amount,\n        Protocol.Info storage protocol,\n        bool checkMargin\n    ) external {\n        account._updateVQuoteBalance(amount, protocol);\n\n        if (checkMargin && amount < 0) {\n            account._checkIfProfitAvailable(protocol);\n            account._checkIfMarginAvailable(true, protocol);\n        }\n    }\n\n    /// @notice returns market value and required margin for the account based on current market conditions\n    /// @dev (In case requiredMargin < minRequiredMargin then requiredMargin = minRequiredMargin)\n    /// @param account account to check\n    /// @param isInitialMargin true to use initial margin factor and false to use maintainance margin factor for calcualtion of required margin\n    /// @param protocol set of all constants and token addresses\n    /// @return accountMarketValue total market value of all the positions (token ) and deposits\n    /// @return totalRequiredMargin total margin required to keep the account above selected margin requirement (intial/maintainance)\n    function getAccountValueAndRequiredMargin(\n        Account.Info storage account,\n        bool isInitialMargin,\n        Protocol.Info storage protocol\n    ) external view returns (int256 accountMarketValue, int256 totalRequiredMargin) {\n        return account._getAccountValueAndRequiredMargin(isInitialMargin, protocol);\n    }\n\n    function _getAccountValueAndRequiredMargin(\n        Account.Info storage account,\n        bool isInitialMargin,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 accountMarketValue, int256 totalRequiredMargin) {\n        accountMarketValue = account._getAccountValue(protocol);\n\n        totalRequiredMargin = account.tokenPositions.getRequiredMargin(isInitialMargin, protocol);\n        if (!account.tokenPositions.isEmpty()) {\n            totalRequiredMargin = totalRequiredMargin < int256(protocol.minRequiredMargin)\n                ? int256(protocol.minRequiredMargin)\n                : totalRequiredMargin;\n        }\n        return (accountMarketValue, totalRequiredMargin);\n    }\n\n    /// @notice returns market value for the account positions based on current market conditions\n    /// @param account account to check\n    /// @param protocol set of all constants and token addresses\n    /// @return accountPositionProfits total market value of all the positions (token ) and deposits\n    function getAccountPositionProfits(Account.Info storage account, Protocol.Info storage protocol)\n        external\n        view\n        returns (int256 accountPositionProfits)\n    {\n        return account._getAccountPositionProfits(protocol);\n    }\n\n    function _getAccountPositionProfits(Account.Info storage account, Protocol.Info storage protocol)\n        internal\n        view\n        returns (int256 accountPositionProfits)\n    {\n        accountPositionProfits = account.tokenPositions.getAccountMarketValue(protocol);\n    }\n\n    /// @notice returns market value for the account based on current market conditions\n    /// @param account account to check\n    /// @param protocol set of all constants and token addresses\n    /// @return accountMarketValue total market value of all the positions (token ) and deposits\n    function _getAccountValue(Account.Info storage account, Protocol.Info storage protocol)\n        internal\n        view\n        returns (int256 accountMarketValue)\n    {\n        accountMarketValue = account._getAccountPositionProfits(protocol);\n        accountMarketValue += account.collateralDeposits.getAllDepositAccountMarketValue(protocol);\n        return (accountMarketValue);\n    }\n\n    /// @notice checks if market value > required margin else revert with InvalidTransactionNotEnoughMargin\n    /// @param account account to check\n    /// @param isInitialMargin true to use initialMarginFactor and false to use maintainance margin factor for calcualtion of required margin\n    /// @param protocol set of all constants and token addresses\n    function checkIfMarginAvailable(\n        Account.Info storage account,\n        bool isInitialMargin,\n        Protocol.Info storage protocol\n    ) external view {\n        (int256 accountMarketValue, int256 totalRequiredMargin) = account._getAccountValueAndRequiredMargin(\n            isInitialMargin,\n            protocol\n        );\n        if (accountMarketValue < totalRequiredMargin)\n            revert InvalidTransactionNotEnoughMargin(accountMarketValue, totalRequiredMargin);\n    }\n\n    function _checkIfMarginAvailable(\n        Account.Info storage account,\n        bool isInitialMargin,\n        Protocol.Info storage protocol\n    ) internal view {\n        (int256 accountMarketValue, int256 totalRequiredMargin) = account._getAccountValueAndRequiredMargin(\n            isInitialMargin,\n            protocol\n        );\n        if (accountMarketValue < totalRequiredMargin)\n            revert InvalidTransactionNotEnoughMargin(accountMarketValue, totalRequiredMargin);\n    }\n\n    /// @notice checks if profit is available to withdraw settlement token (token value of all positions > 0) else revert with InvalidTransactionNotEnoughProfit\n    /// @param account account to check\n    /// @param protocol set of all constants and token addresses\n    function checkIfProfitAvailable(Account.Info storage account, Protocol.Info storage protocol) external view {\n        _checkIfProfitAvailable(account, protocol);\n    }\n\n    function _checkIfProfitAvailable(Account.Info storage account, Protocol.Info storage protocol) internal view {\n        int256 totalPositionValue = account._getAccountPositionProfits(protocol);\n        if (totalPositionValue < 0) revert InvalidTransactionNotEnoughProfit(totalPositionValue);\n    }\n\n    /// @notice swaps 'vToken' of token amount equal to 'swapParams.amount'\n    /// @notice if vTokenAmount>0 then the swap is a long or close short and if vTokenAmount<0 then swap is a short or close long\n    /// @notice isNotional specifies whether the amount represents token amount (false) or vQuote amount(true)\n    /// @notice isPartialAllowed specifies whether to revert (false) or to execute a partial swap (true)\n    /// @notice sqrtPriceLimit threshold sqrt price which if crossed then revert or execute partial swap\n    /// @param account account to swap tokens for\n    /// @param poolId id of the pool to swap tokens for\n    /// @param swapParams parameters for the swap (Includes - amount, sqrtPriceLimit, isNotional, isPartialAllowed)\n    /// @param protocol set of all constants and token addresses\n    function swapToken(\n        Account.Info storage account,\n        uint32 poolId,\n        IClearingHouseStructures.SwapParams memory swapParams,\n        Protocol.Info storage protocol,\n        bool checkMargin\n    ) external returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        // make a swap. vQuoteIn and vTokenAmountOut (in and out wrt uniswap).\n        // mints erc20 tokens in callback and send to the pool\n        (vTokenAmountOut, vQuoteAmountOut) = account.tokenPositions.swapToken(account.id, poolId, swapParams, protocol);\n\n        // after all the stuff, account should be above water\n        if (checkMargin) account._checkIfMarginAvailable(true, protocol);\n    }\n\n    /// @notice changes range liquidity 'vToken' of market value equal to 'vTokenNotional'\n    /// @notice if 'liquidityDelta'>0 then liquidity is added and if 'liquidityChange'<0 then liquidity is removed\n    /// @notice the liquidity change is reverted if the sqrt price at the time of execution is beyond 'slippageToleranceBps' of 'sqrtPriceCurrent' supplied\n    /// @notice whenever liquidity change is done the external token position is taken out. If 'closeTokenPosition' is true this is swapped out else it is added to the current token position\n    /// @param account account to change liquidity\n    /// @param poolId id of the rage trade pool\n    /// @param liquidityChangeParams parameters including lower tick, upper tick, liquidity delta, sqrtPriceCurrent, slippageToleranceBps, closeTokenPosition, limit order type\n    /// @param protocol set of all constants and token addresses\n    function liquidityChange(\n        Account.Info storage account,\n        uint32 poolId,\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams,\n        Protocol.Info storage protocol,\n        bool checkMargin\n    )\n        external\n        returns (\n            int256 vTokenAmountOut,\n            int256 vQuoteAmountOut,\n            uint256 notionalValueAbs\n        )\n    {\n        // mint/burn tokens + fee + funding payment\n        (vTokenAmountOut, vQuoteAmountOut) = account.tokenPositions.liquidityChange(\n            account.id,\n            poolId,\n            liquidityChangeParams,\n            protocol\n        );\n\n        // after all the stuff, account should be above water\n        if (checkMargin) account._checkIfMarginAvailable(true, protocol);\n\n        notionalValueAbs = uint256(\n            VTokenPositionSet.getNotionalValue(poolId, vTokenAmountOut, vQuoteAmountOut, protocol)\n        );\n    }\n\n    /// @notice computes keeper fee and insurance fund fee in case of liquidity position liquidation\n    /// @dev keeperFee = liquidationFee*(1-insuranceFundFeeShare)+fixFee\n    /// @dev insuranceFundFee = accountMarketValue - keeperFee (if accountMarketValue is not enough to cover the fees) else insurancFundFee = liquidationFee - keeperFee + fixFee\n    /// @param accountMarketValue market value of account\n    /// @param notionalAmountClosed notional value of position closed\n    /// @param fixFee additional fixfee to be paid to the keeper\n    /// @param liquidationParams parameters including fixFee, insuranceFundFeeShareBps\n    /// @return keeperFee map of vTokens allowed on the platform\n    /// @return insuranceFundFee poolwrapper for token\n    function _computeLiquidationFees(\n        int256 accountMarketValue,\n        uint256 notionalAmountClosed,\n        uint256 fixFee,\n        IClearingHouseStructures.LiquidationParams memory liquidationParams\n    ) internal pure returns (int256 keeperFee, int256 insuranceFundFee) {\n        uint256 liquidationFee = notionalAmountClosed.mulDiv(liquidationParams.liquidationFeeFraction, 1e5);\n\n        liquidationFee = liquidationParams.maxRangeLiquidationFees < liquidationFee\n            ? liquidationParams.maxRangeLiquidationFees\n            : liquidationFee;\n        int256 liquidationFeeInt = liquidationFee.toInt256();\n\n        int256 fixFeeInt = int256(fixFee);\n        keeperFee = liquidationFeeInt.mulDiv(1e4 - liquidationParams.insuranceFundFeeShareBps, 1e4) + fixFeeInt;\n        if (accountMarketValue - fixFeeInt - liquidationFeeInt < 0) {\n            insuranceFundFee = accountMarketValue - keeperFee;\n        } else {\n            insuranceFundFee = liquidationFeeInt - keeperFee + fixFeeInt;\n        }\n    }\n\n    /// @notice liquidates all range positions in case the account is under water\n    /// @notice charges a liquidation fee to the account and pays partially to the insurance fund and rest to the keeper.\n    /// @dev insurance fund covers the remaining fee if the account market value is not enough\n    /// @param account account to liquidate\n    /// @param protocol set of all constants and token addresses\n    function liquidateLiquidityPositions(\n        Account.Info storage account,\n        uint256 fixFee,\n        Protocol.Info storage protocol\n    ) external returns (int256 keeperFee, int256 insuranceFundFee) {\n        // check basis maintanace margin\n        int256 accountMarketValue;\n        int256 totalRequiredMargin;\n        uint256 notionalAmountClosed;\n\n        (accountMarketValue, totalRequiredMargin) = account._getAccountValueAndRequiredMargin(false, protocol);\n        if (accountMarketValue > totalRequiredMargin) {\n            revert InvalidLiquidationAccountAbovewater(accountMarketValue, totalRequiredMargin);\n        }\n        notionalAmountClosed = account.tokenPositions.liquidateLiquidityPositions(account.id, protocol);\n\n        (keeperFee, insuranceFundFee) = _computeLiquidationFees(\n            accountMarketValue,\n            notionalAmountClosed,\n            fixFee,\n            protocol.liquidationParams\n        );\n\n        account._updateVQuoteBalance(-(keeperFee + insuranceFundFee), protocol);\n    }\n\n    /// @notice computes the liquidation & liquidator price and insurance fund fee for token liquidation\n    /// @param tokensToTrade amount of tokens to trade for liquidation\n    /// @param poolId id of the pool to liquidate\n    /// @param protocol set of all constants and token addresses\n    function _getLiquidationPriceX128AndFee(\n        int256 tokensToTrade,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    )\n        internal\n        view\n        returns (\n            uint256 liquidationPriceX128,\n            uint256 liquidatorPriceX128,\n            int256 insuranceFundFee\n        )\n    {\n        uint16 maintainanceMarginFactor = protocol.getMarginRatio(poolId, false);\n        uint256 priceX128 = protocol.getVirtualCurrentPriceX128(poolId);\n        uint256 priceDeltaX128 = priceX128.mulDiv(protocol.liquidationParams.tokenLiquidationPriceDeltaBps, 1e4).mulDiv(\n            maintainanceMarginFactor,\n            1e5\n        );\n        if (tokensToTrade < 0) {\n            liquidationPriceX128 = priceX128 - priceDeltaX128;\n            liquidatorPriceX128 =\n                priceX128 -\n                priceDeltaX128.mulDiv(1e4 - protocol.liquidationParams.insuranceFundFeeShareBps, 1e4);\n            insuranceFundFee = -tokensToTrade.mulDiv(liquidatorPriceX128 - liquidationPriceX128, FixedPoint128.Q128);\n        } else {\n            liquidationPriceX128 = priceX128 + priceDeltaX128;\n            liquidatorPriceX128 =\n                priceX128 +\n                priceDeltaX128.mulDiv(1e4 - protocol.liquidationParams.insuranceFundFeeShareBps, 1e4);\n            insuranceFundFee = tokensToTrade.mulDiv(liquidationPriceX128 - liquidatorPriceX128, FixedPoint128.Q128);\n        }\n    }\n\n    /// @notice exchanges token position between account (at liquidationPrice) and liquidator account (at liquidator price)\n    /// @notice also charges fixFee from the account and pays to liquidator\n    /// @param targetAccount is account being liquidated\n    /// @param liquidatorAccount is account of liquidator\n    /// @param poolId id of the rage trade pool\n    /// @param tokensToTrade number of tokens to trade\n    /// @param liquidationPriceX128 price at which tokens should be traded out\n    /// @param liquidatorPriceX128 discounted price at which tokens should be given to liquidator\n    /// @param fixFee is the fee to be given to liquidator to compensate for gas price\n    /// @param protocol platform constants\n    function _updateLiquidationAccounts(\n        Account.Info storage targetAccount,\n        Account.Info storage liquidatorAccount,\n        uint32 poolId,\n        int256 tokensToTrade,\n        uint256 liquidationPriceX128,\n        uint256 liquidatorPriceX128,\n        int256 fixFee,\n        Protocol.Info storage protocol\n    ) internal returns (IClearingHouseStructures.BalanceAdjustments memory liquidatorBalanceAdjustments) {\n        protocol.vPoolWrapper(poolId).updateGlobalFundingState();\n\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments = IClearingHouseStructures\n            .BalanceAdjustments({\n                vQuoteIncrease: -tokensToTrade.mulDiv(liquidationPriceX128, FixedPoint128.Q128) - fixFee,\n                vTokenIncrease: tokensToTrade,\n                traderPositionIncrease: tokensToTrade\n            });\n\n        targetAccount.tokenPositions.update(targetAccount.id, balanceAdjustments, poolId, protocol);\n        emit TokenPositionChanged(\n            targetAccount.id,\n            poolId,\n            balanceAdjustments.vTokenIncrease,\n            balanceAdjustments.vQuoteIncrease\n        );\n\n        liquidatorBalanceAdjustments = IClearingHouseStructures.BalanceAdjustments({\n            vQuoteIncrease: tokensToTrade.mulDiv(liquidatorPriceX128, FixedPoint128.Q128) + fixFee,\n            vTokenIncrease: -tokensToTrade,\n            traderPositionIncrease: -tokensToTrade\n        });\n\n        liquidatorAccount.tokenPositions.update(liquidatorAccount.id, liquidatorBalanceAdjustments, poolId, protocol);\n        emit TokenPositionChanged(\n            liquidatorAccount.id,\n            poolId,\n            liquidatorBalanceAdjustments.vTokenIncrease,\n            liquidatorBalanceAdjustments.vQuoteIncrease\n        );\n    }\n\n    /// @notice liquidates all range positions in case the account is under water\n    /// @param targetAccount account to liquidate\n    /// @param poolId id of the pool to liquidate\n    /// @param protocol set of all constants and token addresses\n    function liquidateTokenPosition(\n        Account.Info storage targetAccount,\n        Account.Info storage liquidatorAccount,\n        uint16 liquidationBps,\n        uint32 poolId,\n        uint256 fixFee,\n        Protocol.Info storage protocol,\n        bool checkMargin\n    )\n        external\n        returns (\n            int256 insuranceFundFee,\n            IClearingHouseStructures.BalanceAdjustments memory liquidatorBalanceAdjustments\n        )\n    {\n        if (targetAccount.tokenPositions.isTokenRangeActive(poolId, protocol))\n            revert InvalidLiquidationActiveRangePresent(poolId);\n\n        {\n            (int256 accountMarketValue, int256 totalRequiredMargin) = targetAccount._getAccountValueAndRequiredMargin(\n                false,\n                protocol\n            );\n\n            if (accountMarketValue > totalRequiredMargin) {\n                revert InvalidLiquidationAccountAbovewater(accountMarketValue, totalRequiredMargin);\n            }\n        }\n\n        int256 tokensToTrade;\n        {\n            VTokenPosition.Info storage vTokenPosition = targetAccount.tokenPositions.getTokenPosition(\n                poolId,\n                false,\n                protocol\n            );\n            tokensToTrade = -vTokenPosition.balance.mulDiv(liquidationBps, 1e4);\n        }\n\n        uint256 liquidationPriceX128;\n        uint256 liquidatorPriceX128;\n        {\n            (liquidationPriceX128, liquidatorPriceX128, insuranceFundFee) = _getLiquidationPriceX128AndFee(\n                tokensToTrade,\n                poolId,\n                protocol\n            );\n\n            liquidatorBalanceAdjustments = _updateLiquidationAccounts(\n                targetAccount,\n                liquidatorAccount,\n                poolId,\n                tokensToTrade,\n                liquidationPriceX128,\n                liquidatorPriceX128,\n                int256(fixFee),\n                protocol\n            );\n        }\n        {\n            int256 accountMarketValueFinal = targetAccount._getAccountValue(protocol);\n\n            if (accountMarketValueFinal < 0) {\n                insuranceFundFee = accountMarketValueFinal;\n                targetAccount._updateVQuoteBalance(-accountMarketValueFinal, protocol);\n            }\n        }\n\n        if (checkMargin) liquidatorAccount._checkIfMarginAvailable(false, protocol);\n\n        emit TokenPositionLiquidated(\n            targetAccount.id,\n            liquidatorAccount.id,\n            poolId,\n            liquidationBps,\n            liquidationPriceX128,\n            liquidatorPriceX128,\n            fixFee,\n            insuranceFundFee\n        );\n    }\n\n    /// @notice removes limit order based on the current price position (keeper call)\n    /// @param account account to liquidate\n    /// @param poolId id of the pool for the range\n    /// @param tickLower lower tick index for the range\n    /// @param tickUpper upper tick index for the range\n    /// @param protocol platform constants\n    function removeLimitOrder(\n        Account.Info storage account,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 limitOrderFeeAndFixFee,\n        Protocol.Info storage protocol\n    ) external {\n        account.tokenPositions.removeLimitOrder(account.id, poolId, tickLower, tickUpper, protocol);\n\n        account._updateVQuoteBalance(-int256(limitOrderFeeAndFixFee), protocol);\n    }\n\n    function getInfo(Account.Info storage account, Protocol.Info storage protocol)\n        external\n        view\n        returns (\n            address owner,\n            int256 vQuoteBalance,\n            IClearingHouseStructures.CollateralDepositView[] memory collateralDeposits,\n            IClearingHouseStructures.VTokenPositionView[] memory tokenPositions\n        )\n    {\n        owner = account.owner;\n        collateralDeposits = account.collateralDeposits.getInfo(protocol);\n        (vQuoteBalance, tokenPositions) = account.tokenPositions.getInfo(protocol);\n    }\n\n    function getNetPosition(\n        Account.Info storage account,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) external view returns (int256 netPosition) {\n        return account.tokenPositions.getNetPosition(poolId, protocol);\n    }\n}\n"
    },
    "contracts/libraries/AddressHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { IVToken } from '../interfaces/IVToken.sol';\n\n/// @title Address helper functions\nlibrary AddressHelper {\n    /// @notice Convert address to uint32, using the least significant 32 bits\n    /// @param addr Address to convert\n    /// @return truncated last 4 bytes of the address\n    function truncate(address addr) internal pure returns (uint32 truncated) {\n        assembly {\n            truncated := and(addr, 0xffffffff)\n        }\n    }\n\n    function truncate(IERC20 addr) internal pure returns (uint32 truncated) {\n        return truncate(address(addr));\n    }\n\n    function eq(address a, address b) internal pure returns (bool) {\n        return a == b;\n    }\n\n    function eq(IERC20 a, IERC20 b) internal pure returns (bool) {\n        return eq(address(a), address(b));\n    }\n\n    function isZero(address a) internal pure returns (bool) {\n        return a == address(0);\n    }\n\n    function isZero(IERC20 a) internal pure returns (bool) {\n        return isZero(address(a));\n    }\n}\n"
    },
    "contracts/libraries/Calldata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title Calldata functions\nlibrary Calldata {\n    error CalldataLengthExceeded(uint256 length, uint256 limit);\n\n    function limit(uint256 limit_) internal pure {\n        if (msg.data.length > limit_) {\n            revert CalldataLengthExceeded(msg.data.length, limit_);\n        }\n    }\n\n    function calculateCostUnits(bytes calldata data) internal pure returns (uint256 cost) {\n        unchecked {\n            for (uint256 i; i < data.length; i++) {\n                cost += data[i] == bytes1(0) ? 4 : 16;\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Protocol.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVQuote } from '../interfaces/IVQuote.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\n\nimport { PriceMath } from './PriceMath.sol';\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\n\n/// @title Protocol storage functions\n/// @dev This is used as main storage interface containing protocol info\nlibrary Protocol {\n    using PriceMath for uint160;\n    using PriceMath for uint256;\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n\n    using Protocol for Protocol.Info;\n\n    struct Info {\n        // poolId => PoolInfo\n        mapping(uint32 => IClearingHouseStructures.Pool) pools;\n        // collateralId => CollateralInfo\n        mapping(uint32 => IClearingHouseStructures.Collateral) collaterals;\n        // settlement token (default collateral)\n        IERC20 settlementToken;\n        // virtual quote token (sort of fake USDC), is always token1 in uniswap pools\n        IVQuote vQuote;\n        // accounting settings\n        IClearingHouseStructures.LiquidationParams liquidationParams;\n        uint256 minRequiredMargin;\n        uint256 removeLimitOrderFee;\n        uint256 minimumOrderNotional;\n        // reserved for adding slots in future\n        uint256[100] _emptySlots;\n    }\n\n    function vToken(Protocol.Info storage protocol, uint32 poolId) internal view returns (IVToken) {\n        return protocol.pools[poolId].vToken;\n    }\n\n    function vPool(Protocol.Info storage protocol, uint32 poolId) internal view returns (IUniswapV3Pool) {\n        return protocol.pools[poolId].vPool;\n    }\n\n    function vPoolWrapper(Protocol.Info storage protocol, uint32 poolId) internal view returns (IVPoolWrapper) {\n        return protocol.pools[poolId].vPoolWrapper;\n    }\n\n    function getVirtualTwapSqrtPriceX96(Protocol.Info storage protocol, uint32 poolId)\n        internal\n        view\n        returns (uint160 sqrtPriceX96)\n    {\n        IClearingHouseStructures.Pool storage pool = protocol.pools[poolId];\n        return pool.vPool.twapSqrtPrice(pool.settings.twapDuration);\n    }\n\n    function getVirtualCurrentSqrtPriceX96(Protocol.Info storage protocol, uint32 poolId)\n        internal\n        view\n        returns (uint160 sqrtPriceX96)\n    {\n        return protocol.pools[poolId].vPool.sqrtPriceCurrent();\n    }\n\n    function getVirtualCurrentTick(Protocol.Info storage protocol, uint32 poolId) internal view returns (int24 tick) {\n        return protocol.pools[poolId].vPool.tickCurrent();\n    }\n\n    function getVirtualTwapTick(Protocol.Info storage protocol, uint32 poolId) internal view returns (int24 tick) {\n        IClearingHouseStructures.Pool storage pool = protocol.pools[poolId];\n        return pool.vPool.twapTick(pool.settings.twapDuration);\n    }\n\n    function getVirtualTwapPriceX128(Protocol.Info storage protocol, uint32 poolId)\n        internal\n        view\n        returns (uint256 priceX128)\n    {\n        return protocol.getVirtualTwapSqrtPriceX96(poolId).toPriceX128();\n    }\n\n    function getVirtualCurrentPriceX128(Protocol.Info storage protocol, uint32 poolId)\n        internal\n        view\n        returns (uint256 priceX128)\n    {\n        return protocol.getVirtualCurrentSqrtPriceX96(poolId).toPriceX128();\n    }\n\n    function getRealTwapSqrtPriceX96(Protocol.Info storage protocol, uint32 poolId)\n        internal\n        view\n        returns (uint160 sqrtPriceX96)\n    {\n        return protocol.getRealTwapPriceX128(poolId).toSqrtPriceX96();\n    }\n\n    function getRealTwapPriceX128(Protocol.Info storage protocol, uint32 poolId)\n        internal\n        view\n        returns (uint256 priceX128)\n    {\n        IClearingHouseStructures.Pool storage pool = protocol.pools[poolId];\n        return pool.settings.oracle.getTwapPriceX128(pool.settings.twapDuration);\n    }\n\n    function getMarginRatio(\n        Protocol.Info storage protocol,\n        uint32 poolId,\n        bool isInitialMargin\n    ) internal view returns (uint16) {\n        if (isInitialMargin) {\n            return protocol.pools[poolId].settings.initialMarginRatio;\n        } else {\n            return protocol.pools[poolId].settings.maintainanceMarginRatio;\n        }\n    }\n\n    function isPoolCrossMargined(Protocol.Info storage protocol, uint32 poolId) internal view returns (bool) {\n        return protocol.pools[poolId].settings.isCrossMargined;\n    }\n}\n"
    },
    "contracts/libraries/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nint256 constant ONE = 1;\n\n/// @title Signed math functions\nlibrary SignedMath {\n    function abs(int256 value) internal pure returns (int256) {\n        return value > 0 ? value : -value;\n    }\n\n    function absUint(int256 value) internal pure returns (uint256) {\n        return uint256(abs(value));\n    }\n\n    function sign(int256 value) internal pure returns (int256) {\n        return value > 0 ? ONE : -ONE;\n    }\n\n    /// @notice Converts a signed integer into an unsigned integer and inverts positive bool if negative\n    function extractSign(int256 a, bool positive) internal pure returns (uint256 _a, bool) {\n        if (a < 0) {\n            positive = !positive;\n            _a = uint256(-a);\n        } else {\n            _a = uint256(a);\n        }\n        return (_a, positive);\n    }\n\n    function extractSign(int256 a) internal pure returns (uint256 _a, bool) {\n        return extractSign(a, true);\n    }\n}\n"
    },
    "contracts/utils/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { ContextUpgradeable } from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport { IGovernable } from '../interfaces/IGovernable.sol';\n\n/**\n * This module is used through inheritance. It will make available the modifier\n * `onlyGovernance` and `onlyGovernanceOrTeamMultisig`, which can be applied to your functions\n * to restrict their use to the caller.\n */\nabstract contract Governable is IGovernable, Initializable, ContextUpgradeable {\n    address private _governance;\n    address private _teamMultisig;\n\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\n    event TeamMultisigTransferred(address indexed previousTeamMultisig, address indexed newTeamMultisig);\n\n    error Unauthorised();\n    error ZeroAddress();\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial governance and team multisig.\n     */\n    constructor() {\n        __Governable_init();\n    }\n\n    /**\n     * @dev Useful to proxy contracts for initializing\n     */\n    function __Governable_init() internal initializer {\n        __Context_init();\n        address msgSender = _msgSender();\n        __Governable_init(msgSender, msgSender);\n    }\n\n    /**\n     * @dev Useful to proxy contracts for initializing with custom addresses\n     */\n    function __Governable_init(address initialGovernance, address initialTeamMultisig) internal initializer {\n        _governance = initialGovernance;\n        emit GovernanceTransferred(address(0), initialGovernance);\n\n        _teamMultisig = initialTeamMultisig;\n        emit TeamMultisigTransferred(address(0), initialTeamMultisig);\n    }\n\n    /**\n     * @dev Returns the address of the current governance.\n     */\n    function governance() public view virtual returns (address) {\n        return _governance;\n    }\n\n    /**\n     * @dev Returns the address of the current team multisig.transferTeamMultisig\n     */\n    function teamMultisig() public view virtual returns (address) {\n        return _teamMultisig;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governance.\n     */\n    modifier onlyGovernance() {\n        if (governance() != _msgSender()) revert Unauthorised();\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governance or team multisig.\n     */\n    modifier onlyGovernanceOrTeamMultisig() {\n        if (teamMultisig() != _msgSender() && governance() != _msgSender()) revert Unauthorised();\n        _;\n    }\n\n    /**\n     * @dev Transfers governance to a new account (`newGovernance`).\n     * Can only be called by the current governance.\n     */\n    function transferGovernance(address newGovernance) external virtual onlyGovernance {\n        if (newGovernance == address(0)) revert ZeroAddress();\n        emit GovernanceTransferred(_governance, newGovernance);\n        _governance = newGovernance;\n    }\n\n    /**\n     * @dev Transfers teamMultisig to a new account (`newTeamMultisig`).\n     * Can only be called by the current teamMultisig or current governance.\n     */\n    function transferTeamMultisig(address newTeamMultisig) external virtual onlyGovernanceOrTeamMultisig {\n        if (newTeamMultisig == address(0)) revert ZeroAddress();\n        emit TeamMultisigTransferred(_teamMultisig, newTeamMultisig);\n        _teamMultisig = newTeamMultisig;\n    }\n}\n"
    },
    "contracts/utils/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.6;\npragma abicoder v2;\n\nimport { IMulticall } from '@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol';\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n    /// @inheritdoc IMulticall\n    function multicall(bytes[] calldata data) public payable override returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n            if (!success) {\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n                if (result.length < 68) revert();\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n\n            results[i] = result;\n        }\n    }\n}\n"
    },
    "contracts/utils/OptimisticGasUsedClaim.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nabstract contract OptimisticGasUsedClaim {\n    error ExcessGasUsedClaim(uint256 gasUsedClaim, uint256 gasUsedActual);\n\n    modifier checkGasUsedClaim(uint256 gasUsedClaim) virtual {\n        if (gasUsedClaim > 0) {\n            uint256 initialGas = gasleft();\n            _;\n            uint256 gasUsedActual = gasleft() - initialGas;\n            if (gasUsedClaim > gasUsedActual) {\n                revert ExcessGasUsedClaim(gasUsedClaim, gasUsedActual);\n            }\n        } else {\n            _;\n        }\n    }\n}\n"
    },
    "contracts/protocol/clearinghouse/ClearingHouseView.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\n\nimport { Account } from '../../libraries/Account.sol';\nimport { AddressHelper } from '../../libraries/AddressHelper.sol';\nimport { Protocol } from '../../libraries/Protocol.sol';\n\nimport { ClearingHouseStorage } from './ClearingHouseStorage.sol';\n\nimport { Extsload } from '../../utils/Extsload.sol';\n\nabstract contract ClearingHouseView is IClearingHouse, ClearingHouseStorage, Extsload {\n    using Account for Account.Info;\n    using AddressHelper for address;\n    using AddressHelper for IVToken;\n    using Protocol for Protocol.Info;\n\n    function getTwapPrices(IVToken vToken) external view returns (uint256 realPriceX128, uint256 virtualPriceX128) {\n        uint32 poolId = vToken.truncate();\n        realPriceX128 = protocol.getRealTwapPriceX128(poolId);\n        virtualPriceX128 = protocol.getVirtualTwapPriceX128(poolId);\n    }\n\n    function isPoolIdAvailable(uint32 poolId) external view returns (bool) {\n        return protocol.pools[poolId].vToken.isZero();\n    }\n\n    /**\n        Protocol.Info VIEW\n     */\n    function protocolInfo()\n        public\n        view\n        returns (\n            IVQuote vQuote,\n            LiquidationParams memory liquidationParams,\n            uint256 minRequiredMargin,\n            uint256 removeLimitOrderFee,\n            uint256 minimumOrderNotional\n        )\n    {\n        vQuote = protocol.vQuote;\n        liquidationParams = protocol.liquidationParams;\n        minRequiredMargin = protocol.minRequiredMargin;\n        removeLimitOrderFee = protocol.removeLimitOrderFee;\n        minimumOrderNotional = protocol.minimumOrderNotional;\n    }\n\n    function getPoolInfo(uint32 poolId) public view returns (Pool memory) {\n        return protocol.pools[poolId];\n    }\n\n    function getCollateralInfo(uint32 collateralId) public view returns (Collateral memory) {\n        return protocol.collaterals[collateralId];\n    }\n\n    /**\n        Account.Info VIEW\n     */\n\n    function getAccountInfo(uint256 accountId)\n        public\n        view\n        returns (\n            address owner,\n            int256 vQuoteBalance,\n            CollateralDepositView[] memory collateralDeposits,\n            VTokenPositionView[] memory tokenPositions\n        )\n    {\n        return accounts[accountId].getInfo(protocol);\n    }\n\n    // isInitialMargin true is initial margin, false is maintainance margin\n    function getAccountMarketValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\n        public\n        view\n        returns (int256 accountMarketValue, int256 requiredMargin)\n    {\n        (accountMarketValue, requiredMargin) = accounts[accountId].getAccountValueAndRequiredMargin(\n            isInitialMargin,\n            protocol\n        );\n    }\n\n    function getAccountNetProfit(uint256 accountId) public view returns (int256 accountNetProfit) {\n        accountNetProfit = accounts[accountId].getAccountPositionProfits(protocol);\n    }\n\n    function getNetTokenPosition(uint256 accountId, uint32 poolId) public view returns (int256 netPosition) {\n        return accounts[accountId].getNetPosition(poolId, protocol);\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        // Cannot overflow because denominator != 0\n        uint256 twos;\n        assembly {\n            twos := and(add(not(denominator), 1), denominator)\n        }\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n            prod0 := or(prod0, mul(prod1, twos))\n        }\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv;\n\n        assembly {\n            inv := xor(mul(3, denominator), 2)\n        }\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        assembly {\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\n        }\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        assembly {\n            result := mul(prod0, inv)\n        }\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/CollateralDeposit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { Account } from './Account.sol';\nimport { Protocol } from './Protocol.sol';\nimport { AddressHelper } from './AddressHelper.sol';\nimport { SignedFullMath } from './SignedFullMath.sol';\nimport { Uint32L8ArrayLib } from './Uint32L8Array.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Collateral deposit set functions\nlibrary CollateralDeposit {\n    using AddressHelper for address;\n    using SafeCast for uint256;\n    using SignedFullMath for int256;\n    using Uint32L8ArrayLib for uint32[8];\n\n    error InsufficientCollateralBalance();\n\n    struct Set {\n        // fixed length array of truncate(tokenAddress)\n        // open positions in 8 different pairs at same time.\n        // single per pool because it's fungible, allows for having\n        uint32[8] active;\n        mapping(uint32 => uint256) deposits;\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\n    }\n\n    // add overrides that accept vToken or truncated\n    function increaseBalance(\n        CollateralDeposit.Set storage info,\n        uint32 collateralId,\n        uint256 amount\n    ) internal {\n        info.active.include(collateralId);\n\n        info.deposits[collateralId] += amount;\n    }\n\n    function decreaseBalance(\n        CollateralDeposit.Set storage info,\n        uint32 collateralId,\n        uint256 amount\n    ) internal {\n        if (info.deposits[collateralId] < amount) revert InsufficientCollateralBalance();\n        info.deposits[collateralId] -= amount;\n\n        if (info.deposits[collateralId] == 0) {\n            info.active.exclude(collateralId);\n        }\n    }\n\n    function getAllDepositAccountMarketValue(CollateralDeposit.Set storage set, Protocol.Info storage protocol)\n        internal\n        view\n        returns (int256)\n    {\n        int256 accountMarketValue;\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 collateralId = set.active[i];\n\n            if (collateralId == 0) break;\n            IClearingHouseStructures.Collateral storage collateral = protocol.collaterals[collateralId];\n\n            accountMarketValue += set.deposits[collateralId].toInt256().mulDiv(\n                collateral.settings.oracle.getTwapPriceX128(collateral.settings.twapDuration),\n                FixedPoint128.Q128\n            );\n        }\n        return accountMarketValue;\n    }\n\n    function getInfo(CollateralDeposit.Set storage set, Protocol.Info storage protocol)\n        internal\n        view\n        returns (IClearingHouseStructures.CollateralDepositView[] memory collateralDeposits)\n    {\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\n        collateralDeposits = new IClearingHouseStructures.CollateralDepositView[](numberOfTokenPositions);\n\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\n            collateralDeposits[i].collateral = protocol.collaterals[set.active[i]].token;\n            collateralDeposits[i].balance = set.deposits[set.active[i]];\n        }\n    }\n}\n"
    },
    "contracts/libraries/SignedFullMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.0;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { SignedMath } from './SignedMath.sol';\n\n/// @title Signed full math functions\nlibrary SignedFullMath {\n    using SafeCast for uint256;\n    using SignedMath for int256;\n\n    function mulDiv(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (int256 result) {\n        result = FullMath.mulDiv(a < 0 ? uint256(-1 * a) : uint256(a), b, denominator).toInt256();\n        if (a < 0) {\n            result = -result;\n        }\n    }\n\n    function mulDiv(\n        int256 a,\n        int256 b,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        bool resultPositive = true;\n        uint256 _a;\n        uint256 _b;\n        uint256 _denominator;\n\n        (_a, resultPositive) = a.extractSign(resultPositive);\n        (_b, resultPositive) = b.extractSign(resultPositive);\n        (_denominator, resultPositive) = denominator.extractSign(resultPositive);\n\n        result = FullMath.mulDiv(_a, _b, _denominator).toInt256();\n        if (!resultPositive) {\n            result = -result;\n        }\n    }\n\n    /// @notice Rounds down towards negative infinity\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\n    function mulDivRoundingDown(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (int256 result) {\n        result = mulDiv(a, b, denominator);\n        if (result < 0 && _hasRemainder(a.absUint(), b, denominator)) {\n            result += -1;\n        }\n    }\n\n    /// @notice Rounds down towards negative infinity\n    /// @dev In Solidity -3/2 is -1. But this method result is -2\n    function mulDivRoundingDown(\n        int256 a,\n        int256 b,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        result = mulDiv(a, b, denominator);\n        if (result < 0 && _hasRemainder(a.absUint(), b.absUint(), denominator.absUint())) {\n            result += -1;\n        }\n    }\n\n    function _hasRemainder(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) private pure returns (bool hasRemainder) {\n        assembly {\n            let remainder := mulmod(a, b, denominator)\n            if gt(remainder, 0) {\n                hasRemainder := 1\n            }\n        }\n    }\n\n    // function xor(bool a, bool b) private pure returns (bool) {\n    //     return (a ? 1 : 0) ^ (b ? 1 : 0) > 0;\n    // }\n}\n"
    },
    "contracts/libraries/LiquidityPositionSet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.9;\n\nimport { Account } from './Account.sol';\nimport { LiquidityPosition } from './LiquidityPosition.sol';\nimport { Uint48Lib } from './Uint48.sol';\nimport { Uint48L5ArrayLib } from './Uint48L5Array.sol';\nimport { Protocol } from './Protocol.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Liquidity position set functions\nlibrary LiquidityPositionSet {\n    using LiquidityPosition for LiquidityPosition.Info;\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using Protocol for Protocol.Info;\n    using Uint48L5ArrayLib for uint48[5];\n\n    error LPS_IllegalTicks(int24 tickLower, int24 tickUpper);\n    error LPS_DeactivationFailed(int24 tickLower, int24 tickUpper, uint256 liquidity);\n    error LPS_InactiveRange();\n\n    function isEmpty(LiquidityPosition.Set storage set) internal view returns (bool) {\n        return set.active[0] == 0;\n    }\n\n    function isPositionActive(\n        LiquidityPosition.Set storage set,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal view returns (bool) {\n        return _exists(set.active, tickLower, tickUpper);\n    }\n\n    function marketValue(\n        LiquidityPosition.Set storage set,\n        uint160 sqrtPriceCurrent,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 marketValue_) {\n        marketValue_ = set.marketValue(sqrtPriceCurrent, protocol.vPoolWrapper(poolId));\n    }\n\n    /// @notice Get the total market value of all active liquidity positions in the set.\n    /// @param set: Collection of active liquidity positions\n    /// @param sqrtPriceCurrent: Current price of the virtual asset\n    /// @param wrapper: address of the wrapper contract, passed once to avoid multiple sloads for wrapper\n    function marketValue(\n        LiquidityPosition.Set storage set,\n        uint160 sqrtPriceCurrent,\n        IVPoolWrapper wrapper\n    ) internal view returns (int256 marketValue_) {\n        for (uint256 i = 0; i < set.active.length; i++) {\n            uint48 id = set.active[i];\n            if (id == 0) break;\n            marketValue_ += set.positions[id].marketValue(sqrtPriceCurrent, wrapper);\n        }\n    }\n\n    function maxNetPosition(LiquidityPosition.Set storage set) internal view returns (uint256 risk) {\n        for (uint256 i = 0; i < set.active.length; i++) {\n            uint48 id = set.active[i];\n            risk += set.positions[id].maxNetPosition();\n        }\n    }\n\n    function longSideRisk(\n        LiquidityPosition.Set storage set,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (uint256 risk) {\n        for (uint256 i = 0; i < set.active.length; i++) {\n            uint48 id = set.active[i];\n            risk += set.positions[id].longSideRisk(poolId, protocol);\n        }\n    }\n\n    function getLiquidityPosition(\n        LiquidityPosition.Set storage set,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal view returns (LiquidityPosition.Info storage position) {\n        if (tickLower > tickUpper) {\n            revert LPS_IllegalTicks(tickLower, tickUpper);\n        }\n\n        uint48 positionId = Uint48Lib.concat(tickLower, tickUpper);\n        position = set.positions[positionId];\n\n        if (!position.isInitialized()) revert LPS_InactiveRange();\n        return position;\n    }\n\n    function activate(\n        LiquidityPosition.Set storage set,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal returns (LiquidityPosition.Info storage position) {\n        if (tickLower > tickUpper) {\n            revert LPS_IllegalTicks(tickLower, tickUpper);\n        }\n\n        uint48 positionId = _include(set.active, tickLower, tickUpper);\n        position = set.positions[positionId];\n\n        if (!position.isInitialized()) {\n            position.initialize(tickLower, tickUpper);\n        }\n    }\n\n    function deactivate(LiquidityPosition.Set storage set, LiquidityPosition.Info storage position) internal {\n        if (position.liquidity != 0) {\n            revert LPS_DeactivationFailed(position.tickLower, position.tickUpper, position.liquidity);\n        }\n\n        _exclude(set.active, position.tickLower, position.tickUpper);\n    }\n\n    function _include(\n        uint48[5] storage array,\n        int24 val1,\n        int24 val2\n    ) private returns (uint48 index) {\n        array.include(index = Uint48Lib.concat(val1, val2));\n    }\n\n    function _exclude(\n        uint48[5] storage array,\n        int24 val1,\n        int24 val2\n    ) private returns (uint48 index) {\n        array.exclude(index = Uint48Lib.concat(val1, val2));\n    }\n\n    function _exists(\n        uint48[5] storage array,\n        int24 val1,\n        int24 val2\n    ) private view returns (bool) {\n        return array.exists(Uint48Lib.concat(val1, val2));\n    }\n\n    function liquidityChange(\n        LiquidityPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        Protocol.Info storage protocol\n    ) internal {\n        LiquidityPosition.Info storage position = set.activate(\n            liquidityChangeParams.tickLower,\n            liquidityChangeParams.tickUpper\n        );\n\n        position.limitOrderType = liquidityChangeParams.limitOrderType;\n\n        set.liquidityChange(\n            accountId,\n            poolId,\n            position,\n            liquidityChangeParams.liquidityDelta,\n            balanceAdjustments,\n            protocol\n        );\n    }\n\n    function liquidityChange(\n        LiquidityPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        LiquidityPosition.Info storage position,\n        int128 liquidity,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        Protocol.Info storage protocol\n    ) internal {\n        position.liquidityChange(accountId, poolId, liquidity, balanceAdjustments, protocol);\n\n        emit Account.TokenPositionChangedDueToLiquidityChanged(\n            accountId,\n            poolId,\n            position.tickLower,\n            position.tickUpper,\n            balanceAdjustments.vTokenIncrease\n        );\n\n        if (position.liquidity == 0) {\n            set.deactivate(position);\n        }\n    }\n\n    function closeLiquidityPosition(\n        LiquidityPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        LiquidityPosition.Info storage position,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        Protocol.Info storage protocol\n    ) internal {\n        set.liquidityChange(accountId, poolId, position, -int128(position.liquidity), balanceAdjustments, protocol);\n    }\n\n    function removeLimitOrder(\n        LiquidityPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        int24 currentTick,\n        int24 tickLower,\n        int24 tickUpper,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        Protocol.Info storage protocol\n    ) internal {\n        LiquidityPosition.Info storage position = set.getLiquidityPosition(tickLower, tickUpper);\n        position.checkValidLimitOrderRemoval(currentTick);\n        set.closeLiquidityPosition(accountId, poolId, position, balanceAdjustments, protocol);\n    }\n\n    function closeAllLiquidityPositions(\n        LiquidityPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        Protocol.Info storage protocol\n    ) internal {\n        LiquidityPosition.Info storage position;\n\n        while (set.active[0] != 0) {\n            IClearingHouseStructures.BalanceAdjustments memory balanceAdjustmentsCurrent;\n\n            position = set.positions[set.active[0]];\n\n            set.closeLiquidityPosition(accountId, poolId, position, balanceAdjustmentsCurrent, protocol);\n\n            balanceAdjustments.vQuoteIncrease += balanceAdjustmentsCurrent.vQuoteIncrease;\n            balanceAdjustments.vTokenIncrease += balanceAdjustmentsCurrent.vTokenIncrease;\n            balanceAdjustments.traderPositionIncrease += balanceAdjustmentsCurrent.traderPositionIncrease;\n        }\n    }\n\n    function getInfo(LiquidityPosition.Set storage set)\n        internal\n        view\n        returns (IClearingHouseStructures.LiquidityPositionView[] memory liquidityPositions)\n    {\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\n        liquidityPositions = new IClearingHouseStructures.LiquidityPositionView[](numberOfTokenPositions);\n\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\n            liquidityPositions[i].limitOrderType = set.positions[set.active[i]].limitOrderType;\n            liquidityPositions[i].tickLower = set.positions[set.active[i]].tickLower;\n            liquidityPositions[i].tickUpper = set.positions[set.active[i]].tickUpper;\n            liquidityPositions[i].liquidity = set.positions[set.active[i]].liquidity;\n            liquidityPositions[i].vTokenAmountIn = set.positions[set.active[i]].vTokenAmountIn;\n            liquidityPositions[i].sumALastX128 = set.positions[set.active[i]].sumALastX128;\n            liquidityPositions[i].sumBInsideLastX128 = set.positions[set.active[i]].sumBInsideLastX128;\n            liquidityPositions[i].sumFpInsideLastX128 = set.positions[set.active[i]].sumFpInsideLastX128;\n            liquidityPositions[i].sumFeeInsideLastX128 = set.positions[set.active[i]].sumFeeInsideLastX128;\n        }\n    }\n\n    function getNetPosition(LiquidityPosition.Set storage set, uint160 sqrtPriceCurrent)\n        internal\n        view\n        returns (int256 netPosition)\n    {\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\n\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\n            netPosition += set.positions[set.active[i]].netPosition(sqrtPriceCurrent);\n        }\n    }\n}\n"
    },
    "contracts/libraries/LiquidityPosition.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.9;\n\nimport { SqrtPriceMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { Account } from './Account.sol';\nimport { PriceMath } from './PriceMath.sol';\nimport { Protocol } from './Protocol.sol';\nimport { SignedFullMath } from './SignedFullMath.sol';\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\nimport { FundingPayment } from './FundingPayment.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IClearingHouseEnums } from '../interfaces/clearinghouse/IClearingHouseEnums.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Liquidity position functions\nlibrary LiquidityPosition {\n    using FullMath for uint256;\n    using PriceMath for uint160;\n    using SafeCast for uint256;\n    using SignedFullMath for int256;\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n\n    using LiquidityPosition for LiquidityPosition.Info;\n    using Protocol for Protocol.Info;\n\n    struct Set {\n        // multiple per pool because it's non-fungible, allows for 4 billion LP positions lifetime\n        uint48[5] active;\n        // concat(tickLow,tickHigh)\n        mapping(uint48 => LiquidityPosition.Info) positions;\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\n    }\n\n    struct Info {\n        //Extra boolean to check if it is limit order and uint to track limit price.\n        IClearingHouseEnums.LimitOrderType limitOrderType;\n        // the tick range of the position;\n        int24 tickLower;\n        int24 tickUpper;\n        // the liquidity of the position\n        uint128 liquidity;\n        int256 vTokenAmountIn;\n        // funding payment checkpoints\n        int256 sumALastX128;\n        int256 sumBInsideLastX128;\n        int256 sumFpInsideLastX128;\n        // fee growth inside\n        uint256 sumFeeInsideLastX128;\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\n    }\n\n    error LP_AlreadyInitialized();\n    error LP_IneligibleLimitOrderRemoval();\n\n    function isInitialized(Info storage info) internal view returns (bool) {\n        return info.tickLower != 0 || info.tickUpper != 0;\n    }\n\n    function checkValidLimitOrderRemoval(Info storage info, int24 currentTick) internal view {\n        if (\n            !((currentTick >= info.tickUpper &&\n                info.limitOrderType == IClearingHouseEnums.LimitOrderType.UPPER_LIMIT) ||\n                (currentTick <= info.tickLower &&\n                    info.limitOrderType == IClearingHouseEnums.LimitOrderType.LOWER_LIMIT))\n        ) {\n            revert LP_IneligibleLimitOrderRemoval();\n        }\n    }\n\n    function initialize(\n        Info storage position,\n        int24 tickLower,\n        int24 tickUpper\n    ) internal {\n        if (position.isInitialized()) {\n            revert LP_AlreadyInitialized();\n        }\n\n        position.tickLower = tickLower;\n        position.tickUpper = tickUpper;\n    }\n\n    function liquidityChange(\n        Info storage position,\n        uint256 accountId,\n        uint32 poolId,\n        int128 liquidityDelta,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        Protocol.Info storage protocol\n    ) internal {\n        int256 vTokenPrincipal;\n        int256 vQuotePrincipal;\n\n        IVPoolWrapper wrapper = protocol.vPoolWrapper(poolId);\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside;\n\n        if (liquidityDelta > 0) {\n            uint256 vTokenPrincipal_;\n            uint256 vQuotePrincipal_;\n            (vTokenPrincipal_, vQuotePrincipal_, wrapperValuesInside) = wrapper.mint(\n                position.tickLower,\n                position.tickUpper,\n                uint128(liquidityDelta)\n            );\n            vTokenPrincipal = vTokenPrincipal_.toInt256();\n            vQuotePrincipal = vQuotePrincipal_.toInt256();\n        } else {\n            uint256 vTokenPrincipal_;\n            uint256 vQuotePrincipal_;\n            (vTokenPrincipal_, vQuotePrincipal_, wrapperValuesInside) = wrapper.burn(\n                position.tickLower,\n                position.tickUpper,\n                uint128(-liquidityDelta)\n            );\n            vTokenPrincipal = -vTokenPrincipal_.toInt256();\n            vQuotePrincipal = -vQuotePrincipal_.toInt256();\n        }\n\n        position.update(accountId, poolId, wrapperValuesInside, balanceAdjustments);\n\n        balanceAdjustments.vQuoteIncrease -= vQuotePrincipal;\n        balanceAdjustments.vTokenIncrease -= vTokenPrincipal;\n\n        emit Account.LiquidityChanged(\n            accountId,\n            poolId,\n            position.tickLower,\n            position.tickUpper,\n            liquidityDelta,\n            position.limitOrderType,\n            -vTokenPrincipal,\n            -vQuotePrincipal\n        );\n\n        uint160 sqrtPriceCurrent = protocol.vPool(poolId).sqrtPriceCurrent();\n        int256 vTokenAmountCurrent;\n        {\n            (vTokenAmountCurrent, ) = position.vTokenAmountsInRange(sqrtPriceCurrent, false);\n            balanceAdjustments.traderPositionIncrease += (vTokenAmountCurrent - position.vTokenAmountIn);\n        }\n\n        if (liquidityDelta > 0) {\n            position.liquidity += uint128(liquidityDelta);\n        } else if (liquidityDelta < 0) {\n            position.liquidity -= uint128(-liquidityDelta);\n        }\n\n        position.vTokenAmountIn = vTokenAmountCurrent + vTokenPrincipal;\n    }\n\n    function update(\n        Info storage position,\n        uint256 accountId,\n        uint32 poolId,\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments\n    ) internal {\n        int256 fundingPayment = position.unrealizedFundingPayment(\n            wrapperValuesInside.sumAX128,\n            wrapperValuesInside.sumFpInsideX128\n        );\n        balanceAdjustments.vQuoteIncrease += fundingPayment;\n\n        int256 unrealizedLiquidityFee = position.unrealizedFees(wrapperValuesInside.sumFeeInsideX128).toInt256();\n        balanceAdjustments.vQuoteIncrease += unrealizedLiquidityFee;\n\n        emit Account.FundingPaymentRealized(accountId, poolId, position.tickLower, position.tickUpper, fundingPayment);\n        emit Account.LiquidityPositionEarningsRealized(\n            accountId,\n            poolId,\n            position.tickLower,\n            position.tickUpper,\n            unrealizedLiquidityFee\n        );\n        // updating checkpoints\n        position.sumALastX128 = wrapperValuesInside.sumAX128;\n        position.sumBInsideLastX128 = wrapperValuesInside.sumBInsideX128;\n        position.sumFpInsideLastX128 = wrapperValuesInside.sumFpInsideX128;\n        position.sumFeeInsideLastX128 = wrapperValuesInside.sumFeeInsideX128;\n    }\n\n    function netPosition(Info storage position, uint160 sqrtPriceCurrent)\n        internal\n        view\n        returns (int256 netTokenPosition)\n    {\n        int256 vTokenAmountCurrent;\n        (vTokenAmountCurrent, ) = position.vTokenAmountsInRange(sqrtPriceCurrent, false);\n        netTokenPosition = (vTokenAmountCurrent - position.vTokenAmountIn);\n    }\n\n    // use funding payment lib\n    function unrealizedFundingPayment(\n        Info storage position,\n        int256 sumAX128,\n        int256 sumFpInsideX128\n    ) internal view returns (int256 vQuoteIncrease) {\n        vQuoteIncrease = -FundingPayment.bill(\n            sumAX128,\n            sumFpInsideX128,\n            position.sumALastX128,\n            position.sumBInsideLastX128,\n            position.sumFpInsideLastX128,\n            position.liquidity\n        );\n    }\n\n    function unrealizedFees(Info storage position, uint256 sumFeeInsideX128)\n        internal\n        view\n        returns (uint256 vQuoteIncrease)\n    {\n        vQuoteIncrease = (sumFeeInsideX128 - position.sumFeeInsideLastX128).mulDiv(\n            position.liquidity,\n            FixedPoint128.Q128\n        );\n    }\n\n    function maxNetPosition(Info storage position) internal view returns (uint256) {\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n\n        if (position.vTokenAmountIn >= 0)\n            return\n                SqrtPriceMath.getAmount0Delta(sqrtPriceLowerX96, sqrtPriceUpperX96, position.liquidity, true) -\n                uint256(position.vTokenAmountIn);\n        else\n            return\n                SqrtPriceMath.getAmount0Delta(sqrtPriceLowerX96, sqrtPriceUpperX96, position.liquidity, true) +\n                uint256(-1 * position.vTokenAmountIn);\n    }\n\n    function longSideRisk(\n        Info storage position,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (uint256) {\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n        uint256 longPositionExecutionPriceX96;\n        {\n            uint160 sqrtPriceTwapX96 = protocol.getVirtualTwapSqrtPriceX96(poolId);\n            uint160 sqrtPriceForExecutionPriceX96 = sqrtPriceTwapX96 <= sqrtPriceUpperX96\n                ? sqrtPriceTwapX96\n                : sqrtPriceUpperX96;\n            longPositionExecutionPriceX96 = uint256(sqrtPriceLowerX96).mulDiv(\n                sqrtPriceForExecutionPriceX96,\n                FixedPoint96.Q96\n            );\n        }\n\n        uint256 maxNetLongPosition;\n        {\n            uint256 maxLongTokens = SqrtPriceMath.getAmount0Delta(\n                sqrtPriceLowerX96,\n                sqrtPriceUpperX96,\n                position.liquidity,\n                true\n            );\n            //\n            if (position.vTokenAmountIn >= 0) {\n                //maxLongTokens in range should always be >= amount that got added to range, equality occurs when range was added at pCurrent = pHigh\n                assert(maxLongTokens >= uint256(position.vTokenAmountIn));\n                maxNetLongPosition = maxLongTokens - uint256(position.vTokenAmountIn);\n            } else maxNetLongPosition = maxLongTokens + uint256(-1 * position.vTokenAmountIn);\n        }\n\n        return maxNetLongPosition.mulDiv(longPositionExecutionPriceX96, FixedPoint96.Q96);\n    }\n\n    function marketValue(\n        Info storage position,\n        uint160 valuationSqrtPriceX96,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 marketValue_) {\n        return position.marketValue(valuationSqrtPriceX96, protocol.vPoolWrapper(poolId));\n    }\n\n    function vTokenAmountsInRange(\n        Info storage position,\n        uint160 sqrtPriceCurrent,\n        bool roundUp\n    ) internal view returns (int256 vTokenAmount, int256 vQuoteAmount) {\n        uint160 sqrtPriceLowerX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n        uint160 sqrtPriceUpperX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n\n        // If price is outside the range, then consider it at the ends\n        // for calculation of amounts\n        uint160 sqrtPriceMiddleX96 = sqrtPriceCurrent;\n        if (sqrtPriceCurrent < sqrtPriceLowerX96) {\n            sqrtPriceMiddleX96 = sqrtPriceLowerX96;\n        } else if (sqrtPriceCurrent > sqrtPriceUpperX96) {\n            sqrtPriceMiddleX96 = sqrtPriceUpperX96;\n        }\n\n        vTokenAmount = SqrtPriceMath\n            .getAmount0Delta(sqrtPriceMiddleX96, sqrtPriceUpperX96, position.liquidity, roundUp)\n            .toInt256();\n        vQuoteAmount = SqrtPriceMath\n            .getAmount1Delta(sqrtPriceLowerX96, sqrtPriceMiddleX96, position.liquidity, roundUp)\n            .toInt256();\n    }\n\n    function marketValue(\n        Info storage position,\n        uint160 valuationSqrtPriceX96,\n        IVPoolWrapper wrapper\n    ) internal view returns (int256 marketValue_) {\n        {\n            (int256 vTokenAmount, int256 vQuoteAmount) = position.vTokenAmountsInRange(valuationSqrtPriceX96, false);\n            uint256 priceX128 = valuationSqrtPriceX96.toPriceX128();\n            marketValue_ = vTokenAmount.mulDiv(priceX128, FixedPoint128.Q128) + vQuoteAmount;\n        }\n        // adding fees\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = wrapper.getExtrapolatedValuesInside(\n            position.tickLower,\n            position.tickUpper\n        );\n        marketValue_ += position.unrealizedFees(wrapperValuesInside.sumFeeInsideX128).toInt256();\n        marketValue_ += position.unrealizedFundingPayment(\n            wrapperValuesInside.sumAX128,\n            wrapperValuesInside.sumFpInsideX128\n        );\n    }\n}\n"
    },
    "contracts/libraries/VTokenPosition.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.9;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { Account } from './Account.sol';\nimport { SignedFullMath } from './SignedFullMath.sol';\nimport { LiquidityPosition } from './LiquidityPosition.sol';\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\nimport { FundingPayment } from './FundingPayment.sol';\nimport { Protocol } from './Protocol.sol';\n\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\n\nimport { UniswapV3PoolHelper } from './UniswapV3PoolHelper.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title VToken position functions\nlibrary VTokenPosition {\n    using FullMath for uint256;\n    using SignedFullMath for int256;\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n\n    using LiquidityPosition for LiquidityPosition.Info;\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using Protocol for Protocol.Info;\n\n    enum RISK_SIDE {\n        LONG,\n        SHORT\n    }\n\n    /// @notice stores info for VTokenPositionSet\n    /// @param active list of all active token truncated addresses\n    /// @param positions mapping from truncated token addresses to VTokenPosition struct for that address\n    struct Set {\n        // fixed length array of truncate(tokenAddress)\n        // open positions in 8 different pairs at same time.\n        // single per pool because it's fungible, allows for having\n        uint32[8] active;\n        mapping(uint32 => VTokenPosition.Info) positions;\n        int256 vQuoteBalance;\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\n    }\n\n    struct Info {\n        int256 balance; // vTokenLong - vTokenShort\n        int256 netTraderPosition;\n        int256 sumAX128Chkpt;\n        // this is moved from accounts to here because of the in margin available check\n        // the loop needs to be done over liquidity positions of same token only\n        LiquidityPosition.Set liquidityPositions;\n        uint256[100] _emptySlots; // reserved for adding variables when upgrading logic\n    }\n\n    /// @notice returns the market value of the supplied token position\n    /// @param position token position\n    /// @param priceX128 price in fixed point 128\n    /// @param wrapper pool wrapper corresponding to position\n    function marketValue(\n        VTokenPosition.Info storage position,\n        uint256 priceX128,\n        IVPoolWrapper wrapper\n    ) internal view returns (int256 value) {\n        value = position.balance.mulDiv(priceX128, FixedPoint128.Q128);\n        value += unrealizedFundingPayment(position, wrapper);\n    }\n\n    /// @notice returns the market value of the supplied token position\n    /// @param position token position\n    /// @param priceX128 price in fixed point 128\n    /// @param poolId id of the rage trade pool\n    /// @param protocol platform constants\n    function marketValue(\n        VTokenPosition.Info storage position,\n        uint32 poolId,\n        uint256 priceX128,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 value) {\n        return marketValue(position, priceX128, protocol.vPoolWrapper(poolId));\n    }\n\n    /// @notice returns the market value of the supplied token position\n    /// @param position token position\n    /// @param poolId id of the rage trade pool\n    /// @param protocol platform constants\n    function marketValue(\n        VTokenPosition.Info storage position,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256) {\n        uint256 priceX128 = protocol.getVirtualTwapPriceX128(poolId);\n        return marketValue(position, poolId, priceX128, protocol);\n    }\n\n    function riskSide(VTokenPosition.Info storage position) internal view returns (RISK_SIDE) {\n        return position.balance > 0 ? RISK_SIDE.LONG : RISK_SIDE.SHORT;\n    }\n\n    /// @notice returns the unrealized funding payment for the trader position\n    /// @param position token position\n    /// @param wrapper pool wrapper corresponding to position\n    function unrealizedFundingPayment(VTokenPosition.Info storage position, IVPoolWrapper wrapper)\n        internal\n        view\n        returns (int256)\n    {\n        int256 extrapolatedSumAX128 = wrapper.getExtrapolatedSumAX128();\n        int256 unrealizedFpBill = -FundingPayment.bill(\n            extrapolatedSumAX128,\n            position.sumAX128Chkpt,\n            position.netTraderPosition\n        );\n        return unrealizedFpBill;\n    }\n\n    /// @notice returns the unrealized funding payment for the position\n    /// @param position token position\n    /// @param poolId id of the rage trade pool\n    /// @param protocol platform constants\n    function unrealizedFundingPayment(\n        VTokenPosition.Info storage position,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256) {\n        return unrealizedFundingPayment(position, protocol.vPoolWrapper(poolId));\n    }\n\n    function getNetPosition(\n        VTokenPosition.Info storage position,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256) {\n        return\n            position.netTraderPosition +\n            position.liquidityPositions.getNetPosition(protocol.vPool(poolId).sqrtPriceCurrent());\n    }\n}\n"
    },
    "contracts/libraries/VTokenPositionSet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.9;\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { Account } from './Account.sol';\nimport { AddressHelper } from './AddressHelper.sol';\nimport { LiquidityPosition } from './LiquidityPosition.sol';\nimport { LiquidityPositionSet } from './LiquidityPositionSet.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\nimport { SignedFullMath } from './SignedFullMath.sol';\nimport { SignedMath } from './SignedMath.sol';\nimport { VTokenPosition } from './VTokenPosition.sol';\nimport { Uint32L8ArrayLib } from './Uint32L8Array.sol';\nimport { Protocol } from './Protocol.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title VToken position set functions\nlibrary VTokenPositionSet {\n    using AddressHelper for address;\n    using FullMath for uint256;\n    using SafeCast for uint256;\n    using SignedFullMath for int256;\n    using SignedMath for int256;\n    using Uint32L8ArrayLib for uint32[8];\n\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using Protocol for Protocol.Info;\n    using VTokenPosition for VTokenPosition.Info;\n    using VTokenPositionSet for VTokenPosition.Set;\n\n    error VPS_IncorrectUpdate();\n    error VPS_DeactivationFailed(uint32 poolId);\n    error VPS_TokenInactive(uint32 poolId);\n\n    /// @notice returns true if the set does not have any token position active\n    /// @param set VTokenPositionSet\n    /// @return _isEmpty\n    function isEmpty(VTokenPosition.Set storage set) internal view returns (bool _isEmpty) {\n        _isEmpty = set.active[0] == 0;\n    }\n\n    /// @notice returns true if range position is active for 'vToken'\n    /// @param set VTokenPositionSet\n    /// @param poolId poolId of the vToken\n    /// @param protocol platform constants\n    /// @return isRangeActive\n    function isTokenRangeActive(\n        VTokenPosition.Set storage set,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal returns (bool isRangeActive) {\n        VTokenPosition.Info storage vTokenPosition = set.getTokenPosition(poolId, false, protocol);\n        isRangeActive = !vTokenPosition.liquidityPositions.isEmpty();\n    }\n\n    /// @notice returns account market value of active positions\n    /// @param set VTokenPositionSet\n    /// @param protocol platform constants\n    /// @return accountMarketValue\n    function getAccountMarketValue(VTokenPosition.Set storage set, Protocol.Info storage protocol)\n        internal\n        view\n        returns (int256 accountMarketValue)\n    {\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 poolId = set.active[i];\n            if (poolId == 0) break;\n            // IVToken vToken = protocol[poolId].vToken;\n            VTokenPosition.Info storage position = set.positions[poolId];\n\n            //Value of token position for current vToken\n            accountMarketValue += position.marketValue(poolId, protocol);\n\n            uint160 sqrtPriceX96 = protocol.getVirtualTwapSqrtPriceX96(poolId);\n            //Value of all active range position for the current vToken\n            accountMarketValue += position.liquidityPositions.marketValue(sqrtPriceX96, poolId, protocol);\n        }\n\n        // Value of the vQuote token balance\n        accountMarketValue += set.vQuoteBalance;\n    }\n\n    /// @notice returns the max of two int256 numbers\n    /// @param a first number\n    /// @param b second number\n    /// @return c  = max of a and b\n    function max(int256 a, int256 b) internal pure returns (int256 c) {\n        if (a > b) c = a;\n        else c = b;\n    }\n\n    /// @notice returns notional value of the given token amount\n    /// @param poolId id of the rage trade pool\n    /// @param vTokenAmount amount of tokens\n    /// @param protocol platform constants\n    /// @return notionalAmountClosed for the given token and vQuote amounts\n    function getTokenNotionalValue(\n        uint32 poolId,\n        int256 vTokenAmount,\n        Protocol.Info storage protocol\n    ) internal view returns (uint256 notionalAmountClosed) {\n        notionalAmountClosed = vTokenAmount.absUint().mulDiv(\n            protocol.getVirtualTwapPriceX128(poolId),\n            FixedPoint128.Q128\n        );\n    }\n\n    /// @notice returns notional value of the given vQuote and token amounts\n    /// @param poolId id of the rage trade pool\n    /// @param vTokenAmount amount of tokens\n    /// @param vQuoteAmount amount of base\n    /// @param protocol platform constants\n    /// @return notionalAmountClosed for the given token and vQuote amounts\n    function getNotionalValue(\n        uint32 poolId,\n        int256 vTokenAmount,\n        int256 vQuoteAmount,\n        Protocol.Info storage protocol\n    ) internal view returns (uint256 notionalAmountClosed) {\n        notionalAmountClosed =\n            vTokenAmount.absUint().mulDiv(protocol.getVirtualTwapPriceX128(poolId), FixedPoint128.Q128) +\n            vQuoteAmount.absUint();\n    }\n\n    /// @notice returns the long and short side risk for range positions of a particular token\n    /// @param set VTokenPositionSet\n    /// @param isInitialMargin specifies to use initial margin factor (true) or maintainance margin factor (false)\n    /// @param poolId id of the rage trade pool\n    /// @param protocol platform constants\n    /// @return longSideRisk - risk if the token price goes down\n    /// @return shortSideRisk - risk if the token price goes up\n    function getLongShortSideRisk(\n        VTokenPosition.Set storage set,\n        bool isInitialMargin,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 longSideRisk, int256 shortSideRisk) {\n        VTokenPosition.Info storage position = set.positions[poolId];\n\n        uint256 price = protocol.getVirtualTwapPriceX128(poolId);\n        uint16 marginRatio = protocol.getMarginRatio(poolId, isInitialMargin);\n\n        int256 tokenPosition = position.balance;\n        int256 longSideRiskRanges = position.liquidityPositions.longSideRisk(poolId, protocol).toInt256();\n\n        longSideRisk = max(position.netTraderPosition.mulDiv(price, FixedPoint128.Q128) + longSideRiskRanges, 0).mulDiv(\n                marginRatio,\n                1e5\n            );\n\n        shortSideRisk = max(-tokenPosition, 0).mulDiv(price, FixedPoint128.Q128).mulDiv(marginRatio, 1e5);\n        return (longSideRisk, shortSideRisk);\n    }\n\n    /// @notice returns the long and short side risk for range positions of a particular token\n    /// @param set VTokenPositionSet\n    /// @param isInitialMargin specifies to use initial margin factor (true) or maintainance margin factor (false)\n    /// @param protocol platform constants\n    /// @return requiredMargin - required margin value based on the current active positions\n    function getRequiredMargin(\n        VTokenPosition.Set storage set,\n        bool isInitialMargin,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 requiredMargin) {\n        int256 longSideRiskTotal;\n        int256 shortSideRiskTotal;\n        int256 longSideRisk;\n        int256 shortSideRisk;\n        for (uint8 i = 0; i < set.active.length; i++) {\n            if (set.active[i] == 0) break;\n            uint32 poolId = set.active[i];\n            (longSideRisk, shortSideRisk) = set.getLongShortSideRisk(isInitialMargin, poolId, protocol);\n\n            if (protocol.isPoolCrossMargined(poolId)) {\n                longSideRiskTotal += longSideRisk;\n                shortSideRiskTotal += shortSideRisk;\n            } else {\n                requiredMargin += max(longSideRisk, shortSideRisk);\n            }\n        }\n\n        requiredMargin += max(longSideRiskTotal, shortSideRiskTotal);\n    }\n\n    /// @notice activates token with address 'vToken' if not already active\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    function activate(VTokenPosition.Set storage set, uint32 poolId) internal {\n        set.active.include(poolId);\n    }\n\n    /// @notice deactivates token with address 'vToken'\n    /// @dev ensures that the balance is 0 and there are not range positions active otherwise throws an error\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    function deactivate(VTokenPosition.Set storage set, uint32 poolId) internal {\n        if (set.positions[poolId].balance != 0 || !set.positions[poolId].liquidityPositions.isEmpty()) {\n            revert VPS_DeactivationFailed(poolId);\n        }\n\n        set.active.exclude(poolId);\n    }\n\n    /// @notice updates token balance, net trader position and vQuote balance\n    /// @dev realizes funding payment to vQuote balance\n    /// @dev activates the token if not already active\n    /// @dev deactivates the token if the balance = 0 and there are no range positions active\n    /// @dev IMP: ensure that the global states are updated using zeroSwap or directly through some interaction with pool wrapper\n    /// @param set VTokenPositionSet\n    /// @param balanceAdjustments platform constants\n    /// @param poolId id of the rage trade pool\n    /// @param accountId account identifier, used for emitting event\n    /// @param protocol platform constants\n    function update(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal {\n        set.realizeFundingPayment(accountId, poolId, protocol);\n        set.active.include(poolId);\n\n        VTokenPosition.Info storage _VTokenPosition = set.positions[poolId];\n        _VTokenPosition.balance += balanceAdjustments.vTokenIncrease;\n        _VTokenPosition.netTraderPosition += balanceAdjustments.traderPositionIncrease;\n\n        set.vQuoteBalance += balanceAdjustments.vQuoteIncrease;\n\n        if (_VTokenPosition.balance == 0 && _VTokenPosition.liquidityPositions.active[0] == 0) {\n            set.deactivate(poolId);\n        }\n    }\n\n    /// @notice realizes funding payment to vQuote balance\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param accountId account identifier, used for emitting event\n    /// @param protocol platform constants\n    function realizeFundingPayment(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal {\n        set.realizeFundingPayment(accountId, poolId, protocol.pools[poolId].vPoolWrapper, protocol);\n    }\n\n    /// @notice realizes funding payment to vQuote balance\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param accountId account identifier, used for emitting event\n    /// @param wrapper VPoolWrapper to override the set wrapper\n    /// @param protocol platform constants\n    function realizeFundingPayment(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IVPoolWrapper wrapper,\n        Protocol.Info storage protocol\n    ) internal {\n        VTokenPosition.Info storage position = set.positions[poolId];\n        int256 extrapolatedSumAX128 = wrapper.getSumAX128();\n\n        int256 fundingPayment = position.unrealizedFundingPayment(wrapper);\n        set.vQuoteBalance += fundingPayment;\n\n        position.sumAX128Chkpt = extrapolatedSumAX128;\n\n        emit Account.FundingPaymentRealized(accountId, poolId, 0, 0, fundingPayment);\n    }\n\n    /// @notice get or create token position\n    /// @dev activates inactive vToken if isCreateNew is true else reverts\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param createNew if 'vToken' is inactive then activates (true) else reverts with TokenInactive(false)\n    /// @param protocol platform constants\n    /// @return position - VTokenPosition corresponding to 'vToken'\n    function getTokenPosition(\n        VTokenPosition.Set storage set,\n        uint32 poolId,\n        bool createNew,\n        Protocol.Info storage protocol\n    ) internal returns (VTokenPosition.Info storage position) {\n        if (createNew) {\n            set.activate(poolId);\n        } else if (!set.active.exists(poolId)) {\n            revert VPS_TokenInactive(poolId);\n        }\n\n        position = set.positions[poolId];\n    }\n\n    /// @notice swaps tokens (Long and Short) with input in token amount / vQuote amount\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param swapParams parameters for swap\n    /// @param protocol platform constants\n    /// @return vTokenAmountOut - token amount coming out of pool\n    /// @return vQuoteAmountOut - vQuote amount coming out of pool\n    function swapToken(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IClearingHouseStructures.SwapParams memory swapParams,\n        Protocol.Info storage protocol\n    ) internal returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        return set.swapToken(accountId, poolId, swapParams, protocol.vPoolWrapper(poolId), protocol);\n    }\n\n    /// @notice swaps tokens (Long and Short) with input in token amount\n    /// @dev activates inactive vToe\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param vTokenAmount amount of the token\n    /// @param protocol platform constants\n    /// @return vTokenAmountOut - token amount coming out of pool\n    /// @return vQuoteAmountOut - vQuote amount coming out of pool\n    function swapTokenAmount(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        int256 vTokenAmount,\n        Protocol.Info storage protocol\n    ) internal returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        return\n            set.swapToken(\n                accountId,\n                poolId,\n                /// @dev 0 means no price limit and false means amount mentioned is token amount\n                IClearingHouseStructures.SwapParams(vTokenAmount, 0, false, false),\n                protocol.vPoolWrapper(poolId),\n                protocol\n            );\n    }\n\n    /// @notice swaps tokens (Long and Short) with input in token amount / vQuote amount\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param swapParams parameters for swap\n    /// @param wrapper VPoolWrapper to override the set wrapper\n    /// @param protocol platform constants\n    /// @return vTokenAmountOut - token amount coming out of pool\n    /// @return vQuoteAmountOut - vQuote amount coming out of pool\n    function swapToken(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IClearingHouseStructures.SwapParams memory swapParams,\n        IVPoolWrapper wrapper,\n        Protocol.Info storage protocol\n    ) internal returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        (vTokenAmountOut, vQuoteAmountOut) = wrapper.swap(\n            swapParams.amount < 0,\n            swapParams.isNotional ? swapParams.amount : -swapParams.amount,\n            swapParams.sqrtPriceLimit\n        );\n\n        // change direction basis uniswap to balance increase\n        vTokenAmountOut = -vTokenAmountOut;\n        vQuoteAmountOut = -vQuoteAmountOut;\n\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments = IClearingHouseStructures\n            .BalanceAdjustments(vQuoteAmountOut, vTokenAmountOut, vTokenAmountOut);\n\n        set.update(accountId, balanceAdjustments, poolId, protocol);\n\n        emit Account.TokenPositionChanged(accountId, poolId, vTokenAmountOut, vQuoteAmountOut);\n    }\n\n    /// @notice function to remove an eligible limit order\n    /// @dev checks whether the current price is on the correct side of the range based on the type of limit order (None, Low, High)\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param tickLower lower tick index for the range\n    /// @param tickUpper upper tick index for the range\n    /// @param protocol platform constants\n    function removeLimitOrder(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        Protocol.Info storage protocol\n    ) internal {\n        set.removeLimitOrder(accountId, poolId, tickLower, tickUpper, protocol.pools[poolId].vPoolWrapper, protocol);\n    }\n\n    /// @notice function for liquidity add/remove\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param liquidityChangeParams includes tickLower, tickUpper, liquidityDelta, limitOrderType\n    /// @return vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\n    /// @return vQuoteAmountOut amount of vQuote tokens that account received (positive) or paid (negative)\n    function liquidityChange(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams,\n        Protocol.Info storage protocol\n    ) internal returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        return\n            set.liquidityChange(\n                accountId,\n                poolId,\n                liquidityChangeParams,\n                protocol.pools[poolId].vPoolWrapper,\n                protocol\n            );\n    }\n\n    /// @notice function to liquidate all liquidity positions\n    /// @param set VTokenPositionSet\n    /// @param protocol platform constants\n    /// @return notionalAmountClosed - value of net token position coming out (in notional) of all the ranges closed\n    function liquidateLiquidityPositions(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        Protocol.Info storage protocol\n    ) internal returns (uint256 notionalAmountClosed) {\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 truncated = set.active[i];\n            if (truncated == 0) break;\n\n            notionalAmountClosed += set.liquidateLiquidityPositions(accountId, set.active[i], protocol);\n        }\n    }\n\n    /// @notice function to liquidate liquidity positions for a particular token\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param protocol platform constants\n    /// @return notionalAmountClosed - value of net token position coming out (in notional) of all the ranges closed\n    function liquidateLiquidityPositions(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal returns (uint256 notionalAmountClosed) {\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments;\n\n        set.getTokenPosition(poolId, false, protocol).liquidityPositions.closeAllLiquidityPositions(\n            accountId,\n            poolId,\n            balanceAdjustments,\n            protocol\n        );\n\n        set.update(accountId, balanceAdjustments, poolId, protocol);\n\n        //Returns notional value of token position closed\n        return getTokenNotionalValue(poolId, balanceAdjustments.traderPositionIncrease, protocol);\n    }\n\n    /// @notice function to liquidate all liquidity positions\n    /// @param set VTokenPositionSet\n    /// @param protocol platform constants\n    /// @return notionalAmountClosed - value of net token position coming out (in notional) of all the ranges closed\n    function liquidateLiquidityPositions(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        IVPoolWrapper wrapper,\n        Protocol.Info storage protocol\n    ) internal returns (uint256 notionalAmountClosed) {\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 truncated = set.active[i];\n            if (truncated == 0) break;\n\n            notionalAmountClosed += set.liquidateLiquidityPositions(accountId, set.active[i], protocol);\n        }\n    }\n\n    /// @notice function for liquidity add/remove\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param liquidityChangeParams includes tickLower, tickUpper, liquidityDelta, limitOrderType\n    /// @param wrapper VPoolWrapper to override the set wrapper\n    /// @return vTokenAmountOut amount of tokens that account received (positive) or paid (negative)\n    /// @return vQuoteAmountOut amount of vQuote tokens that account received (positive) or paid (negative)\n    function liquidityChange(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams,\n        IVPoolWrapper wrapper,\n        Protocol.Info storage protocol\n    ) internal returns (int256 vTokenAmountOut, int256 vQuoteAmountOut) {\n        VTokenPosition.Info storage vTokenPosition = set.getTokenPosition(poolId, true, protocol);\n\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments;\n\n        vTokenPosition.liquidityPositions.liquidityChange(\n            accountId,\n            poolId,\n            liquidityChangeParams,\n            balanceAdjustments,\n            protocol\n        );\n\n        set.update(accountId, balanceAdjustments, poolId, protocol);\n\n        if (liquidityChangeParams.closeTokenPosition) {\n            set.swapTokenAmount(accountId, poolId, -balanceAdjustments.traderPositionIncrease, protocol);\n        }\n\n        return (balanceAdjustments.vTokenIncrease, balanceAdjustments.vQuoteIncrease);\n    }\n\n    /// @notice function to remove an eligible limit order\n    /// @dev checks whether the current price is on the correct side of the range based on the type of limit order (None, Low, High)\n    /// @param set VTokenPositionSet\n    /// @param poolId id of the rage trade pool\n    /// @param tickLower lower tick index for the range\n    /// @param tickUpper upper tick index for the range\n    /// @param wrapper VPoolWrapper to override the set wrapper\n    /// @param protocol platform constants\n    function removeLimitOrder(\n        VTokenPosition.Set storage set,\n        uint256 accountId,\n        uint32 poolId,\n        int24 tickLower,\n        int24 tickUpper,\n        IVPoolWrapper wrapper,\n        Protocol.Info storage protocol\n    ) internal {\n        VTokenPosition.Info storage vTokenPosition = set.getTokenPosition(poolId, false, protocol);\n\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments;\n        int24 currentTick = protocol.getVirtualCurrentTick(poolId);\n\n        vTokenPosition.liquidityPositions.removeLimitOrder(\n            accountId,\n            poolId,\n            currentTick,\n            tickLower,\n            tickUpper,\n            balanceAdjustments,\n            protocol\n        );\n\n        set.update(accountId, balanceAdjustments, poolId, protocol);\n    }\n\n    function getInfo(VTokenPosition.Set storage set, Protocol.Info storage protocol)\n        internal\n        view\n        returns (int256 vQuoteBalance, IClearingHouseStructures.VTokenPositionView[] memory vTokenPositions)\n    {\n        vQuoteBalance = set.vQuoteBalance;\n\n        uint256 numberOfTokenPositions = set.active.numberOfNonZeroElements();\n        vTokenPositions = new IClearingHouseStructures.VTokenPositionView[](numberOfTokenPositions);\n\n        for (uint256 i = 0; i < numberOfTokenPositions; i++) {\n            vTokenPositions[i].vToken = protocol.pools[set.active[i]].vToken;\n            vTokenPositions[i].balance = set.positions[set.active[i]].balance;\n            vTokenPositions[i].netTraderPosition = set.positions[set.active[i]].netTraderPosition;\n            vTokenPositions[i].sumAX128Chkpt = set.positions[set.active[i]].sumAX128Chkpt;\n            vTokenPositions[i].liquidityPositions = set.positions[set.active[i]].liquidityPositions.getInfo();\n        }\n    }\n\n    function getNetPosition(\n        VTokenPosition.Set storage set,\n        uint32 poolId,\n        Protocol.Info storage protocol\n    ) internal view returns (int256 netPosition) {\n        if (!set.active.exists(poolId)) return 0;\n        VTokenPosition.Info storage tokenPosition = set.positions[poolId];\n        return tokenPosition.getNetPosition(poolId, protocol);\n    }\n}\n"
    },
    "contracts/libraries/Uint32L8Array.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title Uint32 length 8 array functions\n/// @dev Fits in one storage slot\nlibrary Uint32L8ArrayLib {\n    using Uint32L8ArrayLib for uint32[8];\n\n    error U32L8_IllegalElement(uint32 element);\n    error U32L8_NoSpaceLeftToInsert(uint32 element);\n\n    function include(uint32[8] storage array, uint32 element) internal {\n        if (element == 0) {\n            revert U32L8_IllegalElement(0);\n        }\n\n        uint256 emptyIndex = 8; // max index is 7\n        for (uint256 i; i < 8; i++) {\n            if (array[i] == element) {\n                return;\n            }\n            if (emptyIndex == 8 && array[i] == uint32(0)) {\n                emptyIndex = i;\n                break;\n            }\n        }\n\n        if (emptyIndex == 8) {\n            revert U32L8_NoSpaceLeftToInsert(element);\n        }\n\n        array[emptyIndex] = element;\n    }\n\n    function exclude(uint32[8] storage array, uint32 element) internal {\n        if (element == 0) {\n            revert U32L8_IllegalElement(0);\n        }\n\n        uint256 elementIndex = 8;\n        uint256 i;\n\n        for (; i < 8; i++) {\n            if (array[i] == element) {\n                elementIndex = i;\n            }\n            if (array[i] == 0) {\n                i = i > 0 ? i - 1 : 0; // last non-zero element\n                break;\n            }\n        }\n\n        i = i == 8 ? 7 : i;\n\n        if (elementIndex != 8) {\n            if (i == elementIndex) {\n                array[elementIndex] = 0;\n            } else {\n                // move last to element's place and empty lastIndex slot\n                (array[elementIndex], array[i]) = (array[i], 0);\n            }\n        }\n    }\n\n    function indexOf(uint32[8] storage array, uint32 element) internal view returns (uint8) {\n        for (uint8 i; i < 8; i++) {\n            if (array[i] == element) {\n                return i;\n            }\n        }\n        return 255;\n    }\n\n    function exists(uint32[8] storage array, uint32 element) internal view returns (bool) {\n        return array.indexOf(element) != 255;\n    }\n\n    function numberOfNonZeroElements(uint32[8] storage array) internal view returns (uint256) {\n        for (uint8 i; i < 8; i++) {\n            if (array[i] == 0) {\n                return i;\n            }\n        }\n        return 8;\n    }\n}\n"
    },
    "contracts/libraries/Uint48.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title Uint48 concating functions\nlibrary Uint48Lib {\n    /// @notice Packs two int24 values into uint48\n    /// @dev Used for concating two ticks into 48 bits value\n    function concat(int24 val1, int24 val2) internal pure returns (uint48 concatenated) {\n        assembly {\n            concatenated := add(shl(24, val1), and(val2, 0x000000ffffff))\n        }\n    }\n\n    /// @notice Unpacks uint48 into two int24 values\n    function unconcat(uint48 concatenated) internal pure returns (int24 val1, int24 val2) {\n        assembly {\n            val2 := concatenated\n            val1 := shr(24, concatenated)\n        }\n    }\n}\n"
    },
    "contracts/libraries/Uint48L5Array.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/// @title Uint48 length 5 array functions\n/// @dev Fits in one storage slot\nlibrary Uint48L5ArrayLib {\n    using Uint48L5ArrayLib for uint48[5];\n\n    error U48L5_IllegalElement(uint48 element);\n    error U48L5_NoSpaceLeftToInsert(uint48 element);\n\n    function include(uint48[5] storage array, uint48 element) internal {\n        if (element == 0) {\n            revert U48L5_IllegalElement(0);\n        }\n        uint256 emptyIndex = 5; // max index is 4\n        for (uint256 i; i < 5; i++) {\n            if (array[i] == element) {\n                return;\n            }\n            if (emptyIndex == 5 && array[i] == uint48(0)) {\n                emptyIndex = i;\n            }\n        }\n\n        if (emptyIndex == 5) {\n            revert U48L5_NoSpaceLeftToInsert(element);\n        }\n\n        array[emptyIndex] = element;\n    }\n\n    function exclude(uint48[5] storage array, uint48 element) internal {\n        if (element == 0) {\n            revert U48L5_IllegalElement(0);\n        }\n\n        uint256 elementIndex = 5;\n        uint256 i;\n\n        for (; i < 5; i++) {\n            if (array[i] == element) {\n                elementIndex = i;\n            }\n            if (array[i] == 0) {\n                i = i > 0 ? i - 1 : 0; // last non-zero element\n                break;\n            }\n        }\n\n        if (elementIndex != 5) {\n            if (i == elementIndex) {\n                array[elementIndex] = 0;\n            } else {\n                // move last to element's place and empty lastIndex slot\n                (array[elementIndex], array[i]) = (array[i], 0);\n            }\n        }\n    }\n\n    function indexOf(uint48[5] storage array, uint48 element) internal view returns (uint8) {\n        for (uint8 i; i < 5; i++) {\n            if (array[i] == element) {\n                return i;\n            }\n        }\n        return 255;\n    }\n\n    function exists(uint48[5] storage array, uint48 element) internal view returns (bool) {\n        return array.indexOf(element) != 255;\n    }\n\n    function numberOfNonZeroElements(uint48[5] storage array) internal view returns (uint256) {\n        for (uint8 i; i < 5; i++) {\n            if (array[i] == 0) {\n                return i;\n            }\n        }\n        return 5;\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0;\n\nimport './LowGasSafeMath.sol';\nimport './SafeCast.sol';\n\nimport './FullMath.sol';\nimport './UnsafeMath.sol';\nimport './FixedPoint96.sol';\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n    using LowGasSafeMath for uint256;\n    using SafeCast for uint256;\n\n    /// @notice Gets the next sqrt price given a delta of token0\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token0 to add or remove from virtual reserves\n    /// @param add Whether to add or remove the amount of token0\n    /// @return The price after adding or removing amount, depending on add\n    function getNextSqrtPriceFromAmount0RoundingUp(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        unchecked {\n            // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n            if (amount == 0) return sqrtPX96;\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n            if (add) {\n                uint256 product;\n                if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n                    uint256 denominator = numerator1 + product;\n                    if (denominator >= numerator1)\n                        // always fits in 160 bits\n                        return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n                }\n\n                return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n            } else {\n                uint256 product;\n                // if the product overflows, we know the denominator underflows\n                // in addition, we must check that the denominator does not underflow\n                require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n                uint256 denominator = numerator1 - product;\n                return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given a delta of token1\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n    /// price less in order to not send too much output.\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n    /// @param liquidity The amount of usable liquidity\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\n    /// @param add Whether to add, or remove, the amount of token1\n    /// @return The price after adding or removing `amount`\n    function getNextSqrtPriceFromAmount1RoundingDown(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amount,\n        bool add\n    ) internal pure returns (uint160) {\n        unchecked {\n            // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n            // in both cases, avoid a mulDiv for most inputs\n            if (add) {\n                uint256 quotient =\n                    (\n                        amount <= type(uint160).max\n                            ? (amount << FixedPoint96.RESOLUTION) / liquidity\n                            : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n                    );\n\n                return uint256(sqrtPX96).add(quotient).toUint160();\n            } else {\n                uint256 quotient =\n                    (\n                        amount <= type(uint160).max\n                            ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n                            : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n                    );\n\n                require(sqrtPX96 > quotient);\n                // always fits 160 bits\n                return uint160(sqrtPX96 - quotient);\n            }\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountIn How much of token0, or token1, is being swapped in\n    /// @param zeroForOne Whether the amount in is token0 or token1\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n    function getNextSqrtPriceFromInput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountIn,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        unchecked {\n            require(sqrtPX96 > 0);\n            require(liquidity > 0);\n\n            // round to make sure that we don't pass the target price\n            return\n                zeroForOne\n                    ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n                    : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n        }\n    }\n\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n    /// @param sqrtPX96 The starting price before accounting for the output amount\n    /// @param liquidity The amount of usable liquidity\n    /// @param amountOut How much of token0, or token1, is being swapped out\n    /// @param zeroForOne Whether the amount out is token0 or token1\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n    function getNextSqrtPriceFromOutput(\n        uint160 sqrtPX96,\n        uint128 liquidity,\n        uint256 amountOut,\n        bool zeroForOne\n    ) internal pure returns (uint160 sqrtQX96) {\n        unchecked {\n            require(sqrtPX96 > 0);\n            require(liquidity > 0);\n\n            // round to make sure that we pass the target price\n            return\n                zeroForOne\n                    ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n                    : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n        }\n    }\n\n    /// @notice Gets the amount0 delta between two prices\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up or down\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount0) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n            uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n            require(sqrtRatioAX96 > 0);\n\n            return\n                roundUp\n                    ? UnsafeMath.divRoundingUp(\n                        FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n                        sqrtRatioAX96\n                    )\n                    : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n        }\n    }\n\n    /// @notice Gets the amount1 delta between two prices\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The amount of usable liquidity\n    /// @param roundUp Whether to round the amount up, or down\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity,\n        bool roundUp\n    ) internal pure returns (uint256 amount1) {\n        unchecked {\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n            return\n                roundUp\n                    ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n                    : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n        }\n    }\n\n    /// @notice Helper that gets signed token0 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n    function getAmount0Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount0) {\n        unchecked {\n            return\n                liquidity < 0\n                    ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                    : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n\n    /// @notice Helper that gets signed token1 delta\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n    function getAmount1Delta(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        int128 liquidity\n    ) internal pure returns (int256 amount1) {\n        unchecked {\n            return\n                liquidity < 0\n                    ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n                    : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            require(absTick <= uint256(uint24(MAX_TICK)), 'T');\n\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {     \n            // second inequality must be < because the price can never reach the price at the max tick\n            require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/libraries/PriceMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\n\nimport { Bisection } from './Bisection.sol';\n\n/// @title Price math functions\nlibrary PriceMath {\n    using FullMath for uint256;\n\n    error IllegalSqrtPrice(uint160 sqrtPriceX96);\n\n    /// @notice Computes the square of a sqrtPriceX96 value\n    /// @param sqrtPriceX96: input price in Q128 format\n    /// @return priceX128 : the square root of the input price in Q96 format\n    function toPriceX128(uint160 sqrtPriceX96) internal pure returns (uint256 priceX128) {\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\n            revert IllegalSqrtPrice(sqrtPriceX96);\n        }\n\n        priceX128 = _toPriceX128(sqrtPriceX96);\n    }\n\n    function _toPriceX128(uint160 sqrtPriceX96) private pure returns (uint256 priceX128) {\n        priceX128 = uint256(sqrtPriceX96).mulDiv(sqrtPriceX96, 1 << 64);\n    }\n\n    /// @notice Computes the square root of a priceX128 value\n    /// @param priceX128: input price in Q128 format\n    /// @return sqrtPriceX96 : the square root of the input price in Q96 format\n    function toSqrtPriceX96(uint256 priceX128) internal pure returns (uint160 sqrtPriceX96) {\n        // Uses bisection method to find solution to the equation toPriceX128(x) = priceX128\n        sqrtPriceX96 = Bisection.findSolution(\n            _toPriceX128,\n            priceX128,\n            TickMath.MIN_SQRT_RATIO,\n            TickMath.MAX_SQRT_RATIO - 1\n        );\n\n        if (sqrtPriceX96 < TickMath.MIN_SQRT_RATIO || sqrtPriceX96 >= TickMath.MAX_SQRT_RATIO) {\n            revert IllegalSqrtPrice(sqrtPriceX96);\n        }\n    }\n}\n"
    },
    "contracts/libraries/UniswapV3PoolHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { PriceMath } from './PriceMath.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title UniswapV3Pool helper functions\nlibrary UniswapV3PoolHelper {\n    using PriceMath for uint160;\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n\n    error UV3PH_IllegalTwapDuration(uint32 period);\n    error UV3PH_OracleConsultFailed();\n\n    function tickCurrent(IUniswapV3Pool v3Pool) internal view returns (int24 tick) {\n        (, tick, , , , , ) = v3Pool.slot0();\n    }\n\n    function sqrtPriceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint160 sqrtPriceX96) {\n        int24 tick;\n        (sqrtPriceX96, tick, , , , , ) = v3Pool.slot0();\n        // TODO remove this logic, fix the tests to make it work without the logic.\n        // Sqrt price cannot be zero, unless the pool is uninitialized.\n        // This is a hack to make the tests pass.\n        if (sqrtPriceX96 == 0) {\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(tick);\n        }\n    }\n\n    function priceCurrent(IUniswapV3Pool v3Pool) internal view returns (uint256 priceX128) {\n        uint160 sqrtPriceX96 = v3Pool.sqrtPriceCurrent();\n        return sqrtPriceX96.toPriceX128();\n    }\n\n    function twapSqrtPrice(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (uint160 sqrtPriceX96) {\n        int24 _twapTick = pool.twapTick(twapDuration);\n        sqrtPriceX96 = TickMath.getSqrtRatioAtTick(_twapTick);\n    }\n\n    function twapTick(IUniswapV3Pool pool, uint32 twapDuration) internal view returns (int24 _twapTick) {\n        if (twapDuration == 0) {\n            revert UV3PH_IllegalTwapDuration(0);\n        }\n\n        uint32[] memory secondAgos = new uint32[](2);\n        secondAgos[0] = twapDuration;\n        secondAgos[1] = 0;\n\n        // this call will fail if period is bigger than MaxObservationPeriod\n        try pool.observe(secondAgos) returns (int56[] memory tickCumulatives, uint160[] memory) {\n            int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n            int24 timeWeightedAverageTick = int24(tickCumulativesDelta / int56(uint56(twapDuration)));\n\n            // Always round to negative infinity\n            if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56(uint56(twapDuration)) != 0)) {\n                timeWeightedAverageTick--;\n            }\n            return timeWeightedAverageTick;\n        } catch {\n            (, _twapTick, , , , , ) = pool.slot0();\n        }\n    }\n}\n"
    },
    "contracts/libraries/FundingPayment.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SignedFullMath } from './SignedFullMath.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Funding payment functions\n/// @notice Funding Payment Logic used to distribute the FP bill paid by traders among the LPs in the liquidity range\nlibrary FundingPayment {\n    using FullMath for uint256;\n    using SignedFullMath for int256;\n\n    struct Info {\n        // FR * P * dt\n        int256 sumAX128;\n        // trade token amount / liqidity\n        int256 sumBX128;\n        // sum(a * sumB)\n        int256 sumFpX128;\n        // time when state was last updated\n        uint48 timestampLast;\n    }\n\n    event FundingPaymentStateUpdated(FundingPayment.Info fundingPayment);\n\n    function update(\n        Info storage info,\n        int256 vTokenAmount,\n        uint256 liquidity,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) internal {\n        int256 a = nextAX128(info.timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\n        info.sumFpX128 += a.mulDivRoundingDown(info.sumBX128, int256(FixedPoint128.Q128));\n        info.sumAX128 += a;\n        info.sumBX128 += vTokenAmount.mulDiv(int256(FixedPoint128.Q128), int256(liquidity));\n        info.timestampLast = blockTimestamp;\n\n        emit FundingPaymentStateUpdated(info);\n    }\n\n    /// @notice Positive A value means at this duration, longs pay shorts. Negative means shorts pay longs.\n    /// @param timestampLast start timestamp of duration\n    /// @param blockTimestamp end timestamp of duration\n    /// @param realPriceX128 spot price of token, used to calculate funding rate\n    /// @param virtualPriceX128 futures price of token, used to calculate funding rate\n    /// @return aX128 value called \"a\" (see funding payment math documentation)\n    function nextAX128(\n        uint48 timestampLast,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) internal pure returns (int256 aX128) {\n        return\n            (int256(realPriceX128) - int256(virtualPriceX128)).mulDiv(virtualPriceX128, realPriceX128).mulDiv(\n                blockTimestamp - timestampLast,\n                1 days\n            );\n    }\n\n    function extrapolatedSumAX128(\n        int256 sumAX128,\n        uint48 timestampLast,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) internal pure returns (int256) {\n        return sumAX128 + nextAX128(timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\n    }\n\n    /// @notice Extrapolates (updates) the value of sumFp by adding the missing component to it using sumAGlobalX128\n    /// @param sumAX128 sumA value that is recorded from global at some point in time\n    /// @param sumBX128 sumB value that is recorded from global at same point in time as sumA\n    /// @param sumFpX128 sumFp value that is recorded from global at same point in time as sumA and sumB\n    /// @param sumAGlobalX128 latest sumA value (taken from global), used to extrapolate the sumFp\n    function extrapolatedSumFpX128(\n        int256 sumAX128,\n        int256 sumBX128,\n        int256 sumFpX128,\n        int256 sumAGlobalX128\n    ) internal pure returns (int256) {\n        return sumFpX128 + sumBX128.mulDiv(sumAGlobalX128 - sumAX128, int256(FixedPoint128.Q128));\n    }\n\n    /// @notice Positive bill is rewarded to LPs, Negative bill is charged from LPs\n    /// @param sumAX128 latest value of sumA (to be taken from global state)\n    /// @param sumFpInsideX128 latest value of sumFp inside range (to be computed using global state + tick state)\n    /// @param sumAChkptX128 value of sumA when LP updated their liquidity last time\n    /// @param sumBInsideChkptX128 value of sumB inside range when LP updated their liquidity last time\n    /// @param sumFpInsideChkptX128 value of sumFp inside range when LP updated their liquidity last time\n    /// @param liquidity amount of liquidity which was constant for LP in the time duration\n    function bill(\n        int256 sumAX128,\n        int256 sumFpInsideX128,\n        int256 sumAChkptX128,\n        int256 sumBInsideChkptX128,\n        int256 sumFpInsideChkptX128,\n        uint256 liquidity\n    ) internal pure returns (int256) {\n        return\n            (sumFpInsideX128 -\n                extrapolatedSumFpX128(sumAChkptX128, sumBInsideChkptX128, sumFpInsideChkptX128, sumAX128))\n                .mulDivRoundingDown(liquidity, FixedPoint128.Q128);\n    }\n\n    /// @notice Positive bill is rewarded to Traders, Negative bill is charged from Traders\n    /// @param sumAX128 latest value of sumA (to be taken from global state)\n    /// @param sumAChkptX128 value of sumA when trader updated their netTraderPosition\n    /// @param netTraderPosition oken amount which should be constant for time duration since sumAChkptX128 was recorded\n    function bill(\n        int256 sumAX128,\n        int256 sumAChkptX128,\n        int256 netTraderPosition\n    ) internal pure returns (int256) {\n        return netTraderPosition.mulDiv((sumAX128 - sumAChkptX128), int256(FixedPoint128.Q128));\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n    /// @notice Returns x + y, reverts if sum overflows uint256\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        unchecked {\n            require((z = x + y) >= x);\n        }\n    }\n\n    /// @notice Returns x - y, reverts if underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        unchecked {\n            require((z = x - y) <= x);\n        }\n    }\n\n    /// @notice Returns x * y, reverts if overflows\n    /// @param x The multiplicand\n    /// @param y The multiplier\n    /// @return z The product of x and y\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        unchecked {\n            require(x == 0 || (z = x * y) / x == y);\n        }\n    }\n\n    /// @notice Returns x + y, reverts if overflows or underflows\n    /// @param x The augend\n    /// @param y The addend\n    /// @return z The sum of x and y\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\n        unchecked {\n            require((z = x + y) >= x == (y >= 0));\n        }\n    }\n\n    /// @notice Returns x - y, reverts if overflows or underflows\n    /// @param x The minuend\n    /// @param y The subtrahend\n    /// @return z The difference of x and y\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\n        unchecked {\n            require((z = x - y) <= x == (y >= 0));\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n    /// @notice Returns ceil(x / y)\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\n    /// @param x The dividend\n    /// @param y The divisor\n    /// @return z The quotient, ceil(x / y)\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        assembly {\n            z := add(div(x, y), gt(mod(x, y), 0))\n        }\n    }\n}\n"
    },
    "contracts/libraries/Bisection.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Bisection Method\n/// @notice https://en.wikipedia.org/wiki/Bisection_method\nlibrary Bisection {\n    error SolutionOutOfBounds(uint256 y_target, uint160 x_lower, uint160 x_upper);\n\n    /// @notice Finds the solution to the equation f(x) = y_target using the bisection method\n    /// @param f: strictly increasing function f: uint160 -> uint256\n    /// @param y_target: the target value of f(x)\n    /// @param x_lower: the lower bound for x\n    /// @param x_upper: the upper bound for x\n    /// @return x_target: the rounded down solution to the equation f(x) = y_target\n    function findSolution(\n        function(uint160) pure returns (uint256) f,\n        uint256 y_target,\n        uint160 x_lower,\n        uint160 x_upper\n    ) internal pure returns (uint160) {\n        // compute y at the bounds\n        uint256 y_lower = f(x_lower);\n        uint256 y_upper = f(x_upper);\n\n        // if y is out of the bounds then revert\n        if (y_target < y_lower || y_target > y_upper) revert SolutionOutOfBounds(y_target, x_lower, x_upper);\n\n        // bisect repeatedly until the solution is within an error of 1 unit\n        uint256 y_mid;\n        uint160 x_mid;\n        while (x_upper - x_lower > 1) {\n            x_mid = x_lower + (x_upper - x_lower) / 2;\n            y_mid = f(x_mid);\n            if (y_mid > y_target) {\n                x_upper = x_mid;\n                y_upper = y_mid;\n            } else {\n                x_lower = x_mid;\n                y_lower = y_mid;\n            }\n        }\n\n        // at this point, x_upper - x_lower is either 0 or 1\n        // if it is 1 then check if x_upper is the solution, else return x_lower as the rounded down solution\n        return x_lower != x_upper && f(x_upper) == y_target ? x_upper : x_lower;\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n    /// @param data The encoded function data for each of the calls to make to this contract\n    /// @return results The results from each of the calls passed in via data\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
    },
    "contracts/protocol/clearinghouse/ClearingHouseStorage.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport { Account } from '../../libraries/Account.sol';\nimport { Protocol } from '../../libraries/Protocol.sol';\n\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\nimport { IOracle } from '../../interfaces/IOracle.sol';\nimport { IOracle } from '../../interfaces/IOracle.sol';\n\nabstract contract ClearingHouseStorage {\n    // rest slots reserved for any states from inheritance in future\n    uint256[100] private _emptySlots1;\n\n    // at slot # 100\n    Protocol.Info internal protocol;\n\n    uint256 public numAccounts;\n    mapping(uint256 => Account.Info) accounts;\n\n    address public rageTradeFactoryAddress;\n    IInsuranceFund public insuranceFund;\n\n    // Oracle for the chain's native currency in terms of settlementToken\n    // Used to provide gas refund in settlementToken to the liquidators\n    IOracle public nativeOracle;\n\n    // reserved for adding slots in future\n    uint256[100] private _emptySlots2;\n}\n"
    },
    "contracts/utils/Extsload.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\n/// @notice Allows the contract to make it's state public\nabstract contract Extsload {\n    function extsload(bytes32 slot) external view returns (bytes32 val) {\n        assembly {\n            val := sload(slot)\n        }\n    }\n\n    function extsload(bytes32[] memory slots) external view returns (bytes32[] memory) {\n        assembly {\n            let end := add(0x20, add(slots, mul(mload(slots), 0x20)))\n            for {\n                let pointer := add(slots, 32)\n            } lt(pointer, end) {\n\n            } {\n                let value := sload(mload(pointer))\n                mstore(pointer, value)\n                pointer := add(pointer, 0x20)\n            }\n        }\n\n        return slots;\n    }\n}\n"
    },
    "contracts/test/mocks/ClearingHouseDummy.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { ClearingHouse } from '../../protocol/clearinghouse/ClearingHouse.sol';\n\ncontract ClearingHouseDummy is ClearingHouse {\n    // just to test upgradibility\n    function newMethodAdded() public pure returns (uint256) {\n        return 1234567890;\n    }\n}\n"
    },
    "contracts/test/ClearingHouseTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Account } from '../libraries/Account.sol';\nimport { CollateralDeposit } from '../libraries/CollateralDeposit.sol';\nimport { LiquidityPositionSet } from '../libraries/LiquidityPositionSet.sol';\nimport { VTokenPositionSet } from '../libraries/VTokenPositionSet.sol';\nimport { LiquidityPosition } from '../libraries/LiquidityPosition.sol';\nimport { VTokenPosition } from '../libraries/VTokenPosition.sol';\nimport { SignedFullMath } from '../libraries/SignedFullMath.sol';\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { Protocol } from '../libraries/Protocol.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IClearingHouseEnums } from '../interfaces/clearinghouse/IClearingHouseEnums.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { ClearingHouse } from '../protocol/clearinghouse/ClearingHouse.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract ClearingHouseTest is ClearingHouse {\n    using AddressHelper for address;\n    using AddressHelper for IVToken;\n    using SignedFullMath for int256;\n\n    using Account for Account.Info;\n    using CollateralDeposit for CollateralDeposit.Set;\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using LiquidityPosition for LiquidityPosition.Info;\n    using Protocol for Protocol.Info;\n    using VTokenPositionSet for VTokenPosition.Set;\n    using VTokenPosition for VTokenPosition.Info;\n\n    uint256 public fixFee;\n\n    function setFixFee(uint256 _fixFee) external {\n        fixFee = _fixFee;\n    }\n\n    function _getFixFee(uint256) internal view override returns (uint256) {\n        return fixFee;\n    }\n\n    function getTruncatedTokenAddress(IVToken vToken) external pure returns (uint32) {\n        return vToken.truncate();\n    }\n\n    function cleanPositions(uint256 accountId) external {\n        VTokenPosition.Set storage set = accounts[accountId].tokenPositions;\n        VTokenPosition.Info storage tokenPosition;\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments;\n\n        set.vQuoteBalance = 0;\n\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 poolId = set.active[i];\n            if (poolId == 0) break;\n            tokenPosition = set.positions[poolId];\n            balanceAdjustments = IClearingHouseStructures.BalanceAdjustments(\n                0,\n                -tokenPosition.balance,\n                -tokenPosition.netTraderPosition\n            );\n            set.update(accountId, balanceAdjustments, poolId, protocol);\n        }\n    }\n\n    function cleanDeposits(uint256 accountId) external {\n        accounts[accountId].tokenPositions.liquidateLiquidityPositions(accountId, protocol);\n\n        CollateralDeposit.Set storage set = accounts[accountId].collateralDeposits;\n        uint256 deposit;\n\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 collateralId = set.active[i];\n            if (collateralId == 0) break;\n            deposit = set.deposits[collateralId];\n            set.decreaseBalance(collateralId, deposit);\n        }\n    }\n\n    function getTokenAddressInVTokens(IVToken vToken) external view returns (IVToken vTokenInIVTokenes) {\n        return protocol.pools[vToken.truncate()].vToken;\n    }\n\n    function getAccountOwner(uint256 accountId) external view returns (address owner) {\n        return accounts[accountId].owner;\n    }\n\n    // function getAccountNumInTokenPositionSet(uint256 accountId) external view returns (uint256 accountIdInTokenSet) {\n    //     return accounts[accountId].tokenPositions.accountId;\n    // }\n\n    function getAccountDepositBalance(uint256 accountId, IVToken vToken) external view returns (uint256 balance) {\n        balance = accounts[accountId].collateralDeposits.deposits[vToken.truncate()];\n    }\n\n    function getAccountOpenTokenPosition(uint256 accountId, IVToken vToken)\n        external\n        view\n        returns (int256 balance, int256 netTraderPosition)\n    {\n        VTokenPosition.Info storage vTokenPosition = accounts[accountId].tokenPositions.positions[vToken.truncate()];\n        balance = vTokenPosition.balance;\n        netTraderPosition = vTokenPosition.netTraderPosition;\n    }\n\n    function getAccountQuoteBalance(uint256 accountId) external view returns (int256 balance) {\n        return accounts[accountId].tokenPositions.vQuoteBalance;\n    }\n\n    function getAccountLiquidityPositionNum(uint256 accountId, address vToken) external view returns (uint8 num) {\n        LiquidityPosition.Set storage liquidityPositionSet = accounts[accountId]\n            .tokenPositions\n            .positions[vToken.truncate()]\n            .liquidityPositions;\n\n        for (num = 0; num < liquidityPositionSet.active.length; num++) {\n            if (liquidityPositionSet.active[num] == 0) break;\n        }\n    }\n\n    function getAccountTokenPositionFunding(uint256 accountId, IVToken vToken)\n        external\n        view\n        returns (int256 fundingPayment)\n    {\n        VTokenPosition.Info storage vTokenPosition = accounts[accountId].tokenPositions.positions[vToken.truncate()];\n\n        IVPoolWrapper wrapper = protocol.vPoolWrapper(vToken.truncate());\n\n        fundingPayment = vTokenPosition.unrealizedFundingPayment(wrapper);\n    }\n\n    function getAccountLiquidityPositionFundingAndFee(\n        uint256 accountId,\n        address vToken,\n        uint8 num\n    ) external view returns (int256 fundingPayment, uint256 unrealizedLiquidityFee) {\n        LiquidityPosition.Set storage liquidityPositionSet = accounts[accountId]\n            .tokenPositions\n            .positions[vToken.truncate()]\n            .liquidityPositions;\n        LiquidityPosition.Info storage liquidityPosition = liquidityPositionSet.positions[\n            liquidityPositionSet.active[num]\n        ];\n\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = protocol\n            .vPoolWrapper(vToken.truncate())\n            .getExtrapolatedValuesInside(liquidityPosition.tickLower, liquidityPosition.tickUpper);\n\n        fundingPayment = liquidityPosition.unrealizedFundingPayment(\n            wrapperValuesInside.sumAX128,\n            wrapperValuesInside.sumFpInsideX128\n        );\n\n        unrealizedLiquidityFee = liquidityPosition.unrealizedFees(wrapperValuesInside.sumFeeInsideX128);\n    }\n\n    function getAccountLiquidityPositionDetails(\n        uint256 accountId,\n        address vToken,\n        uint8 num\n    )\n        external\n        view\n        returns (\n            int24 tickLower,\n            int24 tickUpper,\n            IClearingHouseEnums.LimitOrderType limitOrderType,\n            uint128 liquidity,\n            int256 sumALastX128,\n            int256 sumBInsideLastX128,\n            int256 sumFpInsideLastX128,\n            uint256 sumFeeInsideLastX128\n        )\n    {\n        LiquidityPosition.Set storage liquidityPositionSet = accounts[accountId]\n            .tokenPositions\n            .positions[vToken.truncate()]\n            .liquidityPositions;\n        LiquidityPosition.Info storage liquidityPosition = liquidityPositionSet.positions[\n            liquidityPositionSet.active[num]\n        ];\n\n        return (\n            liquidityPosition.tickLower,\n            liquidityPosition.tickUpper,\n            liquidityPosition.limitOrderType,\n            liquidityPosition.liquidity,\n            liquidityPosition.sumALastX128,\n            liquidityPosition.sumBInsideLastX128,\n            liquidityPosition.sumFpInsideLastX128,\n            liquidityPosition.sumFeeInsideLastX128\n        );\n    }\n\n    function getAccountValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\n        external\n        view\n        returns (int256 accountMarketValue, int256 requiredMargin)\n    {\n        return accounts[accountId].getAccountValueAndRequiredMargin(isInitialMargin, protocol);\n    }\n}\n"
    },
    "contracts/test/Uint48Test.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Uint48Lib } from '../libraries/Uint48.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract Uint48Test {\n    function assertConcat(int24 val1, int24 val2) external pure returns (uint48 concatenated) {\n        concatenated = concat(val1, val2);\n        (int24 val1_, int24 val2_) = Uint48Lib.unconcat(concatenated);\n        assert(val1_ == val1);\n        assert(val2_ == val2);\n    }\n\n    function concat(int24 val1, int24 val2) public pure returns (uint48 concatenated) {\n        concatenated = Uint48Lib.concat(val1, val2);\n    }\n}\n"
    },
    "contracts/test/VTokenPositionSetTest2.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Account } from '../libraries/Account.sol';\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { LiquidityPosition } from '../libraries/LiquidityPosition.sol';\nimport { LiquidityPositionSet } from '../libraries/LiquidityPositionSet.sol';\nimport { VTokenPosition } from '../libraries/VTokenPosition.sol';\nimport { VTokenPositionSet } from '../libraries/VTokenPositionSet.sol';\nimport { Uint32L8ArrayLib } from '../libraries/Uint32L8Array.sol';\n\nimport { IVToken } from '../interfaces/IVToken.sol';\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { AccountProtocolInfoMock } from './mocks/AccountProtocolInfoMock.sol';\n\ncontract VTokenPositionSetTest2 is AccountProtocolInfoMock {\n    using Uint32L8ArrayLib for uint32[8];\n    using AddressHelper for address;\n    using AddressHelper for IVToken;\n\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using VTokenPositionSet for VTokenPosition.Set;\n\n    VTokenPosition.Set dummy;\n\n    uint256 accountId = 123;\n\n    function init(IVToken vToken) external {\n        dummy.activate(vToken.truncate());\n        protocol.pools[vToken.truncate()].vToken = vToken;\n    }\n\n    function update(IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments, IVToken vToken) external {\n        dummy.update(accountId, balanceAdjustments, vToken.truncate(), protocol);\n    }\n\n    function swap(IVToken vToken, IClearingHouseStructures.SwapParams memory swapParams) external {\n        dummy.swapToken(accountId, vToken.truncate(), swapParams, protocol);\n    }\n\n    function liquidityChange(\n        IVToken vToken,\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams\n    ) external {\n        dummy.liquidityChange(accountId, vToken.truncate(), liquidityChangeParams, protocol);\n    }\n\n    function getAllTokenPositionValue() external view returns (int256) {\n        return dummy.getAccountMarketValue(protocol);\n    }\n\n    function getRequiredMargin(bool isInititalMargin) external view returns (int256) {\n        return dummy.getRequiredMargin(isInititalMargin, protocol);\n    }\n}\n"
    },
    "contracts/test/mocks/AccountProtocolInfoMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Protocol } from '../../libraries/Protocol.sol';\nimport { AddressHelper } from '../../libraries/AddressHelper.sol';\n\nimport { IClearingHouseStructures } from '../../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\n\nabstract contract AccountProtocolInfoMock {\n    using AddressHelper for address;\n\n    Protocol.Info public protocol;\n\n    uint256 public fixFee;\n\n    function setAccountStorage(\n        IClearingHouseStructures.LiquidationParams calldata _liquidationParams,\n        uint256 _minRequiredMargin,\n        uint256 _removeLimitOrderFee,\n        uint256 _minimumOrderNotional,\n        uint256 _fixFee\n    ) external {\n        protocol.liquidationParams = _liquidationParams;\n        protocol.minRequiredMargin = _minRequiredMargin;\n        protocol.removeLimitOrderFee = _removeLimitOrderFee;\n        protocol.minimumOrderNotional = _minimumOrderNotional;\n        fixFee = _fixFee;\n    }\n\n    function registerPool(IClearingHouseStructures.Pool calldata poolInfo) external virtual {\n        uint32 poolId = address(poolInfo.vToken).truncate();\n\n        // this check is not present here as the tests change some things.\n        // this method is only used in these tests:\n        // AccountBasic, AccountRealistic, MarketValueAndReqMargin, VTokenPositionSet\n        // assert(address(protocol.pools[poolId].vToken).eq(address(0)));\n\n        protocol.pools[poolId] = poolInfo;\n    }\n\n    function setVQuoteAddress(IVQuote _vQuote) external {\n        protocol.vQuote = _vQuote;\n    }\n}\n"
    },
    "contracts/test/VTokenPositionSetTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { VTokenPositionSet } from '../libraries/VTokenPositionSet.sol';\nimport { VTokenPosition } from '../libraries/VTokenPosition.sol';\nimport { LiquidityPosition } from '../libraries/LiquidityPosition.sol';\nimport { LiquidityPositionSet } from '../libraries/LiquidityPositionSet.sol';\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { Uint32L8ArrayLib } from '../libraries/Uint32L8Array.sol';\nimport { Account } from '../libraries/Account.sol';\n\nimport { IClearingHouseEnums } from '../interfaces/clearinghouse/IClearingHouseEnums.sol';\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { AccountProtocolInfoMock } from './mocks/AccountProtocolInfoMock.sol';\nimport { VPoolWrapperMock } from './mocks/VPoolWrapperMock.sol';\n\ncontract VTokenPositionSetTest is AccountProtocolInfoMock {\n    using AddressHelper for address;\n    using AddressHelper for IVToken;\n    using Uint32L8ArrayLib for uint32[8];\n\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using VTokenPositionSet for VTokenPosition.Set;\n\n    mapping(uint32 => IVToken) vTokens;\n    VTokenPosition.Set dummy;\n\n    VPoolWrapperMock public wrapper;\n\n    uint256 accountId = 123;\n\n    constructor() {\n        wrapper = new VPoolWrapperMock();\n    }\n\n    function init(IVToken vToken) external {\n        VTokenPositionSet.activate(dummy, vToken.truncate());\n        vTokens[vToken.truncate()] = vToken;\n        wrapper.setLiquidityRates(-100, 100, 4000, 1);\n        wrapper.setLiquidityRates(-50, 50, 4000, 1);\n    }\n\n    function update(IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments, IVToken vToken) external {\n        dummy.update(accountId, balanceAdjustments, vToken.truncate(), protocol);\n    }\n\n    function realizeFundingPaymentToAccount(IVToken vToken) external {\n        dummy.realizeFundingPayment(accountId, vToken.truncate(), wrapper, protocol);\n    }\n\n    function swapTokenAmount(IVToken vToken, int256 vTokenAmount) external {\n        dummy.swapToken(\n            accountId,\n            vToken.truncate(),\n            IClearingHouseStructures.SwapParams(vTokenAmount, 0, false, false),\n            wrapper,\n            protocol\n        );\n    }\n\n    function swapTokenNotional(IVToken vToken, int256 vTokenNotional) external {\n        dummy.swapToken(\n            accountId,\n            vToken.truncate(),\n            IClearingHouseStructures.SwapParams(vTokenNotional, 0, true, false),\n            wrapper,\n            protocol\n        );\n    }\n\n    function liquidityChange(\n        IVToken vToken,\n        int24 tickLower,\n        int24 tickUpper,\n        int128 liquidity\n    ) external {\n        // overriding the wrapper to use the mock\n        protocol.pools[vToken.truncate()].vPoolWrapper = wrapper;\n\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams = IClearingHouseStructures\n            .LiquidityChangeParams(\n                tickLower,\n                tickUpper,\n                liquidity,\n                0,\n                0,\n                false,\n                IClearingHouseEnums.LimitOrderType.NONE\n            );\n        dummy.liquidityChange(accountId, vToken.truncate(), liquidityChangeParams, wrapper, protocol);\n    }\n\n    function liquidateLiquidityPositions(IVToken vToken) external {\n        dummy.liquidateLiquidityPositions(vToken.truncate(), wrapper, protocol);\n    }\n\n    function getIsActive(address vToken) external view returns (bool) {\n        return dummy.active.exists(vToken.truncate());\n    }\n\n    function getPositionDetails(IVToken vToken)\n        external\n        view\n        returns (\n            int256 balance,\n            int256 sumACkhpt,\n            int256 netTraderPosition\n        )\n    {\n        VTokenPosition.Info storage pos = dummy.positions[vToken.truncate()];\n        return (pos.balance, pos.sumAX128Chkpt, pos.netTraderPosition);\n    }\n\n    function getVQuoteBalance() external view returns (int256 balance) {\n        return dummy.vQuoteBalance;\n    }\n}\n"
    },
    "contracts/test/mocks/VPoolWrapperMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract VPoolWrapperMock is IVPoolWrapper {\n    mapping(int24 => mapping(int24 => IVPoolWrapper.WrapperValuesInside)) _getValuesInside;\n    uint24 public uniswapFeePips; // fee collected by Uniswap\n    uint24 public liquidityFeePips; // fee paid to liquidity providers, in 1e6\n    uint24 public protocolFeePips; // fee paid to DAO treasury\n\n    struct LiquidityRate {\n        uint256 vQuotePerLiquidity;\n        uint256 vTokenPerLiquidity;\n    }\n    mapping(int24 => mapping(int24 => LiquidityRate)) internal _liquidityRates;\n\n    IUniswapV3Pool public vPool;\n\n    function __initialize_VPoolWrapper(InitializeVPoolWrapperParams calldata params) external {}\n\n    function updateGlobalFundingState() public {}\n\n    function getValuesInside(int24 tickLower, int24 tickUpper)\n        public\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside)\n    {\n        return _getValuesInside[tickLower][tickUpper];\n    }\n\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\n        public\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside)\n    {\n        return _getValuesInside[tickLower][tickUpper];\n    }\n\n    function setValuesInside(\n        int24 tickLower,\n        int24 tickUpper,\n        int256 sumAX128,\n        int256 sumBInsideX128,\n        int256 sumFpInsideX128,\n        uint256 sumFeeInsideX128\n    ) external {\n        _getValuesInside[tickLower][tickUpper] = IVPoolWrapper.WrapperValuesInside(\n            sumAX128,\n            sumBInsideX128,\n            sumFpInsideX128,\n            sumFeeInsideX128\n        );\n    }\n\n    function setVPool(address vPoolAddress) external {\n        vPool = IUniswapV3Pool(vPoolAddress);\n    }\n\n    uint256 _liquidity;\n\n    function setLiquidityRates(\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 vQuotePerLiquidity,\n        uint256 vTokenPerLiquidity\n    ) external {\n        LiquidityRate storage liquidityRate = _liquidityRates[tickLower][tickUpper];\n        liquidityRate.vQuotePerLiquidity = vQuotePerLiquidity;\n        liquidityRate.vTokenPerLiquidity = vTokenPerLiquidity;\n    }\n\n    function mint(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        returns (\n            uint256 vTokenAmount,\n            uint256 vQuoteAmount,\n            WrapperValuesInside memory wrapperValuesInside\n        )\n    {\n        _liquidity += liquidity;\n\n        vTokenAmount = _liquidityRates[tickLower][tickUpper].vTokenPerLiquidity * liquidity;\n        vQuoteAmount = _liquidityRates[tickLower][tickUpper].vQuotePerLiquidity * liquidity;\n        wrapperValuesInside = getValuesInside(tickLower, tickUpper);\n    }\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        returns (\n            uint256 vTokenAmount,\n            uint256 vQuoteAmount,\n            WrapperValuesInside memory wrapperValuesInside\n        )\n    {\n        _liquidity -= liquidity;\n\n        vQuoteAmount = _liquidityRates[tickLower][tickUpper].vQuotePerLiquidity * liquidity;\n        vTokenAmount = _liquidityRates[tickLower][tickUpper].vTokenPerLiquidity * liquidity;\n        wrapperValuesInside = getValuesInside(tickLower, tickUpper);\n    }\n\n    function getSumAX128() external pure returns (int256) {\n        return 20 * (1 << 128);\n    }\n\n    function getExtrapolatedSumAX128() external pure returns (int256) {\n        return 20 * (1 << 128);\n    }\n\n    function swapTokenAmount(int256 vTokenAmount) external pure returns (int256) {\n        return vTokenAmount * (-4000);\n    }\n\n    function swap(\n        bool swapVTokenForVQuote, // zeroForOne\n        int256 amountSpecified,\n        uint160\n    ) public pure returns (int256 vTokenAmount, int256 vQuoteAmount) {\n        if (amountSpecified > 0 == swapVTokenForVQuote) {\n            // ETH exactIn || ETH exactOut\n            vTokenAmount = amountSpecified;\n            vQuoteAmount = -amountSpecified * 4000;\n        } else {\n            // USDC exactIn || USDC exactOut\n            vTokenAmount = -amountSpecified / 4000;\n            vQuoteAmount = amountSpecified;\n        }\n    }\n\n    function swapTokenNotional(int256 vTokenNotional) external pure returns (int256) {\n        return vTokenNotional / (4000);\n    }\n\n    function collectAccruedProtocolFee() external pure returns (uint256 accruedProtocolFeeLast) {\n        accruedProtocolFeeLast = 0;\n    }\n}\n"
    },
    "contracts/test/VTokenPositionTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { VTokenPosition } from '../libraries/VTokenPosition.sol';\n\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { VPoolWrapperMock } from './mocks/VPoolWrapperMock.sol';\n\ncontract VTokenPositionTest {\n    using VTokenPosition for VTokenPosition.Info;\n\n    uint256 num;\n    mapping(uint256 => VTokenPosition.Info) internal dummys;\n\n    VPoolWrapperMock public wrapper;\n\n    constructor() {\n        wrapper = new VPoolWrapperMock();\n    }\n\n    function init(\n        int256 _balance,\n        int256 _netTraderPosition,\n        int256 _sumAChkpt\n    ) external {\n        VTokenPosition.Info storage dummy = dummys[num++];\n        dummy.balance = _balance;\n        dummy.netTraderPosition = _netTraderPosition;\n        dummy.sumAX128Chkpt = _sumAChkpt;\n    }\n\n    function marketValue(uint256 price) external view returns (int256 value) {\n        return dummys[0].marketValue(price, wrapper);\n    }\n\n    function riskSide() external view returns (uint8) {\n        return uint8(dummys[0].riskSide());\n    }\n\n    function unrealizedFundingPayment() external view returns (int256) {\n        return dummys[0].unrealizedFundingPayment(wrapper);\n    }\n}\n"
    },
    "contracts/utils/SwapSimulator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\n\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { SimulateSwap } from '../libraries/SimulateSwap.sol';\nimport { SwapMath } from '../libraries/SwapMath.sol';\nimport { UniswapV3PoolHelper } from '../libraries/UniswapV3PoolHelper.sol';\n\ncontract SwapSimulator {\n    using SimulateSwap for IUniswapV3Pool;\n\n    struct SwapStep {\n        SimulateSwap.SwapState state;\n        SimulateSwap.StepComputations step;\n    }\n\n    function simulateSwap(\n        IClearingHouse clearingHouse,\n        uint32 poolId,\n        int256 amount,\n        uint160 sqrtPriceLimitX96,\n        bool isNotional\n    )\n        external\n        returns (\n            IClearingHouseStructures.SwapValues memory swapValues,\n            uint160 sqrtPriceX96End,\n            SimulateSwap.SwapCache memory cache,\n            SwapStep[] memory steps\n        )\n    {\n        // case isNotional true\n        // amountSpecified is positive\n        swapValues = _simulateSwap(\n            clearingHouse,\n            poolId,\n            amount < 0,\n            isNotional ? amount : -amount,\n            sqrtPriceLimitX96,\n            _onSwapStep\n        );\n\n        cache = _cache;\n        steps = _steps;\n        sqrtPriceX96End = _sqrtPriceX96End;\n        delete _cache;\n        delete _steps;\n        delete _sqrtPriceX96End;\n    }\n\n    SimulateSwap.SwapCache _cache;\n    SwapStep[] _steps;\n    uint160 _sqrtPriceX96End;\n\n    function _onSwapStep(\n        bool,\n        SimulateSwap.SwapCache memory cache,\n        SimulateSwap.SwapState memory state,\n        SimulateSwap.StepComputations memory step\n    ) internal {\n        // for reading\n        _cache = cache;\n        _steps.push(SwapStep({ state: state, step: step }));\n        _sqrtPriceX96End = state.sqrtPriceX96;\n    }\n\n    function _simulateSwap(\n        IClearingHouse clearingHouse,\n        uint32 poolId,\n        bool swapVTokenForVQuote, // zeroForOne\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        function(\n            bool,\n            SimulateSwap.SwapCache memory,\n            SimulateSwap.SwapState memory,\n            SimulateSwap.StepComputations memory\n        ) onSwapStep\n    ) internal returns (IClearingHouseStructures.SwapValues memory swapValues) {\n        swapValues.amountSpecified = amountSpecified;\n\n        IClearingHouseStructures.Pool memory pool = clearingHouse.getPoolInfo(poolId);\n\n        bool exactIn = amountSpecified >= 0;\n\n        if (sqrtPriceLimitX96 == 0) {\n            sqrtPriceLimitX96 = swapVTokenForVQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1;\n        }\n\n        (uint24 uniswapFeePips, uint24 liquidityFeePips, uint24 protocolFeePips) = (\n            pool.vPool.fee(),\n            pool.vPoolWrapper.liquidityFeePips(),\n            pool.vPoolWrapper.protocolFeePips()\n        );\n\n        SwapMath.beforeSwap(\n            exactIn,\n            swapVTokenForVQuote,\n            uniswapFeePips,\n            liquidityFeePips,\n            protocolFeePips,\n            swapValues\n        );\n\n        {\n            // simulate swap and update our tick states\n            (swapValues.vTokenIn, swapValues.vQuoteIn) = pool.vPool.simulateSwap(\n                swapVTokenForVQuote,\n                amountSpecified,\n                sqrtPriceLimitX96,\n                onSwapStep\n            );\n        }\n\n        SwapMath.afterSwap(exactIn, swapVTokenForVQuote, uniswapFeePips, liquidityFeePips, protocolFeePips, swapValues);\n    }\n}\n"
    },
    "contracts/libraries/SimulateSwap.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { LiquidityMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/LiquidityMath.sol';\nimport { SwapMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/SwapMath.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\nimport { TickBitmapExtended } from './TickBitmapExtended.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Simulate Uniswap V3 Swaps\nlibrary SimulateSwap {\n    using SafeCast for uint256;\n    using TickBitmapExtended for function(int16) external view returns (uint256);\n\n    error ZeroAmount();\n\n    struct SwapCache {\n        // price at the beginning of the swap\n        uint160 sqrtPriceX96Start;\n        // tick at the beginning of the swap\n        int24 tickStart;\n        // the protocol fee for the input token\n        uint8 feeProtocol;\n        // liquidity at the beginning of the swap\n        uint128 liquidityStart;\n        // the tick spacing of the pool\n        int24 tickSpacing;\n        // the lp fee share of the pool\n        uint24 fee;\n    }\n\n    // the top level state of the swap, the results of which are recorded in storage at the end\n    struct SwapState {\n        // the amount remaining to be swapped in/out of the input/output asset\n        int256 amountSpecifiedRemaining;\n        // the amount already swapped out/in of the output/input asset\n        int256 amountCalculated;\n        // current sqrt(price)\n        uint160 sqrtPriceX96;\n        // the tick associated with the current price\n        int24 tick;\n        // the global fee growth of the input token\n        uint256 feeGrowthGlobalIncreaseX128;\n        // amount of input token paid as protocol fee\n        uint128 protocolFee;\n        // the current liquidity in range\n        uint128 liquidity;\n    }\n\n    struct StepComputations {\n        // the price at the beginning of the step\n        uint160 sqrtPriceStartX96;\n        // the next tick to swap to from the current tick in the swap direction\n        int24 tickNext;\n        // whether tickNext is initialized or not\n        bool initialized;\n        // sqrt(price) for the next tick (1/0)\n        uint160 sqrtPriceNextX96;\n        // how much is being swapped in in this step\n        uint256 amountIn;\n        // how much is being swapped out\n        uint256 amountOut;\n        // how much fee is being paid in\n        uint256 feeAmount;\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool v3Pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) internal returns (int256 amount0, int256 amount1) {\n        return simulateSwap(v3Pool, zeroForOne, amountSpecified, sqrtPriceLimitX96, emptyFunction);\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool v3Pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        function(bool, SwapCache memory, SwapState memory, StepComputations memory) onSwapStep\n    ) internal returns (int256 amount0, int256 amount1) {\n        return simulateSwap(v3Pool, zeroForOne, amountSpecified, sqrtPriceLimitX96, v3Pool.fee(), onSwapStep);\n    }\n\n    function simulateSwap(\n        IUniswapV3Pool v3Pool,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        uint24 v3PoolFee,\n        function(bool, SwapCache memory, SwapState memory, StepComputations memory) onSwapStep\n    ) internal returns (int256 amount0, int256 amount1) {\n        if (amountSpecified == 0) revert ZeroAmount();\n\n        SwapCache memory cache;\n        (cache.sqrtPriceX96Start, cache.tickStart, , , , cache.feeProtocol, ) = v3Pool.slot0();\n        cache.liquidityStart = v3Pool.liquidity();\n        cache.tickSpacing = v3Pool.tickSpacing();\n        cache.fee = v3PoolFee;\n\n        require(\n            zeroForOne\n                ? sqrtPriceLimitX96 < cache.sqrtPriceX96Start && sqrtPriceLimitX96 > TickMath.MIN_SQRT_RATIO\n                : sqrtPriceLimitX96 > cache.sqrtPriceX96Start && sqrtPriceLimitX96 < TickMath.MAX_SQRT_RATIO,\n            'SPL'\n        );\n\n        bool exactInput = amountSpecified > 0;\n\n        SwapState memory state = SwapState({\n            amountSpecifiedRemaining: amountSpecified,\n            amountCalculated: 0,\n            sqrtPriceX96: cache.sqrtPriceX96Start,\n            tick: cache.tickStart,\n            feeGrowthGlobalIncreaseX128: 0,\n            protocolFee: 0,\n            liquidity: cache.liquidityStart\n        });\n\n        // continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n        while (state.amountSpecifiedRemaining != 0 && state.sqrtPriceX96 != sqrtPriceLimitX96) {\n            StepComputations memory step;\n\n            step.sqrtPriceStartX96 = state.sqrtPriceX96;\n\n            (step.tickNext, step.initialized) = v3Pool.tickBitmap.nextInitializedTickWithinOneWord(\n                state.tick,\n                cache.tickSpacing,\n                zeroForOne\n            );\n\n            // ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n            if (step.tickNext < TickMath.MIN_TICK) {\n                step.tickNext = TickMath.MIN_TICK;\n            } else if (step.tickNext > TickMath.MAX_TICK) {\n                step.tickNext = TickMath.MAX_TICK;\n            }\n\n            // get the price for the next tick\n            step.sqrtPriceNextX96 = TickMath.getSqrtRatioAtTick(step.tickNext);\n\n            // compute values to swap to the target tick, price limit, or point where input/output amount is exhausted\n            (state.sqrtPriceX96, step.amountIn, step.amountOut, step.feeAmount) = SwapMath.computeSwapStep(\n                state.sqrtPriceX96,\n                (zeroForOne ? step.sqrtPriceNextX96 < sqrtPriceLimitX96 : step.sqrtPriceNextX96 > sqrtPriceLimitX96)\n                    ? sqrtPriceLimitX96\n                    : step.sqrtPriceNextX96,\n                state.liquidity,\n                state.amountSpecifiedRemaining,\n                cache.fee\n            );\n\n            if (exactInput) {\n                state.amountSpecifiedRemaining -= (step.amountIn + step.feeAmount).toInt256();\n                state.amountCalculated = state.amountCalculated - step.amountOut.toInt256();\n            } else {\n                state.amountSpecifiedRemaining += step.amountOut.toInt256();\n                state.amountCalculated = state.amountCalculated + (step.amountIn + step.feeAmount).toInt256();\n            }\n\n            // update global fee tracker\n            if (state.liquidity > 0) {\n                state.feeGrowthGlobalIncreaseX128 += FullMath.mulDiv(\n                    step.feeAmount,\n                    FixedPoint128.Q128,\n                    state.liquidity\n                );\n            }\n\n            if (onSwapStep != emptyFunction) {\n                onSwapStep(zeroForOne, cache, state, step);\n            }\n\n            // shift tick if we reached the next price\n            if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n                // if the tick is initialized, adjust the liquidity\n                if (step.initialized) {\n                    (, int128 liquidityNet, , , , , , ) = v3Pool.ticks(step.tickNext);\n                    // if we're moving leftward, we interpret liquidityNet as the opposite sign\n                    // safe because liquidityNet cannot be type(int128).min\n                    if (zeroForOne) liquidityNet = -liquidityNet;\n                    state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\n                }\n\n                state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\n            } else if (state.sqrtPriceX96 != step.sqrtPriceStartX96) {\n                // recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n                state.tick = TickMath.getTickAtSqrtRatio(state.sqrtPriceX96);\n            }\n        }\n\n        return\n            zeroForOne == exactInput\n                ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\n                : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\n    }\n\n    function emptyFunction(\n        bool zeroForOne,\n        SimulateSwap.SwapCache memory,\n        SimulateSwap.SwapState memory,\n        SimulateSwap.StepComputations memory\n    ) internal view {}\n}\n"
    },
    "contracts/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { SignedMath } from './SignedMath.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Swap computation functions\nlibrary SwapMath {\n    using SignedMath for int256;\n\n    /// @dev This method mutates the data pointed by swapValues\n    function beforeSwap(\n        bool exactIn,\n        bool swapVTokenForVQuote,\n        uint24 uniswapFeePips,\n        uint24 liquidityFeePips,\n        uint24 protocolFeePips,\n        IClearingHouseStructures.SwapValues memory swapValues\n    ) internal pure {\n        // inflate or deinfate to undo uniswap fees if necessary, and account for our fees\n        if (exactIn) {\n            if (swapVTokenForVQuote) {\n                // CASE: exactIn vToken\n                // fee: not now, will collect fee in vQuote after swap\n                // inflate: for undoing the uniswap fees\n                swapValues.amountSpecified = inflate(swapValues.amountSpecified, uniswapFeePips);\n            } else {\n                // CASE: exactIn vQuote\n                // fee: remove fee and do smaller swap, so trader gets less vTokens\n                // here, amountSpecified == swap amount + fee\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\n                    swapValues.amountSpecified,\n                    AmountTypeEnum.VQUOTE_AMOUNT_PLUS_FEES,\n                    liquidityFeePips,\n                    protocolFeePips\n                );\n                swapValues.amountSpecified = includeFees(\n                    swapValues.amountSpecified,\n                    swapValues.liquidityFees + swapValues.protocolFees,\n                    IncludeFeeEnum.SUBTRACT_FEE\n                );\n                // inflate: uniswap will collect fee so inflate to undo it\n                swapValues.amountSpecified = inflate(swapValues.amountSpecified, uniswapFeePips);\n            }\n        } else {\n            if (!swapVTokenForVQuote) {\n                // CASE: exactOut vToken\n                // fee: no need to collect fee as we want to collect fee in vQuote later\n                // inflate: no need to inflate as uniswap collects fees in tokenIn\n            } else {\n                // CASE: exactOut vQuote\n                // fee: buy more vQuote (short more vToken) so that fee can be removed in vQuote\n                // here, amountSpecified + fee == swap amount\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\n                    swapValues.amountSpecified,\n                    AmountTypeEnum.VQUOTE_AMOUNT_MINUS_FEES,\n                    liquidityFeePips,\n                    protocolFeePips\n                );\n                swapValues.amountSpecified = includeFees(\n                    swapValues.amountSpecified,\n                    swapValues.liquidityFees + swapValues.protocolFees,\n                    IncludeFeeEnum.ADD_FEE\n                );\n            }\n        }\n    }\n\n    /// @dev This method mutates the data pointed by swapValues\n    function afterSwap(\n        bool exactIn,\n        bool swapVTokenForVQuote,\n        uint24 uniswapFeePips,\n        uint24 liquidityFeePips,\n        uint24 protocolFeePips,\n        IClearingHouseStructures.SwapValues memory swapValues\n    ) internal pure {\n        // swap is done so now adjusting vTokenIn and vQuoteIn amounts to remove uniswap fees and add our fees\n        if (exactIn) {\n            if (swapVTokenForVQuote) {\n                // CASE: exactIn vToken\n                // deinflate: vToken amount was inflated so that uniswap can collect fee\n                swapValues.vTokenIn = deinflate(swapValues.vTokenIn, uniswapFeePips);\n\n                // fee: collect the fee, give less vQuote to trader\n                // here, vQuoteIn == swap amount\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\n                    swapValues.vQuoteIn,\n                    AmountTypeEnum.ZERO_FEE_VQUOTE_AMOUNT,\n                    liquidityFeePips,\n                    protocolFeePips\n                );\n                swapValues.vQuoteIn = includeFees(\n                    swapValues.vQuoteIn,\n                    swapValues.liquidityFees + swapValues.protocolFees,\n                    IncludeFeeEnum.SUBTRACT_FEE\n                );\n            } else {\n                // CASE: exactIn vQuote\n                // deinflate: vQuote amount was inflated, hence need to deinflate for generating final statement\n                swapValues.vQuoteIn = deinflate(swapValues.vQuoteIn, uniswapFeePips);\n                // fee: fee is already removed before swap, lets include it to the final bill, so that trader pays for it\n                swapValues.vQuoteIn = includeFees(\n                    swapValues.vQuoteIn,\n                    swapValues.liquidityFees + swapValues.protocolFees,\n                    IncludeFeeEnum.ADD_FEE\n                );\n            }\n        } else {\n            if (!swapVTokenForVQuote) {\n                // CASE: exactOut vToken\n                // deinflate: uniswap want to collect fee in vQuote and hence ask more, so need to deinflate it\n                swapValues.vQuoteIn = deinflate(swapValues.vQuoteIn, uniswapFeePips);\n                // fee: collecting fees in vQuote\n                // here, vQuoteIn == swap amount\n                (swapValues.liquidityFees, swapValues.protocolFees) = calculateFees(\n                    swapValues.vQuoteIn,\n                    AmountTypeEnum.ZERO_FEE_VQUOTE_AMOUNT,\n                    liquidityFeePips,\n                    protocolFeePips\n                );\n                swapValues.vQuoteIn = includeFees(\n                    swapValues.vQuoteIn,\n                    swapValues.liquidityFees + swapValues.protocolFees,\n                    IncludeFeeEnum.ADD_FEE\n                );\n            } else {\n                // CASE: exactOut vQuote\n                // deinflate: uniswap want to collect fee in vToken and hence ask more, so need to deinflate it\n                swapValues.vTokenIn = deinflate(swapValues.vTokenIn, uniswapFeePips);\n                // fee: already calculated before, subtract now\n                swapValues.vQuoteIn = includeFees(\n                    swapValues.vQuoteIn,\n                    swapValues.liquidityFees + swapValues.protocolFees,\n                    IncludeFeeEnum.SUBTRACT_FEE\n                );\n            }\n        }\n    }\n\n    function inflate(int256 amount, uint24 uniswapFeePips) internal pure returns (int256 inflated) {\n        int256 fees = (amount * int256(uint256(uniswapFeePips))) / int24(1e6 - uniswapFeePips) + 1; // round up\n        inflated = amount + fees;\n    }\n\n    function deinflate(int256 inflated, uint24 uniswapFeePips) internal pure returns (int256 amount) {\n        amount = (inflated * int24(1e6 - uniswapFeePips)) / 1e6;\n    }\n\n    enum AmountTypeEnum {\n        ZERO_FEE_VQUOTE_AMOUNT,\n        VQUOTE_AMOUNT_MINUS_FEES,\n        VQUOTE_AMOUNT_PLUS_FEES\n    }\n\n    function calculateFees(\n        int256 amount,\n        AmountTypeEnum amountTypeEnum,\n        uint24 liquidityFeePips,\n        uint24 protocolFeePips\n    ) internal pure returns (uint256 liquidityFees, uint256 protocolFees) {\n        uint256 amountAbs = uint256(amount.abs());\n        if (amountTypeEnum == AmountTypeEnum.VQUOTE_AMOUNT_MINUS_FEES) {\n            // when amount is already subtracted by fees, we need to scale it up, so that\n            // on calculating and subtracting fees on the scaled up value, we should get same amount\n            amountAbs = (amountAbs * 1e6) / uint256(1e6 - liquidityFeePips - protocolFeePips);\n        } else if (amountTypeEnum == AmountTypeEnum.VQUOTE_AMOUNT_PLUS_FEES) {\n            // when amount is already added with fees, we need to scale it down, so that\n            // on calculating and adding fees on the scaled down value, we should get same amount\n            amountAbs = (amountAbs * 1e6) / uint256(1e6 + liquidityFeePips + protocolFeePips);\n        }\n        uint256 fees = (amountAbs * (liquidityFeePips + protocolFeePips)) / 1e6 + 1; // round up\n        liquidityFees = (amountAbs * liquidityFeePips) / 1e6 + 1; // round up\n        protocolFees = fees - liquidityFees;\n    }\n\n    enum IncludeFeeEnum {\n        ADD_FEE,\n        SUBTRACT_FEE\n    }\n\n    function includeFees(\n        int256 amount,\n        uint256 fees,\n        IncludeFeeEnum includeFeeEnum\n    ) internal pure returns (int256 amountAfterFees) {\n        if ((amount > 0) == (includeFeeEnum == IncludeFeeEnum.ADD_FEE)) {\n            amountAfterFees = amount + int256(fees);\n        } else {\n            amountAfterFees = amount - int256(fees);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n    /// @param x The liquidity before change\n    /// @param y The delta by which liquidity should be changed\n    /// @return z The liquidity delta\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n        unchecked {\n            if (y < 0) {\n                require((z = x - uint128(-y)) < x, 'LS');\n            } else {\n                require((z = x + uint128(y)) >= x, 'LA');\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity >=0.8.0;\n\nimport './FullMath.sol';\nimport './SqrtPriceMath.sol';\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n    /// @param liquidity The usable liquidity\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n    /// @return feeAmount The amount of input that will be taken as a fee\n    function computeSwapStep(\n        uint160 sqrtRatioCurrentX96,\n        uint160 sqrtRatioTargetX96,\n        uint128 liquidity,\n        int256 amountRemaining,\n        uint24 feePips\n    )\n        internal\n        pure\n        returns (\n            uint160 sqrtRatioNextX96,\n            uint256 amountIn,\n            uint256 amountOut,\n            uint256 feeAmount\n        )\n    {\n        unchecked {\n            bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n            bool exactIn = amountRemaining >= 0;\n\n            if (exactIn) {\n                uint256 amountRemainingLessFee = FullMath.mulDiv(uint256(amountRemaining), 1e6 - feePips, 1e6);\n                amountIn = zeroForOne\n                    ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n                if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n                else\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n                        sqrtRatioCurrentX96,\n                        liquidity,\n                        amountRemainingLessFee,\n                        zeroForOne\n                    );\n            } else {\n                amountOut = zeroForOne\n                    ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n                if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n                else\n                    sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n                        sqrtRatioCurrentX96,\n                        liquidity,\n                        uint256(-amountRemaining),\n                        zeroForOne\n                    );\n            }\n\n            bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n            // get the input/output amounts\n            if (zeroForOne) {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n            } else {\n                amountIn = max && exactIn\n                    ? amountIn\n                    : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n                amountOut = max && !exactIn\n                    ? amountOut\n                    : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n            }\n\n            // cap the output amount to not exceed the remaining output amount\n            if (!exactIn && amountOut > uint256(-amountRemaining)) {\n                amountOut = uint256(-amountRemaining);\n            }\n\n            if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n                // we didn't reach the target, so take the remainder of the maximum input as fee\n                feeAmount = uint256(amountRemaining) - amountIn;\n            } else {\n                feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/TickBitmapExtended.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { BitMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/BitMath.sol';\n\n/// @title Tick bitmap extended functions\n/// @dev Uses the bitmap from UniswapV3Pool\nlibrary TickBitmapExtended {\n    /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n    /// @param tick The tick for which to compute the position\n    /// @return wordPos The key in the mapping containing the word in which the bit is stored\n    /// @return bitPos The bit position in the word where the flag is stored\n    function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n        wordPos = int16(tick >> 8);\n        bitPos = uint8(uint24(tick % 256));\n    }\n\n    /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n    /// to the left (less than or equal to) or right (greater than) of the given tick\n    /// @param self The mapping in which to compute the next initialized tick\n    /// @param tick The starting tick\n    /// @param tickSpacing The spacing between usable ticks\n    /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n    /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n    /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n    function nextInitializedTickWithinOneWord(\n        function(int16) external view returns (uint256) self,\n        int24 tick,\n        int24 tickSpacing,\n        bool lte\n    ) internal view returns (int24 next, bool initialized) {\n        int24 compressed = tick / tickSpacing;\n        if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n        if (lte) {\n            (int16 wordPos, uint8 bitPos) = position(compressed);\n            // all the 1s at or to the right of the current bitPos\n            uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n            uint256 masked = self(wordPos) & mask;\n\n            // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed - int24(uint24(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n                : (compressed - int24(uint24(bitPos))) * tickSpacing;\n        } else {\n            // start from the word of the next tick, since the current tick state doesn't matter\n            (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n            // all the 1s at or to the left of the bitPos\n            uint256 mask = ~((1 << bitPos) - 1);\n            uint256 masked = self(wordPos) & mask;\n\n            // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n            initialized = masked != 0;\n            // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n            next = initialized\n                ? (compressed + 1 + int24(uint24(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n                : (compressed + 1 + int24(uint24(type(uint8).max - bitPos))) * tickSpacing;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n    /// @notice Returns the index of the most significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\n    /// @return r the index of the most significant bit\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        unchecked {\n            require(x > 0);\n\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                r += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                r += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                r += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                r += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                r += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                r += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                r += 2;\n            }\n            if (x >= 0x2) r += 1;\n        }\n    }\n\n    /// @notice Returns the index of the least significant bit of the number,\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n    /// @dev The function satisfies the property:\n    ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\n    /// @return r the index of the least significant bit\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        unchecked {\n            require(x > 0);\n\n            r = 255;\n            if (x & type(uint128).max > 0) {\n                r -= 128;\n            } else {\n                x >>= 128;\n            }\n            if (x & type(uint64).max > 0) {\n                r -= 64;\n            } else {\n                x >>= 64;\n            }\n            if (x & type(uint32).max > 0) {\n                r -= 32;\n            } else {\n                x >>= 32;\n            }\n            if (x & type(uint16).max > 0) {\n                r -= 16;\n            } else {\n                x >>= 16;\n            }\n            if (x & type(uint8).max > 0) {\n                r -= 8;\n            } else {\n                x >>= 8;\n            }\n            if (x & 0xf > 0) {\n                r -= 4;\n            } else {\n                x >>= 4;\n            }\n            if (x & 0x3 > 0) {\n                r -= 2;\n            } else {\n                x >>= 2;\n            }\n            if (x & 0x1 > 0) r -= 1;\n        }\n    }\n}\n"
    },
    "contracts/test/mocks/VPoolWrapperMockRealistic.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { IUniswapV3PoolDeployer } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3PoolDeployer.sol';\nimport { IUniswapV3MintCallback } from '@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3MintCallback.sol';\nimport { IUniswapV3SwapCallback } from '@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\nimport { IOracle } from '../../interfaces/IOracle.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\n\nimport { FundingPayment } from '../../libraries/FundingPayment.sol';\nimport { SimulateSwap } from '../../libraries/SimulateSwap.sol';\nimport { Tick } from '../../libraries/Tick.sol';\nimport { PriceMath } from '../../libraries/PriceMath.sol';\nimport { SignedMath } from '../../libraries/SignedMath.sol';\nimport { SignedFullMath } from '../../libraries/SignedFullMath.sol';\nimport { UniswapV3PoolHelper } from '../../libraries/UniswapV3PoolHelper.sol';\n\nimport { VPoolWrapper } from '../../protocol/wrapper/VPoolWrapper.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract VPoolWrapperMockRealistic is VPoolWrapper {\n    uint48 public blockTimestamp;\n\n    constructor() VPoolWrapper() {\n        fpGlobal.timestampLast = 0;\n    }\n\n    function setFpGlobalLastTimestamp(uint48 timestamp) external {\n        fpGlobal.timestampLast = timestamp;\n    }\n\n    function setBlockTimestamp(uint48 timestamp) external {\n        blockTimestamp = timestamp;\n    }\n\n    function _blockTimestamp() internal view virtual override returns (uint48) {\n        return blockTimestamp;\n    }\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\ninterface IUniswapV3PoolDeployer {\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\n    /// Returns factory The factory address\n    /// Returns token0 The first token of the pool by address sort order\n    /// Returns token1 The second token of the pool by address sort order\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\n    function parameters()\n        external\n        view\n        returns (\n            address factory,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickSpacing\n        );\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.9;\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { LiquidityMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/LiquidityMath.sol';\n\nimport { FundingPayment } from './FundingPayment.sol';\n\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { console } from 'hardhat/console.sol';\n\n/// @title Extended tick state for VPoolWrapper\nlibrary Tick {\n    struct Info {\n        int256 sumALastX128;\n        int256 sumBOutsideX128;\n        int256 sumFpOutsideX128;\n        uint256 sumFeeOutsideX128;\n    }\n\n    function getTickExtendedStateInside(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent,\n        FundingPayment.Info memory fpGlobal,\n        uint256 sumFeeGlobalX128\n    )\n        internal\n        view\n        returns (\n            int256 sumBInsideX128,\n            int256 sumFpInsideX128,\n            uint256 sumFeeInsideX128\n        )\n    {\n        Info storage lower = self[tickLower];\n        Info storage upper = self[tickUpper];\n\n        int256 sumBBelowX128 = lower.sumBOutsideX128;\n        int256 sumFpBelowX128 = FundingPayment.extrapolatedSumFpX128(\n            lower.sumALastX128,\n            sumBBelowX128, // lower.sumBOutsideX128,\n            lower.sumFpOutsideX128,\n            fpGlobal.sumAX128\n        );\n        uint256 sumFeeBelowX128 = lower.sumFeeOutsideX128;\n        if (tickLower > tickCurrent) {\n            sumBBelowX128 = fpGlobal.sumBX128 - sumBBelowX128;\n            sumFpBelowX128 = fpGlobal.sumFpX128 - sumFpBelowX128;\n            sumFeeBelowX128 = sumFeeGlobalX128 - sumFeeBelowX128;\n        }\n\n        int256 sumBAboveX128 = upper.sumBOutsideX128;\n        int256 sumFpAboveX128 = FundingPayment.extrapolatedSumFpX128(\n            upper.sumALastX128,\n            sumBAboveX128, // upper.sumBOutsideX128,\n            upper.sumFpOutsideX128,\n            fpGlobal.sumAX128\n        );\n        uint256 sumFeeAboveX128 = upper.sumFeeOutsideX128;\n        if (tickUpper <= tickCurrent) {\n            sumBAboveX128 = fpGlobal.sumBX128 - sumBAboveX128;\n            sumFpAboveX128 = fpGlobal.sumFpX128 - sumFpAboveX128;\n            sumFeeAboveX128 = sumFeeGlobalX128 - sumFeeAboveX128;\n        }\n\n        sumBInsideX128 = fpGlobal.sumBX128 - sumBBelowX128 - sumBAboveX128;\n        sumFpInsideX128 = fpGlobal.sumFpX128 - sumFpBelowX128 - sumFpAboveX128;\n        sumFeeInsideX128 = sumFeeGlobalX128 - sumFeeBelowX128 - sumFeeAboveX128;\n    }\n\n    function update(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        int24 tickCurrent,\n        int128 liquidityDelta,\n        int256 sumAGlobalX128,\n        int256 sumBGlobalX128,\n        int256 sumFpGlobalX128,\n        uint256 sumFeeGlobal0X128,\n        IUniswapV3Pool vPool\n    ) internal returns (bool flipped) {\n        Tick.Info storage info = self[tick];\n\n        (uint128 liquidityGrossBefore, , , , , , , ) = vPool.ticks(tick);\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\n\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n        if (liquidityGrossBefore == 0) {\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n            if (tick <= tickCurrent) {\n                info.sumALastX128 = sumAGlobalX128;\n                info.sumBOutsideX128 = sumBGlobalX128;\n                info.sumFpOutsideX128 = sumFpGlobalX128;\n                info.sumFeeOutsideX128 = sumFeeGlobal0X128;\n            }\n        }\n    }\n\n    function cross(\n        mapping(int24 => Tick.Info) storage self,\n        int24 tick,\n        FundingPayment.Info memory fpGlobal,\n        uint256 sumFeeOutsideX128\n    ) internal {\n        Tick.Info storage info = self[tick];\n        int256 sumFpOutsideX128 = FundingPayment.extrapolatedSumFpX128(\n            info.sumALastX128,\n            info.sumBOutsideX128,\n            info.sumFpOutsideX128,\n            fpGlobal.sumAX128\n        );\n        info.sumALastX128 = fpGlobal.sumAX128;\n        info.sumBOutsideX128 = fpGlobal.sumBX128 - info.sumBOutsideX128;\n        info.sumFpOutsideX128 = fpGlobal.sumFpX128 - sumFpOutsideX128;\n        info.sumFeeOutsideX128 = sumFeeOutsideX128 - info.sumFeeOutsideX128;\n    }\n\n    /// @notice Clears tick data\n    /// @param self The mapping containing all initialized tick information for initialized ticks\n    /// @param tick The tick that will be cleared\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n        delete self[tick];\n    }\n}\n"
    },
    "contracts/protocol/wrapper/VPoolWrapper.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { IUniswapV3MintCallback } from '@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3MintCallback.sol';\nimport { IUniswapV3SwapCallback } from '@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n// import { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\n\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\nimport { IClearingHouseStructures } from '../../interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { FundingPayment } from '../../libraries/FundingPayment.sol';\nimport { SimulateSwap } from '../../libraries/SimulateSwap.sol';\nimport { Tick } from '../../libraries/Tick.sol';\nimport { PriceMath } from '../../libraries/PriceMath.sol';\nimport { SafeCast } from '../../libraries/SafeCast.sol';\nimport { SignedMath } from '../../libraries/SignedMath.sol';\nimport { SignedFullMath } from '../../libraries/SignedFullMath.sol';\nimport { SwapMath } from '../../libraries/SwapMath.sol';\nimport { UniswapV3PoolHelper } from '../../libraries/UniswapV3PoolHelper.sol';\n\nimport { Extsload } from '../../utils/Extsload.sol';\n\nimport { UNISWAP_V3_DEFAULT_TICKSPACING } from '../../utils/constants.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract VPoolWrapper is IVPoolWrapper, IUniswapV3MintCallback, IUniswapV3SwapCallback, Initializable, Extsload {\n    using FullMath for uint256;\n    using FundingPayment for FundingPayment.Info;\n    using SignedMath for int256;\n    using SignedFullMath for int256;\n    using PriceMath for uint160;\n    using SafeCast for uint256;\n    using SafeCast for uint128;\n    using SimulateSwap for IUniswapV3Pool;\n    using Tick for IUniswapV3Pool;\n    using Tick for mapping(int24 => Tick.Info);\n    using UniswapV3PoolHelper for IUniswapV3Pool;\n\n    IClearingHouse public clearingHouse;\n    IVToken public vToken;\n    IVQuote public vQuote;\n    IUniswapV3Pool public vPool;\n\n    uint24 public uniswapFeePips; // fee collected by Uniswap\n    uint24 public liquidityFeePips; // fee paid to liquidity providers, in 1e6\n    uint24 public protocolFeePips; // fee paid to DAO treasury\n\n    uint256 public accruedProtocolFee;\n\n    FundingPayment.Info public fpGlobal;\n    uint256 public sumFeeGlobalX128; // extendedFeeGrowthGlobalX128;\n\n    mapping(int24 => Tick.Info) public ticksExtended;\n\n    error NotClearingHouse();\n    error NotGovernance();\n    error NotUniswapV3Pool();\n    error InvalidTicks(int24 tickLower, int24 tickUpper);\n\n    modifier onlyClearingHouse() {\n        if (msg.sender != address(clearingHouse)) {\n            revert NotClearingHouse();\n        }\n        _;\n    }\n\n    modifier onlyGovernance() {\n        if (msg.sender != clearingHouse.governance()) {\n            revert NotGovernance();\n        }\n        _;\n    }\n\n    modifier onlyUniswapV3Pool() {\n        if (msg.sender != address(vPool)) {\n            revert NotUniswapV3Pool();\n        }\n        _;\n    }\n\n    modifier checkTicks(int24 tickLower, int24 tickUpper) {\n        if (\n            tickLower >= tickUpper ||\n            tickLower < TickMath.MIN_TICK ||\n            tickUpper > TickMath.MAX_TICK ||\n            tickLower % UNISWAP_V3_DEFAULT_TICKSPACING != 0 ||\n            tickUpper % UNISWAP_V3_DEFAULT_TICKSPACING != 0\n        ) revert InvalidTicks(tickLower, tickUpper);\n        _;\n    }\n\n    /**\n        PLATFORM FUNCTIONS\n     */\n\n    function __initialize_VPoolWrapper(InitializeVPoolWrapperParams calldata params) external initializer {\n        clearingHouse = params.clearingHouse;\n        vToken = params.vToken;\n        vQuote = params.vQuote;\n        vPool = params.vPool;\n\n        liquidityFeePips = params.liquidityFeePips;\n        protocolFeePips = params.protocolFeePips;\n        uniswapFeePips = params.UNISWAP_V3_DEFAULT_FEE_TIER;\n\n        // initializes the funding payment state\n        fpGlobal.update(0, 1, _blockTimestamp(), 1, 1);\n    }\n\n    function collectAccruedProtocolFee() external onlyClearingHouse returns (uint256 accruedProtocolFeeLast) {\n        accruedProtocolFeeLast = accruedProtocolFee - 1;\n        accruedProtocolFee = 1;\n        emit AccruedProtocolFeeCollected(accruedProtocolFeeLast);\n    }\n\n    // for updating global funding payment\n    function updateGlobalFundingState() public {\n        (uint256 realPriceX128, uint256 virtualPriceX128) = clearingHouse.getTwapPrices(vToken);\n        fpGlobal.update(0, 1, _blockTimestamp(), realPriceX128, virtualPriceX128);\n    }\n\n    /**\n        ADMIN FUNCTIONS\n     */\n\n    function setLiquidityFee(uint24 liquidityFeePips_) external onlyGovernance {\n        liquidityFeePips = liquidityFeePips_;\n        emit LiquidityFeeUpdated(liquidityFeePips_);\n    }\n\n    function setProtocolFee(uint24 protocolFeePips_) external onlyGovernance {\n        protocolFeePips = protocolFeePips_;\n        emit ProtocolFeeUpdated(protocolFeePips_);\n    }\n\n    /**\n        EXTERNAL UTILITY METHODS\n     */\n\n    /// @notice Swap vToken for vQuote, or vQuote for vToken\n    /// @param swapVTokenForVQuote: The direction of the swap, true for vToken to vQuote, false for vQuote to vToken\n    /// @param amountSpecified: The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96: The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap.\n    function swap(\n        bool swapVTokenForVQuote, // zeroForOne\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) public onlyClearingHouse returns (int256 vTokenAmount, int256 vQuoteAmount) {\n        bool exactIn = amountSpecified >= 0;\n\n        if (sqrtPriceLimitX96 == 0) {\n            sqrtPriceLimitX96 = swapVTokenForVQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1;\n        }\n\n        IClearingHouseStructures.SwapValues memory swapValues;\n        swapValues.amountSpecified = amountSpecified;\n\n        SwapMath.beforeSwap(\n            exactIn,\n            swapVTokenForVQuote,\n            uniswapFeePips,\n            liquidityFeePips,\n            protocolFeePips,\n            swapValues\n        );\n\n        {\n            // simulate swap and update our tick states\n            (int256 vTokenIn_simulated, int256 vQuoteIn_simulated) = vPool.simulateSwap(\n                swapVTokenForVQuote,\n                swapValues.amountSpecified,\n                sqrtPriceLimitX96,\n                _onSwapStep\n            );\n\n            // execute actual swap on uniswap\n            (swapValues.vTokenIn, swapValues.vQuoteIn) = vPool.swap(\n                address(this),\n                swapVTokenForVQuote,\n                swapValues.amountSpecified,\n                sqrtPriceLimitX96,\n                ''\n            );\n\n            // simulated swap should be identical to actual swap\n            assert(vTokenIn_simulated == swapValues.vTokenIn && vQuoteIn_simulated == swapValues.vQuoteIn);\n        }\n\n        SwapMath.afterSwap(exactIn, swapVTokenForVQuote, uniswapFeePips, liquidityFeePips, protocolFeePips, swapValues);\n\n        // record the protocol fee, for withdrawal in future\n        accruedProtocolFee += swapValues.protocolFees;\n\n        // burn the tokens received from the swap\n        _vBurn();\n\n        emit Swap(swapValues.vTokenIn, swapValues.vQuoteIn, swapValues.liquidityFees, swapValues.protocolFees);\n\n        return (swapValues.vTokenIn, swapValues.vQuoteIn);\n    }\n\n    function mint(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        onlyClearingHouse\n        checkTicks(tickLower, tickUpper)\n        returns (\n            uint256 vTokenPrincipal,\n            uint256 vQuotePrincipal,\n            WrapperValuesInside memory wrapperValuesInside\n        )\n    {\n        updateGlobalFundingState();\n        wrapperValuesInside = _updateTicks(tickLower, tickUpper, liquidity.toInt128(), vPool.tickCurrent());\n\n        (uint256 _amount0, uint256 _amount1) = vPool.mint({\n            recipient: address(this),\n            tickLower: tickLower,\n            tickUpper: tickUpper,\n            amount: liquidity,\n            data: ''\n        });\n\n        vTokenPrincipal = _amount0;\n        vQuotePrincipal = _amount1;\n    }\n\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    )\n        external\n        onlyClearingHouse\n        checkTicks(tickLower, tickUpper)\n        returns (\n            uint256 vTokenPrincipal,\n            uint256 vQuotePrincipal,\n            WrapperValuesInside memory wrapperValuesInside\n        )\n    {\n        updateGlobalFundingState();\n        wrapperValuesInside = _updateTicks(tickLower, tickUpper, -liquidity.toInt128(), vPool.tickCurrent());\n\n        (uint256 _amount0, uint256 _amount1) = vPool.burn({\n            tickLower: tickLower,\n            tickUpper: tickUpper,\n            amount: liquidity\n        });\n\n        vTokenPrincipal = _amount0;\n        vQuotePrincipal = _amount1;\n        _collect(tickLower, tickUpper);\n    }\n\n    /**\n        UNISWAP V3 POOL CALLBACkS\n     */\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external virtual onlyUniswapV3Pool {\n        if (amount0Delta > 0) {\n            IVToken(vPool.token0()).mint(address(vPool), uint256(amount0Delta));\n        }\n        if (amount1Delta > 0) {\n            IVToken(vPool.token1()).mint(address(vPool), uint256(amount1Delta));\n        }\n    }\n\n    function uniswapV3MintCallback(\n        uint256 vTokenAmount,\n        uint256 vQuoteAmount,\n        bytes calldata\n    ) external override onlyUniswapV3Pool {\n        if (vQuoteAmount > 0) vQuote.mint(msg.sender, vQuoteAmount);\n        if (vTokenAmount > 0) vToken.mint(msg.sender, vTokenAmount);\n    }\n\n    /**\n        VIEW METHODS\n     */\n\n    function getSumAX128() external view returns (int256) {\n        return fpGlobal.sumAX128;\n    }\n\n    function getExtrapolatedSumAX128() public view returns (int256) {\n        (uint256 realPriceX128, uint256 virtualPriceX128) = clearingHouse.getTwapPrices(vToken);\n        return\n            FundingPayment.extrapolatedSumAX128(\n                fpGlobal.sumAX128,\n                fpGlobal.timestampLast,\n                _blockTimestamp(),\n                realPriceX128,\n                virtualPriceX128\n            );\n    }\n\n    function getValuesInside(int24 tickLower, int24 tickUpper)\n        public\n        view\n        checkTicks(tickLower, tickUpper)\n        returns (WrapperValuesInside memory wrapperValuesInside)\n    {\n        (, int24 currentTick, , , , , ) = vPool.slot0();\n        FundingPayment.Info memory _fpGlobal = fpGlobal;\n        wrapperValuesInside.sumAX128 = _fpGlobal.sumAX128;\n        (\n            wrapperValuesInside.sumBInsideX128,\n            wrapperValuesInside.sumFpInsideX128,\n            wrapperValuesInside.sumFeeInsideX128\n        ) = ticksExtended.getTickExtendedStateInside(tickLower, tickUpper, currentTick, _fpGlobal, sumFeeGlobalX128);\n    }\n\n    function getExtrapolatedValuesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (WrapperValuesInside memory wrapperValuesInside)\n    {\n        (, int24 currentTick, , , , , ) = vPool.slot0();\n        FundingPayment.Info memory _fpGlobal = fpGlobal;\n\n        ///@dev update sumA and sumFP to extrapolated values according to current timestamp\n        _fpGlobal.sumAX128 = getExtrapolatedSumAX128();\n        _fpGlobal.sumFpX128 = FundingPayment.extrapolatedSumFpX128(\n            fpGlobal.sumAX128,\n            fpGlobal.sumBX128,\n            fpGlobal.sumFpX128,\n            _fpGlobal.sumAX128\n        );\n\n        wrapperValuesInside.sumAX128 = _fpGlobal.sumAX128;\n        (\n            wrapperValuesInside.sumBInsideX128,\n            wrapperValuesInside.sumFpInsideX128,\n            wrapperValuesInside.sumFeeInsideX128\n        ) = ticksExtended.getTickExtendedStateInside(tickLower, tickUpper, currentTick, _fpGlobal, sumFeeGlobalX128);\n    }\n\n    /**\n        INTERNAL HELPERS\n     */\n\n    function _collect(int24 tickLower, int24 tickUpper) internal {\n        // (uint256 amount0, uint256 amount1) =\n        vPool.collect({\n            recipient: address(this),\n            tickLower: tickLower,\n            tickUpper: tickUpper,\n            amount0Requested: type(uint128).max,\n            amount1Requested: type(uint128).max\n        });\n\n        _vBurn();\n    }\n\n    function _onSwapStep(\n        bool swapVTokenForVQuote,\n        SimulateSwap.SwapCache memory,\n        SimulateSwap.SwapState memory state,\n        SimulateSwap.StepComputations memory step\n    ) internal {\n        // these vQuote and vToken amounts are zero fee swap amounts (fee collected by uniswaop is ignored and burned later)\n        (uint256 vTokenAmount, uint256 vQuoteAmount) = swapVTokenForVQuote\n            ? (step.amountIn, step.amountOut)\n            : (step.amountOut, step.amountIn);\n\n        // here, vQuoteAmount == swap amount\n        (uint256 liquidityFees, ) = SwapMath.calculateFees(\n            vQuoteAmount.toInt256(),\n            SwapMath.AmountTypeEnum.ZERO_FEE_VQUOTE_AMOUNT,\n            liquidityFeePips,\n            protocolFeePips\n        );\n\n        // vQuote amount with fees\n        // vQuoteAmount = _includeFees(\n        //     vQuoteAmount,\n        //     liquidityFees + protocolFees,\n        //     swapVTokenForVQuote ? IncludeFeeEnum.SUBTRACT_FEE : IncludeFeeEnum.ADD_FEE\n        // );\n\n        if (state.liquidity > 0 && vTokenAmount > 0) {\n            (uint256 realPriceX128, uint256 virtualPriceX128) = clearingHouse.getTwapPrices(vToken);\n            fpGlobal.update(\n                swapVTokenForVQuote ? vTokenAmount.toInt256() : -vTokenAmount.toInt256(), // when trader goes long, LP goes short\n                state.liquidity,\n                _blockTimestamp(),\n                realPriceX128,\n                virtualPriceX128\n            );\n\n            sumFeeGlobalX128 += liquidityFees.mulDiv(FixedPoint128.Q128, state.liquidity);\n        }\n\n        // if we have reached the end price of tick\n        if (state.sqrtPriceX96 == step.sqrtPriceNextX96) {\n            // if the tick is initialized, run the tick transition\n            if (step.initialized) {\n                ticksExtended.cross(step.tickNext, fpGlobal, sumFeeGlobalX128);\n            }\n        }\n    }\n\n    function _updateTicks(\n        int24 tickLower,\n        int24 tickUpper,\n        int128 liquidityDelta,\n        int24 tickCurrent\n    ) private returns (WrapperValuesInside memory wrapperValuesInside) {\n        FundingPayment.Info memory _fpGlobal = fpGlobal; // SLOAD\n        uint256 _sumFeeGlobalX128 = sumFeeGlobalX128;\n\n        // if we need to update the ticks, do it\n        bool flippedLower;\n        bool flippedUpper;\n        if (liquidityDelta != 0) {\n            flippedLower = ticksExtended.update(\n                tickLower,\n                tickCurrent,\n                liquidityDelta,\n                _fpGlobal.sumAX128,\n                _fpGlobal.sumBX128,\n                _fpGlobal.sumFpX128,\n                _sumFeeGlobalX128,\n                vPool\n            );\n            flippedUpper = ticksExtended.update(\n                tickUpper,\n                tickCurrent,\n                liquidityDelta,\n                _fpGlobal.sumAX128,\n                _fpGlobal.sumBX128,\n                _fpGlobal.sumFpX128,\n                _sumFeeGlobalX128,\n                vPool\n            );\n        }\n\n        wrapperValuesInside = getValuesInside(tickLower, tickUpper);\n\n        // clear any tick data that is no longer needed\n        if (liquidityDelta < 0) {\n            if (flippedLower) {\n                ticksExtended.clear(tickLower);\n            }\n            if (flippedUpper) {\n                ticksExtended.clear(tickUpper);\n            }\n        }\n    }\n\n    function _vBurn() internal {\n        uint256 vQuoteBal = vQuote.balanceOf(address(this));\n        if (vQuoteBal > 0) {\n            vQuote.burn(vQuoteBal);\n        }\n        uint256 vTokenBal = vToken.balanceOf(address(this));\n        if (vTokenBal > 0) {\n            vToken.burn(vTokenBal);\n        }\n    }\n\n    // used to set time in tests\n    function _blockTimestamp() internal view virtual returns (uint48) {\n        return uint48(block.timestamp);\n    }\n}\n"
    },
    "contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title Safe cast functions\nlibrary SafeCast {\n    error SafeCast_Int128Overflow(uint128 value);\n\n    function toInt128(uint128 y) internal pure returns (int128 z) {\n        unchecked {\n            if (y >= 2**127) revert SafeCast_Int128Overflow(y);\n            z = int128(y);\n        }\n    }\n\n    error SafeCast_Int256Overflow(uint256 value);\n\n    function toInt256(uint256 y) internal pure returns (int256 z) {\n        unchecked {\n            if (y >= 2**255) revert SafeCast_Int256Overflow(y);\n            z = int256(y);\n        }\n    }\n}\n"
    },
    "contracts/utils/constants.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\n// Uniswap V3 Factory address is same across different networks\naddress constant UNISWAP_V3_FACTORY_ADDRESS = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\nuint24 constant UNISWAP_V3_DEFAULT_FEE_TIER = 500;\nint24 constant UNISWAP_V3_DEFAULT_TICKSPACING = 10;\nbytes32 constant UNISWAP_V3_POOL_BYTE_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n"
    },
    "contracts/test/mocks/VPoolWrapperMock2.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { VPoolWrapper } from '../../protocol/wrapper/VPoolWrapper.sol';\nimport { SwapMath } from '../../libraries/SwapMath.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract VPoolWrapperMock2 is VPoolWrapper {\n    uint48 public blockTimestamp;\n\n    constructor() {\n        blockTimestamp = uint48(block.timestamp);\n    }\n\n    function _blockTimestamp() internal view override returns (uint48) {\n        // constructor of VPoolWrapper runs first, there _blockTimestamp() returns zero\n        if (blockTimestamp == 0) return uint48(block.timestamp);\n        else return blockTimestamp;\n    }\n\n    function increaseTimestamp(uint48 secs) external {\n        blockTimestamp += secs;\n    }\n\n    function calculateFees(int256 amount, SwapMath.AmountTypeEnum amountTypeEnum)\n        public\n        view\n        returns (uint256 liquidityFees, uint256 protocolFees)\n    {\n        return SwapMath.calculateFees(amount, amountTypeEnum, liquidityFeePips, protocolFeePips);\n    }\n}\n"
    },
    "contracts/test/LiquidityPositionTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { LiquidityPosition } from '../libraries/LiquidityPosition.sol';\nimport { Account } from '../libraries/Account.sol';\nimport { VPoolWrapperMock } from './mocks/VPoolWrapperMock.sol';\n\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\n\nimport { AccountProtocolInfoMock } from './mocks/AccountProtocolInfoMock.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract LiquidityPositionTest is AccountProtocolInfoMock {\n    using LiquidityPosition for LiquidityPosition.Info;\n\n    IClearingHouseStructures.BalanceAdjustments public balanceAdjustments;\n    LiquidityPosition.Info public lp;\n    VPoolWrapperMock public wrapper;\n\n    constructor() {\n        wrapper = new VPoolWrapperMock();\n    }\n\n    function initialize(int24 tickLower, int24 tickUpper) external {\n        lp.initialize(tickLower, tickUpper);\n    }\n\n    function updateCheckpoints() external {\n        IVPoolWrapper.WrapperValuesInside memory wrapperValuesInside = wrapper.getValuesInside(\n            lp.tickLower,\n            lp.tickUpper\n        );\n        lp.update(0, 0, wrapperValuesInside, balanceAdjustments);\n    }\n\n    function netPosition(uint160 sqrtPriceCurrent) public view returns (int256) {\n        return lp.netPosition(sqrtPriceCurrent);\n    }\n\n    function liquidityChange(int128 liquidity) public {\n        protocol.pools[0].vPoolWrapper = wrapper;\n        protocol.pools[0].vPool = wrapper.vPool();\n        lp.liquidityChange(0, 0, liquidity, balanceAdjustments, protocol);\n    }\n\n    function maxNetPosition() public view returns (uint256) {\n        return lp.maxNetPosition();\n    }\n\n    function marketValue(uint160 sqrtPriceCurrent) public view returns (int256) {\n        return lp.marketValue(sqrtPriceCurrent, wrapper);\n    }\n}\n"
    },
    "contracts/protocol/wrapper/VPoolWrapperDeployer.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\n\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\n\nimport { Governable } from '../../utils/Governable.sol';\nimport { ClearingHouseDeployer } from '../clearinghouse/ClearingHouseDeployer.sol';\n\nabstract contract VPoolWrapperDeployer is Governable, ClearingHouseDeployer {\n    address public vPoolWrapperLogicAddress;\n\n    error IllegalAddress(address addr);\n\n    constructor(address _vPoolWrapperLogicAddress) {\n        vPoolWrapperLogicAddress = _vPoolWrapperLogicAddress;\n    }\n\n    /// @notice Admin method to set latest implementation logic for VPoolWrapper\n    /// @param _vPoolWrapperLogicAddress: new logic address\n    /// @dev When a new vPoolWrapperLogic is deployed, make sure that the initialize method is called.\n    function setVPoolWrapperLogicAddress(address _vPoolWrapperLogicAddress) external onlyGovernance {\n        if (_vPoolWrapperLogicAddress == address(0)) {\n            revert IllegalAddress(address(0));\n        }\n\n        vPoolWrapperLogicAddress = _vPoolWrapperLogicAddress;\n    }\n\n    function _deployProxyForVPoolWrapperAndInitialize(IVPoolWrapper.InitializeVPoolWrapperParams memory params)\n        internal\n        returns (IVPoolWrapper vPoolWrapper)\n    {\n        return\n            IVPoolWrapper(\n                address(\n                    new TransparentUpgradeableProxy(\n                        address(vPoolWrapperLogicAddress),\n                        address(proxyAdmin),\n                        abi.encodeCall(IVPoolWrapper.__initialize_VPoolWrapper, (params))\n                    )\n                )\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/protocol/clearinghouse/ClearingHouseDeployer.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport { ProxyAdminDeployer } from '../../utils/ProxyAdminDeployer.sol';\n\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\nimport { IClearingHouseSystemActions } from '../../interfaces/clearinghouse/IClearingHouseSystemActions.sol';\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\nimport { IOracle } from '../../interfaces/IOracle.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\n\n/// @notice Manages deployment for ClearingHouseProxy\n/// @dev ClearingHouse proxy is deployed only once\nabstract contract ClearingHouseDeployer is ProxyAdminDeployer {\n    struct DeployClearingHouseParams {\n        address clearingHouseLogicAddress;\n        IERC20 settlementToken;\n        IOracle settlementTokenOracle;\n        IInsuranceFund insuranceFund;\n        IVQuote vQuote;\n        IOracle nativeOracle;\n    }\n\n    function _deployProxyForClearingHouseAndInitialize(DeployClearingHouseParams memory params)\n        internal\n        returns (IClearingHouse)\n    {\n        return\n            IClearingHouse(\n                address(\n                    new TransparentUpgradeableProxy(\n                        params.clearingHouseLogicAddress,\n                        address(proxyAdmin),\n                        abi.encodeCall(\n                            IClearingHouseSystemActions.__initialize_ClearingHouse,\n                            (\n                                address(this), // RageTradeFactory\n                                params.settlementToken,\n                                params.settlementTokenOracle,\n                                params.insuranceFund,\n                                params.vQuote,\n                                params.nativeOracle\n                            )\n                        )\n                    )\n                )\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/utils/ProxyAdminDeployer.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { ProxyAdmin } from '@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol';\n\nabstract contract ProxyAdminDeployer {\n    ProxyAdmin public proxyAdmin;\n\n    function _deployProxyAdmin() internal returns (ProxyAdmin) {\n        return new ProxyAdmin();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/protocol/RageTradeFactory.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport { ProxyAdmin } from '@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol';\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { IUniswapV3Factory } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Factory.sol';\n\nimport { ClearingHouseDeployer } from './clearinghouse/ClearingHouseDeployer.sol';\nimport { InsuranceFundDeployer } from './insurancefund/InsuranceFundDeployer.sol';\nimport { VQuoteDeployer } from './tokens/VQuoteDeployer.sol';\nimport { VTokenDeployer } from './tokens/VTokenDeployer.sol';\nimport { VToken } from './tokens/VToken.sol';\nimport { VPoolWrapperDeployer } from './wrapper/VPoolWrapperDeployer.sol';\n\nimport { IClearingHouse } from '../interfaces/IClearingHouse.sol';\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IInsuranceFund } from '../interfaces/IInsuranceFund.sol';\nimport { IOracle } from '../interfaces/IOracle.sol';\nimport { IVQuote } from '../interfaces/IVQuote.sol';\nimport { IVPoolWrapper } from '../interfaces/IVPoolWrapper.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { PriceMath } from '../libraries/PriceMath.sol';\n\nimport { SettlementTokenOracle } from '../oracles/SettlementTokenOracle.sol';\nimport { Governable } from '../utils/Governable.sol';\n\nimport { UNISWAP_V3_FACTORY_ADDRESS, UNISWAP_V3_DEFAULT_FEE_TIER } from '../utils/constants.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract RageTradeFactory is\n    Governable,\n    ClearingHouseDeployer,\n    InsuranceFundDeployer,\n    VQuoteDeployer,\n    VPoolWrapperDeployer,\n    VTokenDeployer\n{\n    using AddressHelper for address;\n    using PriceMath for uint256;\n\n    IVQuote public immutable vQuote;\n    IClearingHouse public immutable clearingHouse;\n    // IInsuranceFund public insuranceFund; // stored in ClearingHouse, replacable from there\n\n    event PoolInitialized(IUniswapV3Pool vPool, IVToken vToken, IVPoolWrapper vPoolWrapper);\n\n    /// @notice Sets up the protocol by deploying necessary core contracts\n    /// @dev Need to deploy logic contracts for ClearingHouse, VPoolWrapper, InsuranceFund prior to this\n    constructor(\n        address clearingHouseLogicAddress,\n        address _vPoolWrapperLogicAddress,\n        address insuranceFundLogicAddress,\n        IERC20Metadata settlementToken,\n        IOracle nativeOracle\n    ) VPoolWrapperDeployer(_vPoolWrapperLogicAddress) {\n        proxyAdmin = _deployProxyAdmin();\n        proxyAdmin.transferOwnership(msg.sender);\n\n        // deploys VQuote contract at an address which has most significant nibble as \"f\"\n        vQuote = _deployVQuote(settlementToken.decimals());\n\n        // deploys InsuranceFund proxy\n        IInsuranceFund insuranceFund = _deployProxyForInsuranceFund(insuranceFundLogicAddress);\n\n        SettlementTokenOracle settlementTokenOracle = new SettlementTokenOracle();\n\n        // deploys a proxy for ClearingHouse, and initialize it as well\n        clearingHouse = _deployProxyForClearingHouseAndInitialize(\n            ClearingHouseDeployer.DeployClearingHouseParams(\n                clearingHouseLogicAddress,\n                settlementToken,\n                settlementTokenOracle,\n                insuranceFund,\n                vQuote,\n                nativeOracle\n            )\n        );\n        clearingHouse.transferGovernance(msg.sender);\n        clearingHouse.transferTeamMultisig(msg.sender);\n\n        _initializeInsuranceFund(insuranceFund, settlementToken, clearingHouse);\n    }\n\n    struct InitializePoolParams {\n        VTokenDeployer.DeployVTokenParams deployVTokenParams;\n        IClearingHouseStructures.PoolSettings poolInitialSettings;\n        uint24 liquidityFeePips;\n        uint24 protocolFeePips;\n        uint16 slotsToInitialize;\n    }\n\n    /// @notice Sets up a new Rage Trade Pool by deploying necessary contracts\n    /// @dev An already deployed oracle contract address (implementing IOracle) is needed prior to using this\n    /// @param initializePoolParams parameters for initializing the pool\n    function initializePool(InitializePoolParams calldata initializePoolParams) external onlyGovernance {\n        // TODO change wrapper deployment to use CREATE2 so that we can pass wrapper address\n        // as an argument to vtoken constructer and make wrapper variable as immutable.\n        // this will save sload on all vtoken mints (swaps liqudity adds).\n        // STEP 1: Deploy the virtual token ERC20, such that it will be token0\n        IVToken vToken = _deployVToken(initializePoolParams.deployVTokenParams);\n\n        // STEP 2: Deploy vPool (token0=vToken, token1=vQuote) on actual uniswap\n        IUniswapV3Pool vPool = _createUniswapV3Pool(vToken);\n\n        // STEP 3: Initialize the price on the vPool\n        vPool.initialize(\n            initializePoolParams\n                .poolInitialSettings\n                .oracle\n                .getTwapPriceX128(initializePoolParams.poolInitialSettings.twapDuration)\n                .toSqrtPriceX96()\n        );\n\n        vPool.increaseObservationCardinalityNext(initializePoolParams.slotsToInitialize);\n\n        // STEP 4: Deploys a proxy for the wrapper contract for the vPool, and initialize it as well\n        IVPoolWrapper vPoolWrapper = _deployProxyForVPoolWrapperAndInitialize(\n            IVPoolWrapper.InitializeVPoolWrapperParams(\n                clearingHouse,\n                vToken,\n                vQuote,\n                vPool,\n                initializePoolParams.liquidityFeePips,\n                initializePoolParams.protocolFeePips,\n                UNISWAP_V3_DEFAULT_FEE_TIER\n            )\n        );\n\n        // STEP 5: Authorize vPoolWrapper in vToken and vQuote, for minting/burning whenever needed\n        vQuote.authorize(address(vPoolWrapper));\n        vToken.setVPoolWrapper(address(vPoolWrapper));\n        clearingHouse.registerPool(\n            IClearingHouseStructures.Pool(vToken, vPool, vPoolWrapper, initializePoolParams.poolInitialSettings)\n        );\n\n        emit PoolInitialized(vPool, vToken, vPoolWrapper);\n    }\n\n    function _createUniswapV3Pool(IVToken vToken) internal returns (IUniswapV3Pool) {\n        return\n            IUniswapV3Pool(\n                IUniswapV3Factory(UNISWAP_V3_FACTORY_ADDRESS).createPool(\n                    address(vQuote),\n                    address(vToken),\n                    UNISWAP_V3_DEFAULT_FEE_TIER\n                )\n            );\n    }\n\n    function _isIVTokenAddressGood(address addr) internal view virtual override returns (bool) {\n        uint32 poolId = addr.truncate();\n        return\n            // Zero element is considered empty in Uint32L8Array.sol\n            poolId != 0 &&\n            // vToken should be token0 and vQuote should be token1 in UniswapV3Pool\n            (uint160(addr) < uint160(address(vQuote))) &&\n            // there should not be a collision in poolIds\n            clearingHouse.isPoolIdAvailable(poolId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/protocol/insurancefund/InsuranceFundDeployer.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\n\nimport { ProxyAdminDeployer } from '../../utils/ProxyAdminDeployer.sol';\n\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\n\nabstract contract InsuranceFundDeployer is ProxyAdminDeployer {\n    function _deployProxyForInsuranceFund(address insuranceFundLogicAddress) internal returns (IInsuranceFund) {\n        return\n            IInsuranceFund(\n                address(new TransparentUpgradeableProxy(insuranceFundLogicAddress, address(proxyAdmin), hex''))\n            );\n    }\n\n    function _initializeInsuranceFund(\n        IInsuranceFund insuranceFund,\n        IERC20 settlementToken,\n        IClearingHouse clearingHouse\n    ) internal {\n        insuranceFund.__initialize_InsuranceFund(\n            settlementToken,\n            clearingHouse,\n            'RageTrade iSettlementToken',\n            'iSettlementToken'\n        );\n    }\n}\n"
    },
    "contracts/protocol/tokens/VQuoteDeployer.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\n\nimport { GoodAddressDeployer } from '../../libraries/GoodAddressDeployer.sol';\n\nimport { VQuote } from '../tokens/VQuote.sol';\n\nabstract contract VQuoteDeployer {\n    function _deployVQuote(uint8 rsettlementTokenecimals) internal returns (IVQuote vQuote) {\n        return\n            IVQuote(\n                GoodAddressDeployer.deploy(\n                    0,\n                    abi.encodePacked(type(VQuote).creationCode, abi.encode(rsettlementTokenecimals)),\n                    _isVQuoteAddressGood\n                )\n            );\n    }\n\n    // returns true if most significant hex char of address is \"f\"\n    function _isVQuoteAddressGood(address addr) private pure returns (bool) {\n        return (uint160(addr) >> 156) == 0xf;\n    }\n}\n"
    },
    "contracts/protocol/tokens/VTokenDeployer.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Create2 } from '@openzeppelin/contracts/utils/Create2.sol';\n\nimport { GoodAddressDeployer } from '../../libraries/GoodAddressDeployer.sol';\n\nimport { VToken, IVToken } from './VToken.sol';\n\nabstract contract VTokenDeployer {\n    struct DeployVTokenParams {\n        string vTokenName;\n        string vTokenSymbol;\n        uint8 cTokenDecimals;\n    }\n\n    /// @notice Deploys contract VToken at an address such that the last 4 bytes of contract address is unique\n    /// @dev Use of CREATE2 is not to recompute address in future, but just to have unique last 4 bytes\n    /// @param params: parameters used for construction, see above struct\n    /// @return vToken : the deployed VToken contract\n    function _deployVToken(DeployVTokenParams calldata params) internal returns (IVToken vToken) {\n        bytes memory bytecode = abi.encodePacked(\n            type(VToken).creationCode,\n            abi.encode(params.vTokenName, params.vTokenSymbol, params.cTokenDecimals)\n        );\n\n        vToken = IVToken(GoodAddressDeployer.deploy(0, bytecode, _isIVTokenAddressGood));\n    }\n\n    /// @notice Checks if it is fine to deploy vToken at the provided address\n    /// @dev This method is implemented in RageTradeFactory\n    /// @param addr potential address of vToken\n    /// @return true if last 4 bytes are non-zero,\n    function _isIVTokenAddressGood(address addr) internal view virtual returns (bool);\n}\n"
    },
    "contracts/protocol/tokens/VToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\n// pragma solidity ^0.7.6;\n\npragma solidity ^0.8.9;\n\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport { IVToken } from '../../interfaces/IVToken.sol';\n\ncontract VToken is ERC20, IVToken {\n    address public vPoolWrapper; // TODO change to immutable\n\n    uint8 immutable _decimals;\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    constructor(\n        string memory vTokenName,\n        string memory vTokenSymbol,\n        uint8 cTokenDecimals\n    ) ERC20(vTokenName, vTokenSymbol) {\n        _decimals = cTokenDecimals;\n    }\n\n    error Unauthorised();\n\n    function setVPoolWrapper(address _vPoolWrapper) external {\n        if (vPoolWrapper == address(0)) {\n            vPoolWrapper = _vPoolWrapper;\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256\n    ) internal view override {\n        // transfer cases:\n        // - vPoolWrapper mints tokens at uniswap pool address\n        // - uniswap v3 pool transfers tokens to vPoolWrapper\n        // - vPoolWrapper burns all tokens it has, at its own address\n        if (!(from == address(0) || to == address(0) || from == vPoolWrapper || to == vPoolWrapper)) {\n            revert Unauthorised();\n        }\n    }\n\n    function mint(address receiver, uint256 amount) external {\n        if (msg.sender != vPoolWrapper) {\n            revert Unauthorised();\n        }\n        _mint(receiver, amount);\n    }\n\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/oracles/SettlementTokenOracle.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IOracle } from '../interfaces/IOracle.sol';\n\ncontract SettlementTokenOracle is IOracle {\n    function getTwapPriceX128(uint32) external pure returns (uint256 priceX128) {\n        priceX128 = 1 << 128;\n    }\n}\n"
    },
    "contracts/libraries/GoodAddressDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { Create2 } from '@openzeppelin/contracts/utils/Create2.sol';\n\n/// @title Deploys a new contract at a desirable address\nlibrary GoodAddressDeployer {\n    /// @notice Deploys contract at an address such that the function isAddressGood(address) returns true\n    /// @dev Use of CREATE2 is not to recompute address in future, but just to have the address good\n    /// @param amount: constructor payable ETH amount\n    /// @param bytecode: creation bytecode (should include constructor args)\n    /// @param isAddressGood: boolean function that should return true for good addresses\n    function deploy(\n        uint256 amount,\n        bytes memory bytecode,\n        function(address) returns (bool) isAddressGood\n    ) internal returns (address computed) {\n        return deploy(amount, bytecode, isAddressGood, uint256(blockhash(block.number - 1)));\n    }\n\n    /// @notice Deploys contract at an address such that the function isAddressGood(address) returns true\n    /// @dev Use of CREATE2 is not to recompute address in future, but just to have the address good\n    /// @param amount: constructor payable ETH amount\n    /// @param bytecode: creation bytecode (should include constructor args)\n    /// @param isAddressGood: boolean function that should return true for good addresses\n    /// @param salt: initial salt, should be pseudo-randomized so that there won't be more for loop iterations if\n    ///     state used in isAddressGood is updated after deployment\n    function deploy(\n        uint256 amount,\n        bytes memory bytecode,\n        function(address) returns (bool) isAddressGood,\n        uint256 salt\n    ) internal returns (address computed) {\n        bytes32 byteCodeHash = keccak256(bytecode);\n\n        while (true) {\n            computed = Create2.computeAddress(bytes32(salt), byteCodeHash);\n\n            if (isAddressGood(computed)) {\n                // we found good address, so stop the for loop and proceed\n                break;\n            } else {\n                // since address is not what we'd like, using a different salt\n                unchecked {\n                    salt++;\n                }\n            }\n        }\n\n        address deployed = Create2.deploy(amount, bytes32(salt), bytecode);\n        assert(computed == deployed);\n    }\n}\n"
    },
    "contracts/protocol/tokens/VQuote.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\n// pragma solidity ^0.7.6;\n\npragma solidity ^0.8.9;\n\nimport { ERC20 } from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\nimport { IVQuote } from '../../interfaces/IVQuote.sol';\nimport { IVPoolWrapper } from '../../interfaces/IVPoolWrapper.sol';\n\ncontract VQuote is IVQuote, ERC20('Rage Trade Virtual Quote Token', 'vQuote'), Ownable {\n    mapping(address => bool) public isAuth;\n\n    uint8 immutable _decimals;\n\n    constructor(uint8 decimals_) {\n        _decimals = decimals_;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256\n    ) internal view override {\n        // transfer cases:\n        // - vPoolWrapper mints tokens at uniswap pool address\n        // - uniswap v3 pool transfers tokens to vPoolWrapper\n        // - vPoolWrapper burns all tokens it has, at its own address\n        if (!(from == address(0) || to == address(0) || isAuth[from] || isAuth[to])) {\n            revert Unauthorised();\n        }\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    function authorize(address vPoolWrapper) external onlyOwner {\n        isAuth[vPoolWrapper] = true;\n    }\n\n    error Unauthorised();\n\n    function mint(address account, uint256 amount) external {\n        if (!isAuth[msg.sender]) {\n            revert Unauthorised();\n        }\n        _mint(account, amount);\n    }\n\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address) {\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/utils/TxGasPriceLimit.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Governable } from './Governable.sol';\n\nabstract contract TxGasPriceLimit is Governable {\n    uint256 public txGasPriceLimit;\n\n    error ExcessTxGasPrice(uint256 txGasPrice, uint256 limit);\n\n    modifier checkTxGasPrice(uint256 txGasPrice) {\n        if (txGasPrice > txGasPriceLimit) {\n            revert ExcessTxGasPrice(txGasPrice, txGasPriceLimit);\n        }\n        _;\n    }\n\n    function setTxGasPriceLimit(uint256 _txGasPriceLimit) external onlyGovernanceOrTeamMultisig {\n        txGasPriceLimit = _txGasPriceLimit;\n    }\n}\n"
    },
    "contracts/protocol/clearinghouse/ClearingHouseEthereum.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\nimport { AddressHelper } from '../../libraries/AddressHelper.sol';\nimport { Calldata } from '../../libraries/Calldata.sol';\nimport { PriceMath } from '../../libraries/PriceMath.sol';\n\nimport { TxGasPriceLimit } from '../../utils/TxGasPriceLimit.sol';\n\nimport { ClearingHouse } from './ClearingHouse.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\n/// @notice ClearingHouse with gas fee refunds for liquidations on Ethereum L1 like chains\ncontract ClearingHouseEthereum is ClearingHouse, TxGasPriceLimit {\n    using AddressHelper for address;\n    using FullMath for uint256;\n    using PriceMath for uint160;\n\n    function _getFixFee(uint256 gasUnits) internal view override checkTxGasPrice(tx.gasprice) returns (uint256 fixFee) {\n        // incase user does not want refund, use zero\n        if (gasUnits == 0 || address(nativeOracle).isZero()) return 0;\n\n        // if call from EOA then include intrinsic, i.e. does not refund intrinsic to calls from contract\n        if (msg.sender == tx.origin) {\n            gasUnits += 21000 + Calldata.calculateCostUnits(msg.data);\n        }\n\n        uint256 nativeAmount = tx.gasprice * gasUnits;\n        uint256 nativePriceInSettlementToken = nativeOracle.getTwapPriceX128(5 minutes);\n        return nativeAmount.mulDiv(nativePriceInSettlementToken, FixedPoint128.Q128);\n    }\n}\n"
    },
    "contracts/test/mocks/RealTokenMock1.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\n// pragma solidity ^0.7.6;\n\n// if importing uniswap v3 libraries this might not work\npragma solidity ^0.8.9;\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\n\ncontract RealTokenMockDecimals is ERC20PresetMinterPauser {\n    uint8 immutable _decimals;\n\n    constructor(uint8 decimalsToSet) ERC20PresetMinterPauser('WETH', 'WETH') {\n        _decimals = decimalsToSet;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/test/mocks/SettlementTokenMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { ERC20PresetMinterPauser } from '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\n\ncontract SettlementTokenMock is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser('USDC', 'USDC') {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/test/AccountTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Account } from '../libraries/Account.sol';\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { CollateralDeposit } from '../libraries/CollateralDeposit.sol';\nimport { LiquidityPositionSet } from '../libraries/LiquidityPositionSet.sol';\nimport { Protocol } from '../libraries/Protocol.sol';\nimport { VPoolWrapperMock } from './mocks/VPoolWrapperMock.sol';\nimport { VTokenPosition } from '../libraries/VTokenPosition.sol';\nimport { VTokenPositionSet } from '../libraries/VTokenPositionSet.sol';\nimport { LiquidityPosition } from '../libraries/LiquidityPosition.sol';\n\nimport { IClearingHouseEnums } from '../interfaces/clearinghouse/IClearingHouseEnums.sol';\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\nimport { IVQuote } from '../interfaces/IVQuote.sol';\nimport { IOracle } from '../interfaces/IOracle.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract AccountTest {\n    using AddressHelper for address;\n    using AddressHelper for IERC20;\n    using AddressHelper for IVToken;\n\n    using Account for Account.Info;\n    using VTokenPosition for VTokenPosition.Info;\n    using VTokenPositionSet for VTokenPosition.Set;\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using CollateralDeposit for CollateralDeposit.Set;\n\n    mapping(uint256 => Account.Info) accounts;\n    Protocol.Info public protocol;\n    uint256 public fixFee;\n\n    uint256 public numAccounts;\n\n    constructor() {}\n\n    function setAccountStorage(\n        IClearingHouseStructures.LiquidationParams calldata liquidationParams,\n        uint256 minRequiredMargin,\n        uint256 removeLimitOrderFee,\n        uint256 minimumOrderNotional,\n        uint256 fixFee_,\n        address settlementToken\n    ) external {\n        protocol.liquidationParams = liquidationParams;\n        protocol.minRequiredMargin = minRequiredMargin;\n        protocol.removeLimitOrderFee = removeLimitOrderFee;\n        protocol.minimumOrderNotional = minimumOrderNotional;\n        protocol.settlementToken = IERC20(settlementToken);\n        fixFee = fixFee_;\n    }\n\n    function registerPool(IClearingHouseStructures.Pool calldata poolInfo) external {\n        uint32 poolId = poolInfo.vToken.truncate();\n\n        // pool will not be registered twice by the rage trade factory\n        assert(protocol.pools[poolId].vToken.isZero());\n\n        protocol.pools[poolId] = poolInfo;\n    }\n\n    function setVQuoteAddress(IVQuote _vQuote) external {\n        protocol.vQuote = _vQuote;\n    }\n\n    function createAccount() external {\n        Account.Info storage newAccount = accounts[numAccounts];\n        newAccount.owner = msg.sender;\n        // newAccount.tokenPositions.accountId = numAccounts;\n        numAccounts++;\n    }\n\n    function cleanPositions(uint256 accountId) external {\n        accounts[accountId].tokenPositions.liquidateLiquidityPositions(accountId, protocol);\n        VTokenPosition.Set storage set = accounts[accountId].tokenPositions;\n        VTokenPosition.Info storage tokenPosition;\n        IClearingHouseStructures.BalanceAdjustments memory balanceAdjustments;\n\n        set.vQuoteBalance = 0;\n\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 poolId = set.active[i];\n            if (poolId == 0) break;\n            tokenPosition = set.positions[poolId];\n            balanceAdjustments = IClearingHouseStructures.BalanceAdjustments(\n                0,\n                -tokenPosition.balance,\n                -tokenPosition.netTraderPosition\n            );\n            set.update(accountId, balanceAdjustments, poolId, protocol);\n        }\n    }\n\n    function cleanDeposits(uint256 accountId) external {\n        accounts[accountId].tokenPositions.liquidateLiquidityPositions(accountId, protocol);\n        CollateralDeposit.Set storage set = accounts[accountId].collateralDeposits;\n        uint256 deposit;\n\n        for (uint8 i = 0; i < set.active.length; i++) {\n            uint32 collateralId = set.active[i];\n            if (collateralId == 0) break;\n            deposit = set.deposits[collateralId];\n            set.decreaseBalance(collateralId, deposit);\n        }\n    }\n\n    function initToken(address vToken) external {\n        protocol.pools[vToken.truncate()].vToken = IVToken(vToken);\n    }\n\n    function initCollateral(\n        IERC20 cToken,\n        IOracle oracle,\n        uint32 twapDuration\n    ) external {\n        IClearingHouseStructures.Collateral memory collateral = IClearingHouseStructures.Collateral(\n            cToken,\n            IClearingHouseStructures.CollateralSettings(oracle, twapDuration, true)\n        );\n        protocol.collaterals[collateral.token.truncate()] = collateral;\n    }\n\n    function addMargin(\n        uint256 accountId,\n        address realTokenAddress,\n        uint256 amount\n    ) external {\n        accounts[accountId].addMargin(realTokenAddress.truncate(), amount);\n    }\n\n    function removeMargin(\n        uint256 accountId,\n        address realTokenAddress,\n        uint256 amount\n    ) external {\n        accounts[accountId].removeMargin(realTokenAddress.truncate(), amount, protocol, true);\n    }\n\n    function updateProfit(uint256 accountId, int256 amount) external {\n        accounts[accountId].updateProfit(amount, protocol, true);\n    }\n\n    function swapTokenAmount(\n        uint256 accountId,\n        address vToken,\n        int256 amount\n    ) external {\n        accounts[accountId].swapToken(\n            vToken.truncate(),\n            IClearingHouseStructures.SwapParams(amount, 0, false, false),\n            protocol,\n            true\n        );\n    }\n\n    function swapTokenNotional(\n        uint256 accountId,\n        address vToken,\n        int256 amount\n    ) external {\n        accounts[accountId].swapToken(\n            vToken.truncate(),\n            IClearingHouseStructures.SwapParams(amount, 0, true, false),\n            protocol,\n            true\n        );\n    }\n\n    function liquidityChange(\n        uint256 accountId,\n        address vToken,\n        IClearingHouseStructures.LiquidityChangeParams memory liquidityChangeParams\n    ) external {\n        accounts[accountId].liquidityChange(vToken.truncate(), liquidityChangeParams, protocol, true);\n    }\n\n    function liquidateLiquidityPositions(uint256 accountId)\n        external\n        returns (int256 keeperFee, int256 insuranceFundFee)\n    {\n        return accounts[accountId].liquidateLiquidityPositions(fixFee, protocol);\n    }\n\n    function getLiquidationPriceX128AndFee(int256 tokensToTrade, address vToken)\n        external\n        view\n        returns (\n            uint256 liquidationPriceX128,\n            uint256 liquidatorPriceX128,\n            int256 insuranceFundFee\n        )\n    {\n        return Account._getLiquidationPriceX128AndFee(tokensToTrade, vToken.truncate(), protocol);\n    }\n\n    function liquidateTokenPosition(\n        uint256 accountId,\n        uint256 liquidatorAccountId,\n        address vToken\n    ) external {\n        accounts[accountId].liquidateTokenPosition(\n            accounts[liquidatorAccountId],\n            10000,\n            vToken.truncate(),\n            fixFee,\n            protocol,\n            true\n        );\n    }\n\n    function removeLimitOrder(\n        uint256 accountId,\n        address vToken,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 removeLimitOrderFee\n    ) external {\n        accounts[accountId].removeLimitOrder(vToken.truncate(), tickLower, tickUpper, removeLimitOrderFee, protocol);\n    }\n\n    function getAccountDepositBalance(uint256 accountId, address vToken) external view returns (uint256) {\n        return accounts[accountId].collateralDeposits.deposits[vToken.truncate()];\n    }\n\n    function getAccountTokenDetails(uint256 accountId, address vToken)\n        external\n        view\n        returns (\n            int256 balance,\n            int256 netTraderPosition,\n            int256 sumAChkpt\n        )\n    {\n        VTokenPosition.Info storage vTokenPosition = accounts[accountId].tokenPositions.positions[vToken.truncate()];\n        return (vTokenPosition.balance, vTokenPosition.netTraderPosition, vTokenPosition.sumAX128Chkpt);\n    }\n\n    function getAccountQuoteBalance(uint256 accountId) external view returns (int256 balance) {\n        return accounts[accountId].tokenPositions.vQuoteBalance;\n    }\n\n    function getAccountLiquidityPositionNum(uint256 accountId, address vToken) external view returns (uint8 num) {\n        LiquidityPosition.Set storage liquidityPositionSet = accounts[accountId]\n            .tokenPositions\n            .positions[vToken.truncate()]\n            .liquidityPositions;\n\n        for (num = 0; num < liquidityPositionSet.active.length; num++) {\n            if (liquidityPositionSet.active[num] == 0) break;\n        }\n    }\n\n    function getAccountLiquidityPositionDetails(\n        uint256 accountId,\n        address vToken,\n        uint8 num\n    )\n        external\n        view\n        returns (\n            int24 tickLower,\n            int24 tickUpper,\n            IClearingHouseEnums.LimitOrderType limitOrderType,\n            uint128 liquidity,\n            int256 vTokenAmountIn,\n            int256 sumALastX128,\n            int256 sumBInsideLastX128,\n            int256 sumFpInsideLastX128,\n            uint256 sumFeeInsideLastX128\n        )\n    {\n        LiquidityPosition.Set storage liquidityPositionSet = accounts[accountId]\n            .tokenPositions\n            .positions[vToken.truncate()]\n            .liquidityPositions;\n        LiquidityPosition.Info storage liquidityPosition = liquidityPositionSet.positions[\n            liquidityPositionSet.active[num]\n        ];\n\n        return (\n            liquidityPosition.tickLower,\n            liquidityPosition.tickUpper,\n            liquidityPosition.limitOrderType,\n            liquidityPosition.liquidity,\n            liquidityPosition.vTokenAmountIn,\n            liquidityPosition.sumALastX128,\n            liquidityPosition.sumBInsideLastX128,\n            liquidityPosition.sumFpInsideLastX128,\n            liquidityPosition.sumFeeInsideLastX128\n        );\n    }\n\n    function getAccountValueAndRequiredMargin(uint256 accountId, bool isInitialMargin)\n        external\n        view\n        returns (int256 accountMarketValue, int256 requiredMargin)\n    {\n        (accountMarketValue, requiredMargin) = accounts[accountId].getAccountValueAndRequiredMargin(\n            isInitialMargin,\n            protocol\n        );\n    }\n\n    function getAccountProfit(uint256 accountId) external view returns (int256 profit) {\n        return accounts[accountId].tokenPositions.getAccountMarketValue(protocol);\n    }\n}\n"
    },
    "contracts/test/SimulateSwapTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { TickMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/TickMath.sol';\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\nimport { IUniswapV3SwapCallback } from '@uniswap/v3-core-0.8-support/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\nimport { FundingPayment } from '../libraries/FundingPayment.sol';\nimport { SimulateSwap } from '../libraries/SimulateSwap.sol';\nimport { Tick } from '../libraries/Tick.sol';\n\nimport { IOracle } from '../interfaces/IOracle.sol';\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract SimulateSwapTest is IUniswapV3SwapCallback {\n    using FullMath for uint256;\n    using FundingPayment for FundingPayment.Info;\n    using SafeERC20 for IERC20;\n    using SimulateSwap for IUniswapV3Pool;\n    using Tick for mapping(int24 => Tick.Info);\n\n    IUniswapV3Pool vPool;\n\n    struct SwapStep {\n        SimulateSwap.SwapState state;\n        SimulateSwap.StepComputations step;\n    }\n    SimulateSwap.SwapCache _cache;\n    SwapStep[] _steps;\n\n    FundingPayment.Info public fpGlobal;\n    uint256 public extendedFeeGrowthOutsideX128;\n    mapping(int24 => Tick.Info) public ticksExtended;\n\n    constructor(IUniswapV3Pool vPool_) {\n        vPool = vPool_;\n    }\n\n    function clearSwapCache() external {\n        delete _cache;\n        delete _steps;\n    }\n\n    function sqrtPrice() external view returns (uint160 sq) {\n        (sq, , , , , , ) = vPool.slot0();\n    }\n\n    function simulateSwap1(\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) public returns (int256 amount0, int256 amount1) {\n        return vPool.simulateSwap(zeroForOne, amountSpecified, sqrtPriceLimitX96, _onSwapSwap);\n    }\n\n    function simulateSwap2(\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    )\n        public\n        returns (\n            int256 amount0,\n            int256 amount1,\n            SimulateSwap.SwapCache memory cache,\n            SwapStep[] memory steps\n        )\n    {\n        (amount0, amount1) = vPool.simulateSwap(zeroForOne, amountSpecified, sqrtPriceLimitX96, _onSwapSwap);\n        cache = _cache;\n        steps = _steps;\n    }\n\n    function simulateSwap3(\n        bool swapVTokenForVQuote,\n        int256 amountSpecified,\n        uint24 fee\n    ) public returns (int256 vTokenIn, int256 vQuoteIn) {\n        // case isNotional true\n        // amountSpecified is positive\n        return\n            vPool.simulateSwap(\n                swapVTokenForVQuote,\n                amountSpecified,\n                swapVTokenForVQuote ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1,\n                fee,\n                _onSwapSwap\n            );\n    }\n\n    function _onSwapSwap(\n        bool,\n        SimulateSwap.SwapCache memory cache,\n        SimulateSwap.SwapState memory state,\n        SimulateSwap.StepComputations memory step\n    ) internal {\n        // for reading\n        _cache = cache;\n        _steps.push(SwapStep({ state: state, step: step }));\n    }\n\n    function swap(\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96\n    ) external returns (int256 amount0, int256 amount1) {\n        return vPool.swap(msg.sender, zeroForOne, amountSpecified, sqrtPriceLimitX96, abi.encode(msg.sender));\n    }\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external {\n        require(msg.sender == address(vPool));\n        address receipient = abi.decode(data, (address));\n        if (amount0Delta > 0) {\n            IERC20(vPool.token0()).safeTransferFrom(receipient, address(vPool), uint256(amount0Delta));\n        }\n        if (amount1Delta > 0) {\n            IERC20(vPool.token1()).safeTransferFrom(receipient, address(vPool), uint256(amount1Delta));\n        }\n    }\n}\n"
    },
    "contracts/test/mocks/OracleMock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IOracle } from '../../interfaces/IOracle.sol';\n\nimport { PriceMath } from '../../libraries/PriceMath.sol';\n\ncontract OracleMock is IOracle {\n    using PriceMath for uint256;\n    using PriceMath for uint160;\n\n    uint256 priceX128;\n\n    constructor() {\n        setPriceX128(1 << 128);\n    }\n\n    function getTwapPriceX128(uint32) external view returns (uint256) {\n        return priceX128;\n    }\n\n    function getTwapSqrtPriceX96(uint32) external view returns (uint160 sqrtPriceX96) {\n        sqrtPriceX96 = priceX128.toSqrtPriceX96();\n    }\n\n    function setSqrtPriceX96(uint160 _sqrtPriceX96) public {\n        priceX128 = _sqrtPriceX96.toPriceX128();\n    }\n\n    function setPriceX128(uint256 _priceX128) public {\n        priceX128 = _priceX128;\n    }\n}\n"
    },
    "contracts/test/PriceMathTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { PriceMath } from '../libraries/PriceMath.sol';\n\ncontract PriceMathTest {\n    function toPriceX128(uint160 sqrtPriceX96) public pure returns (uint256 priceX128) {\n        return PriceMath.toPriceX128(sqrtPriceX96);\n    }\n\n    function toSqrtPriceX96(uint256 priceX128) public pure returns (uint160 sqrtPriceX96) {\n        return PriceMath.toSqrtPriceX96(priceX128);\n    }\n}\n"
    },
    "contracts/protocol/clearinghouse/ClearingHouseArbitrum.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { ArbAggregator } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbAggregator.sol';\nimport { ArbSys } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbSys.sol';\nimport { ArbGasInfo } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbGasInfo.sol';\n\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\n\nimport { AddressHelper } from '../../libraries/AddressHelper.sol';\nimport { Arbitrum } from '../../libraries/Arbitrum.sol';\nimport { PriceMath } from '../../libraries/PriceMath.sol';\n\nimport { TxGasPriceLimit } from '../../utils/TxGasPriceLimit.sol';\n\nimport { ClearingHouse } from './ClearingHouse.sol';\nimport { IERC20Metadata } from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\ncontract ClearingHouseArbitrum is ClearingHouse, TxGasPriceLimit {\n    using AddressHelper for address;\n    using FullMath for uint256;\n    using PriceMath for uint160;\n\n    modifier checkGasUsedClaim(uint256 l2GasUsedClaim) override {\n        if (l2GasUsedClaim > 0) {\n            // computation + storage\n            uint256 initialL2Gas = gasleft() + Arbitrum.getStorageGasAvailable();\n            _;\n            uint256 l2GasUsedActual = initialL2Gas - (gasleft() + Arbitrum.getStorageGasAvailable());\n            if (l2GasUsedClaim > l2GasUsedActual) {\n                revert ExcessGasUsedClaim(l2GasUsedClaim, l2GasUsedActual);\n            }\n        } else {\n            _;\n        }\n    }\n\n    /// @notice Gives Fix Fee in Settlement Token denomination for the tx\n    /// @param l2GasUnits: includes L2 computation and storage gas units\n    function _getFixFee(uint256 l2GasUnits)\n        internal\n        view\n        override\n        checkTxGasPrice(tx.gasprice)\n        returns (uint256 fixFee)\n    {\n        if (l2GasUnits == 0 || address(nativeOracle).isZero()) return 0;\n\n        uint256 l1FeeInWei;\n\n        // if call from EOA then include L1 fee, i.e. do not refund L1 fee to calls from contract\n        // this is due to a single contract can make multiple liquidations in single tx.\n        // TODO is there a way to refund L1 fee once to contracts?\n        if (msg.sender == tx.origin) {\n            l1FeeInWei = Arbitrum.getCurrentTxL1GasFees();\n        }\n\n        uint256 l2FeeInWei = l2GasUnits * tx.gasprice;\n\n        uint256 ethPriceInUsdc = nativeOracle.getTwapPriceX128(5 minutes);\n        return (l1FeeInWei + l2FeeInWei).mulDiv(ethPriceInUsdc, FixedPoint128.Q128);\n    }\n}\n"
    },
    "@134dd3v/arbos-precompiles/arbos/builtin/ArbAggregator.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity >=0.4.21 <0.9.0;\n\ninterface ArbAggregator {\n    // Get the preferred aggregator for an address.\n    // Returns (preferredAggregatorAddress, isDefault)\n    //     isDefault is true if addr is set to prefer the default aggregator\n    function getPreferredAggregator(address addr) external view returns (address, bool);\n\n    // Set the caller's preferred aggregator.\n    // If prefAgg is zero, this sets the caller to prefer the default aggregator\n    function setPreferredAggregator(address prefAgg) external;\n\n    // Get default aggregator.\n    function getDefaultAggregator() external view returns (address);\n\n    // Set the preferred aggregator.\n    // Reverts unless called by the chain owner or the current default aggregator.\n    function setDefaultAggregator(address newDefault) external;\n\n    // Get the address where fees to aggregator are sent.\n    // This will often but not always be the same as the aggregator's address.\n    function getFeeCollector(address aggregator) external view returns (address);\n\n    // Set the address where fees to aggregator are sent.\n    // This reverts unless called by the address that would be returned by getFeeCollector(aggregator),\n    //      or by the chain owner.\n    function setFeeCollector(address aggregator, address newFeeCollector) external;\n\n    // Get the tx base fee (in approximate L1 gas) for aggregator\n    function getTxBaseFee(address aggregator) external view returns (uint);\n\n    // Set the tx base fee (in approximate L1 gas) for aggregator\n    // Revert unless called by aggregator or the chain owner\n    // Revert if feeInL1Gas is outside the chain's allowed bounds\n    function setTxBaseFee(address aggregator, uint feeInL1Gas) external;\n}\n\n"
    },
    "@134dd3v/arbos-precompiles/arbos/builtin/ArbSys.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n* @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface ArbSys {\n    /**\n    * @notice Get internal version number identifying an ArbOS build\n    * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns(uint);\n\n    /**\n    * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n    * @return block number as int\n     */ \n    function arbBlockNumber() external view returns (uint);\n\n    /** \n    * @notice Send given amount of Eth to dest from sender.\n    * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n    * @param destination recipient address on L1\n    * @return unique identifier for this L2-to-L1 transaction.\n    */\n    function withdrawEth(address destination) external payable returns(uint);\n\n    /** \n    * @notice Send a transaction to L1\n    * @param destination recipient address on L1 \n    * @param calldataForL1 (optional) calldata for L1 contract call\n    * @return a unique identifier for this L2-to-L1 transaction.\n    */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns(uint);\n\n    /** \n    * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n    * @param account target account\n    * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n    */\n    function getTransactionCount(address account) external view returns(uint256);\n\n    /**  \n    * @notice get the value of target L2 storage slot \n    * This function is only callable from address 0 to prevent contracts from being able to call it\n    * @param account target account\n    * @param index target index of storage slot \n    * @return stotage value for the given account at the given index\n    */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n    * @notice check if current call is coming from l1\n    * @return true if the caller of this was called directly from L1\n    */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns(address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns(uint);\n\n    event L2ToL1Transaction(address caller, address indexed destination, uint indexed uniqueId,\n                            uint indexed batchNumber, uint indexInBatch,\n                            uint arbBlockNum, uint ethBlockNum, uint timestamp,\n                            uint callvalue, bytes data);\n}\n\n"
    },
    "@134dd3v/arbos-precompiles/arbos/builtin/ArbGasInfo.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity >=0.4.21 <0.9.0;\n\ninterface ArbGasInfo {\n    // return gas prices in wei, assuming the specified aggregator is used\n    //        (\n    //            per L2 tx,\n    //            per L1 calldata unit, (zero byte = 4 units, nonzero byte = 16 units)\n    //            per storage allocation,\n    //            per ArbGas base,\n    //            per ArbGas congestion,\n    //            per ArbGas total\n    //        )\n    function getPricesInWeiWithAggregator(address aggregator) external view returns (uint, uint, uint, uint, uint, uint);\n\n    // return gas prices in wei, as described above, assuming the caller's preferred aggregator is used\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\n    function getPricesInWei() external view returns (uint, uint, uint, uint, uint, uint);\n\n    // return prices in ArbGas (per L2 tx, per L1 calldata unit, per storage allocation),\n    //       assuming the specified aggregator is used\n    function getPricesInArbGasWithAggregator(address aggregator) external view returns (uint, uint, uint);\n\n    // return gas prices in ArbGas, as described above, assuming the caller's preferred aggregator is used\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\n    function getPricesInArbGas() external view returns (uint, uint, uint);\n\n    // return gas accounting parameters (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\n    function getGasAccountingParams() external view returns (uint, uint, uint);\n\n    // get ArbOS's estimate of the L1 gas price in wei\n    function getL1GasPriceEstimate() external view returns(uint);\n\n    // set ArbOS's estimate of the L1 gas price in wei\n    // reverts unless called by chain owner or designated gas oracle (if any)\n    function setL1GasPriceEstimate(uint priceInWei) external;\n\n    // get L1 gas fees paid by the current transaction (txBaseFeeWei, calldataFeeWei)\n    function getCurrentTxL1GasFees() external view returns(uint);\n}\n"
    },
    "contracts/libraries/Arbitrum.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport { Calldata } from './Calldata.sol';\n\nimport { ArbAggregator } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbAggregator.sol';\nimport { ArbSys } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbSys.sol';\nimport { ArbGasInfo } from '@134dd3v/arbos-precompiles/arbos/builtin/ArbGasInfo.sol';\n\n/// @title Arbitrum helper functions\nlibrary Arbitrum {\n    ArbAggregator constant arbAggregator = ArbAggregator(0x000000000000000000000000000000000000006D);\n    ArbSys constant arbSys = ArbSys(0x0000000000000000000000000000000000000064);\n    ArbGasInfo constant arbGasInfo = ArbGasInfo(0x000000000000000000000000000000000000006C);\n\n    function getStorageGasAvailable() internal view returns (uint256) {\n        (bool success, bytes memory data) = address(arbSys).staticcall(\n            abi.encodeCall(arbSys.getStorageGasAvailable, ())\n        );\n        if (!success || data.length == 0) {\n            return 0;\n        }\n        return abi.decode(data, (uint256));\n    }\n\n    function getCurrentTxL1GasFees() internal view returns (uint256) {\n        (bool success, bytes memory data) = address(arbSys).staticcall(\n            abi.encodeCall(arbGasInfo.getCurrentTxL1GasFees, ())\n        );\n        if (!success || data.length == 0) {\n            return 0;\n        }\n        return abi.decode(data, (uint256));\n    }\n\n    function getTxGasPrice() internal view returns (uint256) {\n        return tx.gasprice;\n    }\n}\n"
    },
    "contracts/test/ArbitrumFixFeeTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Arbitrum } from '../libraries/Arbitrum.sol';\n\nimport { ClearingHouseArbitrum } from '../protocol/clearinghouse/ClearingHouseArbitrum.sol';\n\ncontract ArbitrumFixFeeTest is ClearingHouseArbitrum {\n    function testMethod(uint256 claimGas) external checkGasUsedClaim(claimGas) {\n        assembly {\n            sstore(0x134dd30, 0x134dd30)\n        }\n    }\n\n    event Uint(string str, uint256 val);\n\n    function emitGasCostWei() external {\n        emit Uint('Arbitrum.getTotalL1FeeInWei()', Arbitrum.getCurrentTxL1GasFees());\n    }\n\n    // TODO remove this after arbitrum doubts are clear\n    // https://discord.com/channels/585084330037084172/859511259183448084/929936482075050014\n\n    // fallback() external {\n    //     run();\n    // }\n\n    // function run() public {\n    //     emit Arbitrum.Uint('gasleft()', gasleft());\n    //     uint256 cost = Arbitrum.getCurrentTxL1GasFees();\n    //     emit Arbitrum.Uint('gasleft()', gasleft());\n    //     emit Arbitrum.Uint('cost', cost);\n    //     emit Arbitrum.Uint('gasleft()', gasleft());\n    //     uint256 l1fees = Arbitrum.arbGasInfo.getCurrentTxL1GasFees();\n    //     emit Arbitrum.Uint('Arbitrum.arbGasInfo.getCurrentTxL1GasFees()', l1fees);\n    //     emit Arbitrum.Uint('gasleft()', gasleft());\n\n    //     address defaultAggregator = Arbitrum.arbAggregator.getDefaultAggregator();\n    //     (uint256 intrinsicWei, uint256 weiPerCalldataUnits, , , , ) = Arbitrum.arbGasInfo.getPricesInWeiWithAggregator(\n    //         defaultAggregator\n    //     );\n\n    //     emit Arbitrum.Uint(\n    //         '(l1fees - intrinsicWei) / weiPerCalldataUnits',\n    //         (l1fees - intrinsicWei) / weiPerCalldataUnits\n    //     );\n    // }\n\n    // function trySstore() public {\n    //     Arbitrum.printStuff();\n\n    //     assembly {\n    //         sstore(1, 2)\n    //         sstore(3, 2)\n    //     }\n\n    //     Arbitrum.printStuff();\n    // }\n\n    // event Uint(string str, uint256 val);\n    // event Address(string str, address val);\n    // event Bytes(string str, bytes val);\n\n    // function printStuff() internal {\n    //     emit Uint('tx.gasprice', tx.gasprice);\n    //     emit Uint('gasleft()', gasleft());\n    //     address defaultAggregator = Arbitrum.arbAggregator.getDefaultAggregator();\n    //     emit Address('getDefaultAggregator', defaultAggregator);\n    //     emit Uint('getTxBaseFee', Arbitrum.arbAggregatorarbAggregator.getTxBaseFee(defaultAggregator));\n    //     emit Uint('getStorageGasAvailable', Arbitrum.arbSys.getStorageGasAvailable()); // TODO this is always giving zero, check with arbitrum team\n    //     {\n    //         (uint256 a, uint256 b, uint256 c, uint256 d, uint256 e, uint256 f) = Arbitrum\n    //             .arbGasInfo\n    //             .getPricesInWeiWithAggregator(defaultAggregator);\n    //         emit Uint('getPricesInWeiWithAggregator-a', a); // this is L1 fixed fee exactly\n    //         emit Uint('getPricesInWeiWithAggregator-b', b); // need to take this and multiply with calldata units\n    //         emit Uint('getPricesInWeiWithAggregator-c', c); // per storage slot\n    //         emit Uint('getPricesInWeiWithAggregator-d', d);\n    //         emit Uint('getPricesInWeiWithAggregator-e', e);\n    //         emit Uint('getPricesInWeiWithAggregator-f', f);\n    //     }\n\n    //     {\n    //         (uint256 a, uint256 b, uint256 c, uint256 d, uint256 e, uint256 f) = Arbitrum.arbGasInfo.getPricesInWei();\n    //         emit Uint('getPricesInWei-a', a);\n    //         emit Uint('getPricesInWei-b', b);\n    //         emit Uint('getPricesInWei-c', c);\n    //         emit Uint('getPricesInWei-d', d);\n    //         emit Uint('getPricesInWei-e', e);\n    //         emit Uint('getPricesInWei-f', f);\n    //     }\n\n    //     {\n    //         (uint256 a, uint256 b, uint256 c) = Arbitrum.arbGasInfo.getPricesInArbGasWithAggregator(defaultAggregator);\n    //         emit Uint('getPricesInArbGasWithAggregator-a', a);\n    //         emit Uint('getPricesInArbGasWithAggregator-b', b);\n    //         emit Uint('getPricesInArbGasWithAggregator-c', c);\n    //     }\n    //     {\n    //         (uint256 a, uint256 b, uint256 c) = Arbitrum.arbGasInfo.getPricesInArbGas();\n    //         emit Uint('getPricesInArbGas-a', a);\n    //         emit Uint('getPricesInArbGas-b', b);\n    //         emit Uint('getPricesInArbGas-c', c);\n    //     }\n\n    //     {\n    //         (uint256 a, uint256 b, uint256 c) = Arbitrum.arbGasInfo.getGasAccountingParams();\n    //         emit Uint('getGasAccountingParams-a', a);\n    //         emit Uint('getGasAccountingParams-b', b);\n    //         emit Uint('getGasAccountingParams-c', c);\n    //     }\n\n    //     emit Uint('getL1GasPriceEstimate', Arbitrum.arbGasInfo.getL1GasPriceEstimate());\n    //     emit Uint('getCurrentTxL1GasFees', Arbitrum.arbGasInfo.getCurrentTxL1GasFees());\n    //     emit Uint('gasleft()', gasleft());\n    // }\n}\n"
    },
    "contracts/test/CalldataTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Calldata } from '../libraries/Calldata.sol';\n\ncontract CalldataTest {\n    function calculateCostUnits(bytes calldata data) external pure returns (uint256 cost) {\n        return Calldata.calculateCostUnits(data);\n    }\n}\n"
    },
    "contracts/test/CollateralDepositSetTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Uint32L8ArrayLib } from '../libraries/Uint32L8Array.sol';\nimport { VPoolWrapperMock } from './mocks/VPoolWrapperMock.sol';\n\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { CollateralDeposit } from '../libraries/CollateralDeposit.sol';\n\nimport { IVToken } from '../interfaces/IVToken.sol';\nimport { IOracle } from '../interfaces/IOracle.sol';\nimport { IClearingHouseStructures } from '../interfaces/clearinghouse/IClearingHouseStructures.sol';\n\nimport { AccountProtocolInfoMock } from './mocks/AccountProtocolInfoMock.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ncontract CollateralDepositSetTest is AccountProtocolInfoMock {\n    using CollateralDeposit for CollateralDeposit.Set;\n    using AddressHelper for address;\n    using AddressHelper for IERC20;\n    using Uint32L8ArrayLib for uint32[8];\n\n    CollateralDeposit.Set depositTokenSet;\n\n    VPoolWrapperMock public wrapper;\n\n    constructor(address _settlementToken) {\n        wrapper = new VPoolWrapperMock();\n        protocol.settlementToken = IERC20(_settlementToken);\n    }\n\n    function initVToken(address vToken) external {\n        protocol.pools[vToken.truncate()].vToken = IVToken(vToken);\n    }\n\n    function init(\n        IERC20 cToken,\n        IOracle oracle,\n        uint32 twapDuration\n    ) external {\n        IClearingHouseStructures.Collateral memory collateral = IClearingHouseStructures.Collateral(\n            cToken,\n            IClearingHouseStructures.CollateralSettings(oracle, twapDuration, true)\n        );\n        protocol.collaterals[collateral.token.truncate()] = collateral;\n    }\n\n    function cleanDeposits() external {\n        for (uint256 i = 0; i < depositTokenSet.active.length; i++) {\n            uint32 collateralId = depositTokenSet.active[i];\n            if (collateralId == 0) break;\n\n            depositTokenSet.decreaseBalance(collateralId, depositTokenSet.deposits[collateralId]);\n        }\n    }\n\n    function increaseBalance(address realTokenAddress, uint256 amount) external {\n        depositTokenSet.increaseBalance(realTokenAddress.truncate(), amount);\n    }\n\n    function decreaseBalance(address realTokenAddress, uint256 amount) external {\n        depositTokenSet.decreaseBalance(realTokenAddress.truncate(), amount);\n    }\n\n    function getAllDepositAccountMarketValue() external view returns (int256 depositValue) {\n        return depositTokenSet.getAllDepositAccountMarketValue(protocol);\n    }\n\n    function getBalance(address realTokenAddress) external view returns (uint256 balance) {\n        return depositTokenSet.deposits[realTokenAddress.truncate()];\n    }\n}\n"
    },
    "contracts/test/Uint32L8ArrayTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Uint32L8ArrayLib } from '../libraries/Uint32L8Array.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract Uint32L8ArrayTest {\n    using Uint32L8ArrayLib for uint32[8];\n\n    uint32[8] array;\n\n    // EXPOSING LIBRARY METHODS\n\n    function include(uint32 element) external {\n        array.include(element);\n    }\n\n    function exclude(uint32 element) external {\n        array.exclude(element);\n    }\n\n    // DEBUG METHODS\n\n    function getter(uint8 index) public view returns (uint32) {\n        return array[index];\n    }\n\n    function getterAll() public view returns (uint32[8] memory) {\n        return array;\n    }\n\n    function length() public view returns (uint8 len) {\n        for (uint256 i = 0; i < 8; i++) {\n            if (array[i] != 0) {\n                len++;\n            }\n            if (array[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function setter(uint8 index, uint32 element) public {\n        array[index] = element;\n    }\n\n    function exists(uint32 element) public view returns (bool) {\n        return array.exists(element);\n    }\n}\n"
    },
    "contracts/protocol/insurancefund/InsuranceFund.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { ERC20Upgradeable } from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport { IERC20 } from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport { SafeERC20 } from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport { IInsuranceFund } from '../../interfaces/IInsuranceFund.sol';\nimport { IClearingHouse } from '../../interfaces/IClearingHouse.sol';\n\ncontract InsuranceFund is IInsuranceFund, Initializable, ERC20Upgradeable {\n    using SafeERC20 for IERC20;\n\n    IERC20 public settlementToken;\n    IClearingHouse public clearingHouse;\n\n    error Unauthorised();\n\n    /// @notice Initializer for Insurance Fund\n    /// @param _settlementToken settlement token\n    /// @param _clearingHouse address of clearing house (proxy) contract\n    /// @param name \"Rage Trade iSettlementToken\"\n    /// @param symbol \"iSettlementToken\"\n    function __initialize_InsuranceFund(\n        IERC20 _settlementToken,\n        IClearingHouse _clearingHouse,\n        string calldata name,\n        string calldata symbol\n    ) external initializer {\n        settlementToken = _settlementToken;\n        clearingHouse = _clearingHouse;\n        __ERC20_init(name, symbol);\n    }\n\n    function deposit(uint256 amount) external {\n        uint256 totalBalance = settlementToken.balanceOf(address(this));\n        uint256 totalShares = totalSupply();\n        uint256 toMint;\n        if (totalShares == 0 || totalBalance == 0) {\n            toMint = amount;\n        } else {\n            toMint = (amount * totalShares) / totalBalance;\n        }\n        settlementToken.safeTransferFrom(msg.sender, address(this), amount);\n        _mint(msg.sender, toMint);\n    }\n\n    function withdraw(uint256 shares) external {\n        uint256 totalBalance = settlementToken.balanceOf(address(this));\n        uint256 totalShares = totalSupply();\n        uint256 toWithdraw = (shares * totalBalance) / totalShares;\n        _burn(msg.sender, shares);\n        settlementToken.safeTransfer(msg.sender, toWithdraw);\n    }\n\n    function claim(uint256 amount) external {\n        if (address(clearingHouse) != msg.sender) revert Unauthorised();\n        settlementToken.safeTransfer(msg.sender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/utils/TransparentUpgradeableProxy.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { TransparentUpgradeableProxy } from '@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol';\n"
    },
    "contracts/utils/ProxyAdmin.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { ProxyAdmin } from '@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol';\n"
    },
    "contracts/oracles/ChainlinkOracle.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Initializable } from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\nimport { FixedPoint96 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint96.sol';\nimport { FixedPoint128 } from '@uniswap/v3-core-0.8-support/contracts/libraries/FixedPoint128.sol';\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SafeCast } from '@uniswap/v3-core-0.8-support/contracts/libraries/SafeCast.sol';\n\nimport { AddressHelper } from '../libraries/AddressHelper.sol';\nimport { PriceMath } from '../libraries/PriceMath.sol';\n\nimport { IOracle } from '../interfaces/IOracle.sol';\n\ncontract ChainlinkOracle is IOracle {\n    using AddressHelper for address;\n    using FullMath for uint256;\n    using SafeCast for uint256;\n    using PriceMath for uint256;\n\n    AggregatorV3Interface public aggregator;\n    uint8 immutable vTokenDecimals;\n    uint8 immutable vQuoteDecimals;\n\n    error NotEnoughHistory();\n    error IllegalAggregatorAddress(address aggregator);\n\n    constructor(\n        address _aggregator,\n        uint8 _vTokenDecimals,\n        uint8 _vQuoteDecimals\n    ) {\n        if (_aggregator.isZero()) revert IllegalAggregatorAddress(address(0));\n        aggregator = AggregatorV3Interface(_aggregator);\n        vTokenDecimals = _vTokenDecimals;\n        vQuoteDecimals = _vQuoteDecimals;\n    }\n\n    function getTwapPriceX128(uint32 twapDuration) public view returns (uint256 priceX128) {\n        priceX128 = getPrice(twapDuration);\n        priceX128 = priceX128.mulDiv(\n            FixedPoint128.Q128 * 10**(vQuoteDecimals),\n            10**(vTokenDecimals + aggregator.decimals())\n        );\n    }\n\n    function getPrice(uint256 twapDuration) internal view returns (uint256) {\n        (uint80 round, uint256 latestPrice, uint256 latestTS) = _getLatestRoundData();\n        uint256 endTS = block.timestamp;\n        uint256 thresholdTS = endTS - twapDuration;\n\n        //If twap duration = 0 or less data available just return latestPrice\n        if (twapDuration == 0 || round == 0 || latestTS <= thresholdTS) {\n            return latestPrice;\n        }\n\n        uint256 totalTime = endTS - latestTS;\n        uint256 twap = latestPrice * totalTime;\n        uint256 periodLength;\n        uint256 startTS;\n        uint256 periodPrice;\n\n        endTS = latestTS;\n\n        //Aggregate prices for all the eligible rounds before thresholdTS i.e. adds price*periodLength to twap\n        //For the last eligible round goes till thresholdTS only\n        while (true) {\n            //If 0 round is reached before reaching thresholdTS then just consider the available data\n            if (round == 0) {\n                return totalTime == 0 ? latestPrice : twap / totalTime;\n            }\n\n            round = round - 1;\n            (, periodPrice, startTS) = _getRoundData(round);\n\n            //If the starting time of a period is lesser than threshold timestamp (now-twapDuration) then period is thresholdTS -> endTS\n            if (startTS <= thresholdTS) {\n                twap += periodPrice * (endTS - thresholdTS);\n                break;\n            }\n\n            // In normal case where thresholdTS < startTS. The whole period is considered i.e. startTS -> endTS\n            periodLength = (endTS - startTS);\n            twap += (periodPrice * periodLength);\n            totalTime += periodLength;\n\n            //endTS of previous period = startTS of current period\n            endTS = startTS;\n        }\n\n        //Divide the accumulated value by the whole duration\n        return twap == 0 ? latestPrice : twap / twapDuration;\n    }\n\n    function _getLatestRoundData()\n        private\n        view\n        returns (\n            uint80,\n            uint256 finalPrice,\n            uint256\n        )\n    {\n        (uint80 round, int256 latestPrice, , uint256 latestTS, ) = aggregator.latestRoundData();\n        finalPrice = uint256(latestPrice);\n\n        if (latestPrice < 0 && round <= 0) revert NotEnoughHistory();\n\n        if (latestPrice < 0) {\n            (round, finalPrice, latestTS) = _getRoundData(round - 1);\n        }\n        return (round, finalPrice, latestTS);\n    }\n\n    function _getRoundData(uint80 _round)\n        private\n        view\n        returns (\n            uint80,\n            uint256,\n            uint256\n        )\n    {\n        (uint80 round, int256 latestPrice, , uint256 latestTS, ) = aggregator.getRoundData(_round);\n        while (latestPrice < 0 && round > 0) {\n            round = round - 1;\n            (, latestPrice, , latestTS, ) = aggregator.getRoundData(round);\n        }\n        if (latestPrice < 0 && round <= 0) revert NotEnoughHistory();\n        return (round, uint256(latestPrice), latestTS);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/test/TickTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { IUniswapV3Pool } from '@uniswap/v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport { FundingPayment } from '../libraries/FundingPayment.sol';\nimport { Tick } from '../libraries/Tick.sol';\n\nimport { IVToken } from '../interfaces/IVToken.sol';\n\nimport { UniswapV3PoolMock } from './mocks/UniswapV3PoolMock.sol';\n\ncontract TickTest {\n    using FundingPayment for FundingPayment.Info;\n    using Tick for mapping(int24 => Tick.Info);\n    using Tick for IUniswapV3Pool;\n\n    mapping(int24 => Tick.Info) public ticksExtended;\n\n    FundingPayment.Info public fpGlobal;\n    uint256 public sumFeeGlobalX128;\n\n    IUniswapV3Pool public vPool;\n\n    constructor() {\n        vPool = IUniswapV3Pool(address(new UniswapV3PoolMock()));\n    }\n\n    function setTick(int24 tickIndex, Tick.Info memory tick) external {\n        ticksExtended[tickIndex] = tick;\n    }\n\n    function setFpGlobal(FundingPayment.Info calldata fpGlobal_) external {\n        fpGlobal = fpGlobal_;\n    }\n\n    function setFeeGrowthOutsideX128(uint256 _extendedFeeGrowthOutsideX128) external {\n        sumFeeGlobalX128 = _extendedFeeGrowthOutsideX128;\n    }\n\n    function getNetPositionInside(\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent\n    ) public view returns (int256 netPositionGrowthX128) {\n        (netPositionGrowthX128, , ) = ticksExtended.getTickExtendedStateInside(\n            tickLower,\n            tickUpper,\n            tickCurrent,\n            fpGlobal,\n            sumFeeGlobalX128\n        );\n    }\n\n    function getFundingPaymentGrowthInside(\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent\n    ) public view returns (int256 fundingPaymentGrowth) {\n        (, fundingPaymentGrowth, ) = ticksExtended.getTickExtendedStateInside(\n            tickLower,\n            tickUpper,\n            tickCurrent,\n            fpGlobal,\n            sumFeeGlobalX128\n        );\n    }\n\n    function getFeeGrowthInside(\n        int24 tickLower,\n        int24 tickUpper,\n        int24 tickCurrent\n    ) public view returns (uint256 extendedFeeGrowthInside) {\n        (, , extendedFeeGrowthInside) = ticksExtended.getTickExtendedStateInside(\n            tickLower,\n            tickUpper,\n            tickCurrent,\n            fpGlobal,\n            sumFeeGlobalX128\n        );\n    }\n\n    function registerTrade(\n        int256 vTokenAmount,\n        uint256 liquidity,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) public {\n        fpGlobal.update(vTokenAmount, liquidity, blockTimestamp, realPriceX128, virtualPriceX128);\n    }\n\n    function cross(int24 tickNext) external {\n        ticksExtended.cross(tickNext, fpGlobal, sumFeeGlobalX128);\n    }\n}\n"
    },
    "contracts/test/mocks/UniswapV3PoolMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\ncontract UniswapV3PoolMock {\n    struct Tick {\n        uint128 liquidityGross;\n        int128 liquidityNet;\n        uint256 feeGrowthOutside0X128;\n        uint256 feeGrowthOutside1X128;\n        int56 tickCumulativeOutside;\n        uint160 secondsPerLiquidityOutsideX128;\n        uint32 secondsOutside;\n        bool initialized;\n    }\n\n    mapping(int24 => Tick) public ticks;\n\n    function setTick(\n        int24 tick,\n        uint128 liquidityGross,\n        int128 liquidityNet,\n        uint256 feeGrowthOutside0X128,\n        uint256 feeGrowthOutside1X128,\n        int56 tickCumulativeOutside,\n        uint160 secondsPerLiquidityOutsideX128,\n        uint32 secondsOutside,\n        bool initialized\n    ) external {\n        ticks[tick].liquidityGross = liquidityGross;\n        ticks[tick].liquidityNet = liquidityNet;\n        ticks[tick].feeGrowthOutside0X128 = feeGrowthOutside0X128;\n        ticks[tick].feeGrowthOutside1X128 = feeGrowthOutside1X128;\n        ticks[tick].tickCumulativeOutside = tickCumulativeOutside;\n        ticks[tick].secondsPerLiquidityOutsideX128 = secondsPerLiquidityOutsideX128;\n        ticks[tick].secondsOutside = secondsOutside;\n        ticks[tick].initialized = initialized;\n    }\n\n    uint256 public feeGrowthGlobal0X128;\n    uint256 public feeGrowthGlobal1X128;\n\n    function setFeeGrowth(uint256 _feeGrowthGlobal0X128, uint256 _feeGrowthGlobal1X128) external {\n        feeGrowthGlobal0X128 = _feeGrowthGlobal0X128;\n        feeGrowthGlobal1X128 = _feeGrowthGlobal1X128;\n    }\n}\n"
    },
    "contracts/test/FundingPaymentTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { FundingPayment } from '../libraries/FundingPayment.sol';\n\ncontract FundingPaymentTest {\n    using FundingPayment for FundingPayment.Info;\n\n    FundingPayment.Info public fpGlobal;\n\n    function update(\n        int256 vTokenAmount,\n        uint256 liquidity,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) public {\n        return fpGlobal.update(vTokenAmount, liquidity, blockTimestamp, realPriceX128, virtualPriceX128);\n    }\n\n    function nextAX128(\n        uint48 timestampLast,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) public pure returns (int256) {\n        return FundingPayment.nextAX128(timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\n    }\n\n    function extrapolatedSumAX128(\n        int256 sumA,\n        uint48 timestampLast,\n        uint48 blockTimestamp,\n        uint256 realPriceX128,\n        uint256 virtualPriceX128\n    ) public pure returns (int256) {\n        return\n            FundingPayment.extrapolatedSumAX128(sumA, timestampLast, blockTimestamp, realPriceX128, virtualPriceX128);\n    }\n\n    function extrapolatedSumFpX128(\n        int256 sumAX128,\n        int256 sumBX128,\n        int256 sumFpX128,\n        int256 sumALatestX128\n    ) public pure returns (int256) {\n        return FundingPayment.extrapolatedSumFpX128(sumAX128, sumBX128, sumFpX128, sumALatestX128);\n    }\n\n    function billLp(\n        int256 sumAX128,\n        int256 sumFpInsideX128,\n        int256 sumAChkptX128,\n        int256 sumBInsideChkptX128,\n        int256 sumFpInsideChkptX128,\n        uint256 liquidity\n    ) internal pure returns (int256) {\n        return\n            FundingPayment.bill(\n                sumAX128,\n                sumFpInsideX128,\n                sumAChkptX128,\n                sumBInsideChkptX128,\n                sumFpInsideChkptX128,\n                liquidity\n            );\n    }\n\n    function billTrader(\n        int256 sumAX128,\n        int256 sumAChkptX128,\n        int256 netTraderPosition\n    ) internal pure returns (int256) {\n        return FundingPayment.bill(sumAX128, sumAChkptX128, netTraderPosition);\n    }\n}\n"
    },
    "contracts/test/ExtsloadTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Extsload } from '../utils/Extsload.sol';\n\ncontract ExtsloadTest is Extsload {\n    constructor() {\n        assembly {\n            sstore(3, 9)\n            sstore(4, 16)\n            sstore(5, 25)\n        }\n    }\n}\n"
    },
    "contracts/test/SignedFullMathTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { FullMath } from '@uniswap/v3-core-0.8-support/contracts/libraries/FullMath.sol';\nimport { SignedFullMath } from '../libraries/SignedFullMath.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract SignedFullMathTest {\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) public pure returns (uint256 result) {\n        return FullMath.mulDiv(a, b, denominator);\n    }\n\n    function mulDiv(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) public pure returns (int256 result) {\n        return SignedFullMath.mulDiv(a, b, denominator);\n    }\n\n    function mulDiv(\n        int256 a,\n        int256 b,\n        int256 denominator\n    ) public pure returns (int256 result) {\n        return SignedFullMath.mulDiv(a, b, denominator);\n    }\n\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) public pure returns (uint256 result) {\n        return FullMath.mulDivRoundingUp(a, b, denominator);\n    }\n\n    function mulDivRoundingDown(\n        int256 a,\n        uint256 b,\n        uint256 denominator\n    ) public pure returns (int256 result) {\n        return SignedFullMath.mulDivRoundingDown(a, b, denominator);\n    }\n\n    function mulDivRoundingDown(\n        int256 a,\n        int256 b,\n        int256 denominator\n    ) public pure returns (int256 result) {\n        return SignedFullMath.mulDivRoundingDown(a, b, denominator);\n    }\n}\n"
    },
    "contracts/test/mocks/MockAggregatorV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.12;\n\nimport { AggregatorV3Interface } from '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\ncontract MockAggregatorV3 is AggregatorV3Interface {\n    function decimals() external view returns (uint8) {}\n\n    function description() external view returns (string memory) {}\n\n    function version() external view returns (uint256) {}\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {}\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {}\n}\n"
    },
    "contracts/test/BisectionTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Bisection } from '../libraries/Bisection.sol';\n\ncontract BisectionTest {\n    function increasingFunction(uint160 val) public pure returns (uint256) {\n        return (val * 3);\n    }\n\n    function findSolution(\n        uint256 y_target,\n        uint160 x_lower,\n        uint160 x_upper\n    ) external pure returns (uint160) {\n        return Bisection.findSolution(increasingFunction, y_target, x_lower, x_upper);\n    }\n}\n"
    },
    "contracts/test/GoodAddressDeployerTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { GoodAddressDeployer } from '../libraries/GoodAddressDeployer.sol';\n\ncontract GoodAddressDeployerTest {\n    receive() external payable {}\n\n    event Address(address val);\n\n    function deploy(uint256 amount, bytes memory bytecode) external returns (address computed) {\n        computed = GoodAddressDeployer.deploy(amount, bytecode, _isAddressGood);\n        emit Address(computed);\n    }\n\n    // to be overriden using smock\n    function isAddressGood(address) external pure returns (bool) {\n        return false;\n    }\n\n    function _isAddressGood(address input) internal view returns (bool) {\n        return this.isAddressGood(input);\n    }\n}\n"
    },
    "contracts/test/mocks/RealTokenMock.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\n// pragma solidity ^0.7.6;\n\n// if importing uniswap v3 libraries this might not work\npragma solidity ^0.8.9;\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\n\ncontract RealTokenMock is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser('WETH', 'WETH') {}\n}\n"
    },
    "contracts/test/LiquidityPositionSetTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { LiquidityPositionSet, LiquidityPosition } from '../libraries/LiquidityPositionSet.sol';\nimport { VPoolWrapperMock } from './mocks/VPoolWrapperMock.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract LiquidityPositionSetTest {\n    using LiquidityPositionSet for LiquidityPosition.Set;\n    using LiquidityPosition for LiquidityPosition.Info;\n\n    LiquidityPosition.Set liquidityPositions;\n    VPoolWrapperMock public wrapper;\n\n    constructor() {\n        wrapper = new VPoolWrapperMock();\n    }\n\n    function isPositionActive(int24 tickLower, int24 tickUpper) public view returns (bool) {\n        return liquidityPositions.isPositionActive(tickLower, tickUpper);\n    }\n\n    function createEmptyPosition(int24 tickLower, int24 tickUpper)\n        external\n        returns (LiquidityPosition.Info memory info)\n    {\n        info = liquidityPositions.activate(tickLower, tickUpper);\n    }\n}\n"
    },
    "contracts/test/Uint48L5ArrayTest.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport { Uint48L5ArrayLib } from '../libraries/Uint48L5Array.sol';\n\nimport { console } from 'hardhat/console.sol';\n\ncontract Uint48L5ArrayTest {\n    using Uint48L5ArrayLib for uint48[5];\n\n    uint48[5] array;\n\n    // EXPOSING LIBRARY METHODS\n\n    function include(uint48 element) external {\n        array.include(element);\n    }\n\n    function exclude(uint48 element) external {\n        array.exclude(element);\n    }\n\n    // DEBUG METHODS\n\n    function getter(uint8 index) public view returns (uint48) {\n        return array[index];\n    }\n\n    function getterAll() public view returns (uint48[5] memory) {\n        return array;\n    }\n\n    function length() public view returns (uint8 len) {\n        for (uint256 i = 0; i < 5; i++) {\n            if (array[i] != 0) {\n                len++;\n            }\n            if (array[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function setter(uint8 index, uint48 element) public {\n        array[index] = element;\n    }\n\n    function exists(uint48 element) public view returns (bool) {\n        return array.exists(element);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}